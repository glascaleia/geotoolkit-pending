/*$************************************************************************************************
 **
 ** $Id: 
 **
 ** $URL: https://geoapi.svn.sourceforge.net/svnroot/geoapi/trunk/geoapi/src/main/java/org/opengis/services/ServiceIdentification.java $
 **
 ** Copyright (C) 2004-2005 Open GIS Consortium, Inc.
 ** All Rights Reserved. http://www.opengis.org/legal/
 **
 *************************************************************************************************/

package org.opengis.service;

import java.util.Collection;
import org.opengis.annotation.UML;
import org.opengis.metadata.constraint.Constraints;
import org.opengis.metadata.distribution.StandardOrderProcess;
import org.opengis.metadata.extent.Extent;
import org.opengis.metadata.identification.DataIdentification;
import org.opengis.metadata.identification.Identification;
import org.opengis.util.GenericName;
import static org.opengis.annotation.Obligation.*;
import static org.opengis.annotation.Specification.*;

/**
 *
 * 
 * @author <A HREF="http://www.opengeospatial.org/standards/as# 02-112">ISO 19119</A>
 * @author Guilhem Legal
 * 
 * @module pending
 */
//@UML(identifier="SV_ServiceIdentification", specification=ISO_19119)
public interface ServiceIdentification extends Identification {
    
    /**
     * A service type name from a registry of services. For examples, 
     * the values of the namespace and name attributes of GeneralName may be "OGC" and catalogue.
     */
    //@UML(identifier="serviceType", obligation=MANDATORY, specification=ISO_19119)
    GenericName getServiceType();
    
    /**
     * Provides for searching based on the version of serviceType. For example,
     * we may only be interested in OGC Catalogue v1.1 services. 
     * If version is maintained as a separate attribute users can easily search for all services of a type regardless of the version.
     */
    //@UML(identifier="serviceTypeVersion", obligation=OPTIONAL, specification=ISO_19119)
    Collection<String> getServiceTypeVersion();
    
    /**
     * information about the availability of the service, including:
     *  - fees
     *  - planned available date and time
     *  - ordering
     *  - turnaround
     */
    //@UML(identifier="accessProperties", obligation=OPTIONAL, specification=ISO_19119)
    StandardOrderProcess getAccessProperties();
    
     /**
      * legal and securty constraints on accessing the service and distributing data generated by the service.
      */
    //@UML(identifier="restrictions", obligation=OPTIONAL, specification=ISO_19119)
    Constraints getRestrictions();
    
     /**
      * provides information about the operations that comprise the service. 
      */
    //@UML(identifier="containsOperations", obligation=MANDATORY, specification=ISO_19119)
    Collection<OperationMetadata> getContainsOperations();
    
     /**
      * Provides information on the datasets that the service operates on.
      */
    //@UML(identifier="operatesOn", obligation=OPTIONAL, specification=ISO_19119)
    Collection<DataIdentification> getOperatesOn();
    
    /**
     * The geographic/temporal region where the service is valid including the bounding box,
     * bounding polygon, vertical or temporal extent of the service.
     */
    //@UML(identifier="extent", obligation=CONDITIONAL, specification=ISO_19119)
    Collection<Extent> getExtent();
    
    /**
     * further description of the data coupling in the case of tightly coupled services.
     */
    //@UML(identifier="coupledResource", obligation=OPTIONAL, specification=ISO_19119)
    Collection<CoupledResource> getCoupledResource();
    
    
    /**
     * type of coupling between service and associated data (if exists)
     */
    //@UML(identifier="couplingType", obligation=MANDATORY, specification=ISO_19119)
    CouplingType getCouplingType();
    
    /**
     * @deprecated deleted in amd.1:2008  
     */
    @Deprecated
    //@UML(identifier="provider", obligation=OPTIONAL, specification=ISO_19119)
    Collection<ServiceProvider> getProvider();
    
    
    

}
