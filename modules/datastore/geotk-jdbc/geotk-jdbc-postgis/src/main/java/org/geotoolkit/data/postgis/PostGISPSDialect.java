/*
 *    Geotoolkit - An Open Source Java GIS Toolkit
 *    http://www.geotoolkit.org
 *
 *    (C) 2002-2008, Open Source Geospatial Foundation (OSGeo)
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotoolkit.data.postgis;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Map;

import org.geotoolkit.jdbc.JDBCDataStore;
import org.geotoolkit.jdbc.PreparedFilterToSQL;
import org.opengis.feature.simple.SimpleFeatureType;
import org.opengis.feature.type.GeometryDescriptor;

import com.vividsolutions.jts.geom.Envelope;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.LinearRing;
import com.vividsolutions.jts.io.WKBWriter;
import org.geotoolkit.jdbc.dialect.PreparedStatementSQLDialect;

public class PostGISPSDialect extends PreparedStatementSQLDialect {

    private final PostGISDialect delegate;

    public PostGISPSDialect(final JDBCDataStore store, final PostGISDialect delegate) {
        super(store);
        this.delegate = delegate;
    }

    @Override
    public Envelope decodeGeometryEnvelope(final ResultSet rs, final int column,
            final Connection cx) throws SQLException, IOException
    {
        return delegate.decodeGeometryEnvelope(rs, column, cx);
    }

    @Override
    public Geometry decodeGeometryValue(final GeometryDescriptor descriptor, final ResultSet rs,
            final String column, final GeometryFactory factory, final Connection cx)
            throws IOException, SQLException
    {
        return delegate.decodeGeometryValue(descriptor, rs, column, factory, cx);
    }

    @Override
    public void encodeGeometryColumn(final GeometryDescriptor gatt, final int srid,
            final StringBuilder sql)
    {
        delegate.encodeGeometryColumn(gatt, srid, sql);
    }

    @Override
    public void encodeGeometryEnvelope(final String tableName, final String geometryColumn,
            final StringBuilder sql)
    {
        delegate.encodeGeometryEnvelope(tableName, geometryColumn, sql);
    }

    @Override
    public void encodePrimaryKey(final String column, final StringBuilder sql)
    {
        delegate.encodePrimaryKey(column, sql);
    }

    @Override
    public Integer getGeometrySRID(final String schemaName, final String tableName,
            final String columnName, final Connection cx) throws SQLException
    {
        return delegate.getGeometrySRID(schemaName, tableName, columnName, cx);
    }

    @Override
    public String getGeometryTypeName(final Integer type) {
        return delegate.getGeometryTypeName(type);
    }

    @Override
    public Class<?> getMapping(final ResultSet columnMetaData, final Connection cx)
            throws SQLException
    {
        return delegate.getMapping(columnMetaData, cx);
    }

    @Override
    public Object getNextAutoGeneratedValue(final String schemaName, final String tableName,
            final String columnName, final Connection cx) throws SQLException
    {
        return delegate.getNextAutoGeneratedValue(schemaName, tableName,
                columnName, cx);
    }

    @Override
    public Object getNextSequenceValue(final String schemaName, final String sequenceName,
            final Connection cx) throws SQLException
    {
        return delegate.getNextSequenceValue(schemaName, sequenceName, cx);
    }

    @Override
    public String getSequenceForColumn(final String schemaName, final String tableName,
            final String columnName, final Connection cx) throws SQLException
    {
        return delegate.getSequenceForColumn(schemaName, tableName, columnName,
                cx);
    }

    public boolean isLooseBBOXEnabled() {
        return delegate.isLooseBBOXEnabled();
    }

    @Override
    public void postCreateTable(final String schemaName, final SimpleFeatureType featureType,
            final Connection cx) throws SQLException
    {
        delegate.postCreateTable(schemaName, featureType, cx);
    }

    @Override
    public void registerClassToSqlMappings(final Map<Class<?>, Integer> mappings) {
        delegate.registerClassToSqlMappings(mappings);
    }

    @Override
    public void registerSqlTypeNameToClassMappings(final Map<String, Class<?>> mappings) {
        delegate.registerSqlTypeNameToClassMappings(mappings);
    }

    @Override
    public void registerSqlTypeToSqlTypeNameOverrides(final Map<Integer, String> overrides) {
        delegate.registerSqlTypeToSqlTypeNameOverrides(overrides);
    }

    public void setLooseBBOXEnabled(final boolean looseBBOXEnabled) {
        delegate.setLooseBBOXEnabled(looseBBOXEnabled);
    }

    @Override
    public void prepareGeometryValue(final Geometry g, final int srid, final Class binding,
            final StringBuilder sql)
    {
        if (g != null) {
            sql.append("GeomFromWKB(?, " + srid + ")");
        } else {
            sql.append("?");
        }
    }

    @Override
    public void setGeometryValue(Geometry g, final int srid, final Class binding,
            final PreparedStatement ps, final int column) throws SQLException
    {
        if (g != null) {
            if (g instanceof LinearRing) {
                //postgis does not handle linear rings, convert to just a line string
                g = g.getFactory().createLineString(((LinearRing) g).getCoordinateSequence());
            }

            final byte[] bytes = new WKBWriter().write(g);
            ps.setBytes(column, bytes);
        } else {
            ps.setNull(column, Types.OTHER, "Geometry");
        }
    }

    @Override
    public PreparedFilterToSQL createPreparedFilterToSQL() {
        final PostgisPSFilterToSql fts = new PostgisPSFilterToSql(this);
        fts.setLooseBBOXEnabled(delegate.isLooseBBOXEnabled());
        return fts;
    }

    @Override
    public boolean isLimitOffsetSupported() {
        return delegate.isLimitOffsetSupported();
    }

    @Override
    public void applyLimitOffset(final StringBuilder sql, final int limit, final int offset) {
        delegate.applyLimitOffset(sql, limit, offset);
    }
}
