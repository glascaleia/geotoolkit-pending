/*
 *    Geotoolkit - An Open Source Java GIS Toolkit
 *    http://www.geotoolkit.org
 * 
 *    (C) 2008, Open Source Geospatial Foundation (OSGeo)
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotoolkit.data;

import java.util.EventObject;

import org.geotoolkit.geometry.jts.JTSEnvelope2D;

import org.opengis.feature.Feature;
import org.opengis.feature.type.FeatureType;
import org.opengis.filter.Filter;

import com.vividsolutions.jts.geom.Envelope;

/**
 * Represents all events triggered by DataStore instances (typically change events).
 *
 * <p>
 * The "Source" for FeatureEvents is taken to be a <code>FeatureSource</code>,
 * rather than <code>DataStore</code>. The is due to FeatureSource<SimpleFeatureType, SimpleFeature> having a
 * hold of Transaction information.
 * </p>
 *
 * <p>
 * DataStore implementations will actually keep the list listeners sorted
 * by TypeName, and can report FeatureWriter modifications as required
 * (by filtering the Listener list by typeName and Transaction).
 * </p>
 *
 * <p>
 * The Transaction.commit() operation will also need to provide notification, this
 * shows up as a CHANGE event; with a bit more detail being available in the subclass
 * BatchFeatureEvent.
 * </p>
 * 
 * @since GeoTools 2.0
 * @source $URL$
 */
public class FeatureEvent extends EventObject {

    private static final long serialVersionUID = 3154238322369916485L;
    
    public enum Type {

        /**
         * Features have been added.
         * <p>
         * FeatureEvent.getFilter() lists the FeatureIds of the newly created features; please
         * note that these IDs may be changed during a commit.
         */
        ADDED,
        /**
         * Features have been updated.
         * <p>
         * The FeatureEvent.getFilter() can be used to identify the removed
         * features; often this is a FidFilter. But it may be Filter.INCLUDES
         * if we are unsure exactly what has been changed.
         */
        CHANGED,
        /**
         * Features have been removed.
         * <p>
         * The FeatureEvent.getFilter() can be used to identify the removed
         * features; often this is a FidFilter.
         */
        REMOVED,
        /**
         * Changes have been committed.
         * <p>
         * The BatchFeatureEvent.repalceFid method can be used to update any temporary FeatureIds
         * with the actual FeatureId generated by the commit.
         * <p>
         * You can check BatchFeatureEvent getFilter() and getBounds() as well.
         */
        COMMIT,
        /**
         * Changes have been reverted.
         */
        ROLLBACK;

    }
    /**
     * Indicates one of Type.ADDED, Type.REMOVED, Type.CHANGED
     */
    protected Type type;
    /**
     * Indicates the bounds in which the modification occurred.
     *
     * <p>
     * This value is allowed to by <code>null</code> if this information is not
     * known.
     * </p>
     */
    protected JTSEnvelope2D bounds;
    /**
     * The FeatureSource broadcasting the event.
     * <p>
     * Please note when several FeatureSources are operating on different
     * Transactions this value will not always line up with original
     * FeatureSource represented by Event.getSource().
     */
    protected FeatureSource featureSource;
    /**
     * Filter used to indicate what content has changed.
     * <p>
     * This is often an Id filter.
     */
    protected Filter filter;

    /**
     * Makes a deep copy of the provided event.
     */
    public FeatureEvent(FeatureEvent origional) {
        super(origional.getSource());
        this.type = origional.type;
        this.bounds = new JTSEnvelope2D(origional.bounds);
        this.filter = origional.filter; // filter is immutable
        this.featureSource = origional.getFeatureSource();
    }

    /**
     * Constructs a new FeatureEvent.
     *
     * @param source The writer or feature store that fired the event
     * @param eventType One of FEATURE_CHANGED, FEATURE_REMOVED or
     *        FEATURE_ADDED
     * @param bounds The area modified by this change
     */
    public FeatureEvent(Object source, Type type, JTSEnvelope2D bounds, Filter filter) {
        super(source);
        this.type = type;
        this.bounds = bounds;
        this.filter = filter;
        if (source instanceof FeatureSource) {
            this.featureSource = (FeatureSource) source;
        }
    }

    /**
     * Constructs a new FeatureEvent.
     *
     * @param FeatureSource<SimpleFeatureType, SimpleFeature> The DataStore that fired the event
     * @param eventType One of FEATURE_CHANGED, FEATURE_REMOVED or
     *        FEATURE_ADDED
     * @param bounds The area modified by this change
     */
    public FeatureEvent(FeatureSource<? extends FeatureType, ? extends Feature> featureSource,
            Type eventType, Envelope bounds) {
        super(featureSource);
        this.type = eventType;
        this.bounds = JTSEnvelope2D.reference(bounds);
        this.featureSource = featureSource;
        this.filter = null;
    }

    /**
     * Provides access to the FeatureSource<SimpleFeatureType, SimpleFeature> which fired the event.
     *
     * @return The FeatureSource<SimpleFeatureType, SimpleFeature> which was the event's source.
     */
    public FeatureSource<? extends FeatureType, ? extends Feature> getFeatureSource() {
        return (FeatureSource<? extends FeatureType, ? extends Feature>) source;
    }

    public void setFeatureSource(FeatureSource featureSource) {
        source = featureSource;
    }

    /**
     * Provides information on the type of change that has occurred. Possible
     * types are: add, remove, change
     *
     * @return Type
     */
    public Type getType() {
        return type;
    }

    /**
     * Provides access to the area modified (if known).
     *
     * @return A bounding box of the modifications or <code>null</code> if
     *         unknown.
     */
    public JTSEnvelope2D getBounds() {
        return bounds;
    }

    /**
     * Filter describing the content that was changed.
     * 
     * @return A filter that can be used to check if any cached content
     *         you are keeping needs to be updated, or Filter.INCLUDES
     *         if unknown.
     */
    public Filter getFilter() {
        return filter;
    }
}
