/*
 *    Geotoolkit - An Open Source Java GIS Toolkit
 *    http://www.geotoolkit.org
 *
 *    (C) 2007 - 2008, Open Source Geospatial Foundation (OSGeo)
 *    (C) 2008 - 2009, Johann Sorel
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotoolkit.gui.swing.filter;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.geotoolkit.filter.text.cql2.CQL;
import org.geotoolkit.filter.text.cql2.CQLException;
import org.geotoolkit.gui.swing.resource.IconBundle;
import org.geotoolkit.gui.swing.resource.MessageBundle;
import org.geotoolkit.map.FeatureMapLayer;

import org.opengis.feature.type.PropertyDescriptor;
import org.opengis.filter.Filter;

import static org.geotoolkit.util.ArgumentChecks.*;

/**
 * CQL filter panel
 * 
 * @author Johann Sorel (Puzzle-GIS)
 * @module pending
 */
public class JCQLFilterPanel extends javax.swing.JPanel implements FilterPanel{

    private Filter filter = null;
    private FeatureMapLayer layer;

    private final transient ListSelectionListener listListener = new ListSelectionListener() {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            final JList model = (JList) e.getSource();
            final Object value = model.getSelectedValue();
            if (value != null) {
                append(value.toString());
            }

        }
    };

    /** Creates new form JCQLPropertyPanel */
    public JCQLFilterPanel() {
        initComponents();

        guiBasic.addListSelectionListener(listListener);
        guiGIS.addListSelectionListener(listListener);
        guiFields.addListSelectionListener(listListener);
        
//        lst_basic.addListSelectionListener(new ListSelectionListener() {
//
//            public void valueChanged(ListSelectionEvent e) {
//                Object value = lst_basic.getSelectedValue();
//                append(value.toString());
//            }
//        });
//
//        lst_gis.addListSelectionListener(new ListSelectionListener() {
//
//            public void valueChanged(ListSelectionEvent e) {
//                Object value = lst_gis.getSelectedValue();
//                append(value.toString());
//            }
//        });
//
//        lst_field.addListSelectionListener(new ListSelectionListener() {
//
//            public void valueChanged(ListSelectionEvent e) {
//                Object value = lst_field.getSelectedValue();
//                append(value.toString());
//            }
//        });

    }

    private void append(final String val) {
        if (!guiTxtCQL.getText().endsWith(val)) {

            if (!guiTxtCQL.getText().endsWith(" ") && guiTxtCQL.getText().length() > 0) {
                guiTxtCQL.append(" ");
            }
            guiTxtCQL.append(val);
        }
    }

    private Filter verifyQuery(final String str) {

        try {
            final Filter flt = CQL.toFilter(str);
            txt_error.setText(" ");
            return flt;
        } catch (CQLException e) {
            txt_error.setText(MessageBundle.getString("property_cql_error"));
            return null;
        }
    }

    private void parse(final Filter filter) {
        guiTxtCQL.setText(CQL.toCQL(filter));
    }

    private void parse(final FeatureMapLayer ly) {
        
        if (layer != null) {
            guiFields.removeAll();

            final Collection<PropertyDescriptor> col = layer.getCollection().getFeatureType().getDescriptors();
            final Iterator<PropertyDescriptor> it = col.iterator();

            final List<String> vec = new ArrayList<String>();
            while (it.hasNext()) {
                vec.add(it.next().getName().toString());
            }

            guiFields.removeListSelectionListener(listListener);
            guiFields.setListData(vec.toArray());
            guiFields.addListSelectionListener(listListener);
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guiTxtCQL.setColumns(20);
        guiTxtCQL.setRows(5);
        jScrollPane4.setViewportView(guiTxtCQL);

        guiFields.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(guiFields);

        guiGIS.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "CONTAINS(<ATTR1>,<POINT(1 2)>)", "CROSS(<ATTR1>,<LINESTRING(1 2, 10 15)>)", "INTERSECT(<ATTR1>,<GEOMETRYCOLLECTION (POINT (10 10),POINT (30 30),LINESTRING (15 15, 20 20))> )", "BBOX(<ATTR1>,<10>,<20>,<30>,<40>)", "DWITHIN(<ATTR1>, <POINT(1 2)>, <10>, <kilometers>)" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        guiGIS.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(guiGIS);

        guiBasic.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "AND", "OR", "=", "<", "<=", ">", ">=", "BETWEEN", "LIKE", "NOT LIKE", "IS NULL", "IS NOT NULL", "EXISTS", "DOES-NOT-EXIST", "BEFORE", "AFTER", "DURING" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        guiBasic.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(guiBasic);

        jLabel2.setText(MessageBundle.getString("property_cql_basic")); // NOI18N

        jLabel1.setText(MessageBundle.getString("property_cql_advance")); // NOI18N

        jLabel4.setText(MessageBundle.getString("property_cql_field")); // NOI18N

        txt_error.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)))
                    .addComponent(txt_error, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_error)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final javax.swing.JList guiBasic = new javax.swing.JList();
    private final javax.swing.JList guiFields = new javax.swing.JList();
    private final javax.swing.JList guiGIS = new javax.swing.JList();
    private final javax.swing.JTextArea guiTxtCQL = new javax.swing.JTextArea();
    private final javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
    private final javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
    private final javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
    private final javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
    private final javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
    private final javax.swing.JScrollPane jScrollPane3 = new javax.swing.JScrollPane();
    private final javax.swing.JScrollPane jScrollPane4 = new javax.swing.JScrollPane();
    private final javax.swing.JLabel txt_error = new javax.swing.JLabel();
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void setFilter(final Filter filter) {
        ensureNonNull("filter", filter);
        this.filter = filter;
        parse(filter);
    }

    @Override
    public Filter getFilter() {
        Filter flt = verifyQuery(guiTxtCQL.getText());

        if (flt == null) {
            flt = Filter.INCLUDE;
        }
        filter = flt;        
        return filter;
    }

    @Override
    public void setLayer(final FeatureMapLayer layer) {
        ensureNonNull("layer", layer);
        this.layer = layer;
        parse(layer);
    }

    @Override
    public FeatureMapLayer getLayer() {
        return layer;
    }
 
        
    public String getTitle() {
        return MessageBundle.getString("property_cql_filter");
    }

    public ImageIcon getIcon() {
        return IconBundle.getIcon("16_filter_cql");
    }

    public String getToolTip() {
        return null;
    }
       
    @Override
    public JComponent getComponent() {
        return this;
    }
}
