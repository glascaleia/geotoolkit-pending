/*
 *    Geotoolkit - An Open Source Java GIS Toolkit
 *    http://www.geotoolkit.org
 *
 *    (C) 2007 - 2008, Open Source Geospatial Foundation (OSGeo)
 *    (C) 2008 - 2009, Johann Sorel
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotoolkit.gui.swing.go.control;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Point2D;
import java.text.NumberFormat;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.LayoutStyle.ComponentPlacement;

import org.geotoolkit.geometry.DirectPosition2D;
import org.geotoolkit.gui.swing.go.GoMap2D;
import org.geotoolkit.gui.swing.go.J2DMapVolatile;
import org.geotoolkit.gui.swing.resource.IconBundle;
import org.geotoolkit.gui.swing.resource.MessageBundle;

/**
 *
 * @author johann sorel
 */
public class JCoordinateBar extends javax.swing.JPanel {

    private static final ImageIcon ICON_XY = IconBundle.getInstance().getIcon("16_xy");
    private static final ImageIcon ICON_XY_DISABLE = IconBundle.getInstance().getIcon("16_xy_disable");
    private static final ImageIcon ICON_STATEFULL = IconBundle.getInstance().getIcon("16_statefull");
    private static final ImageIcon ICON_STATEFULL_DISABLE = IconBundle.getInstance().getIcon("16_statefull_disable");

    private static final NumberFormat NUMBER_FORMAT = NumberFormat.getNumberInstance();

    private final myListener listener = new myListener();
    private GoMap2D map = null;
    private String error = MessageBundle.getString("map_control_coord_error");
    
    /** 
     * Creates new form JMap2DMouseCoordPanel 
     */
    public JCoordinateBar() {
        initComponents();
        gui_crsButton.setEnabled(false);
        guiAxis.setPressedIcon(ICON_XY);
        guiAxis.setSelectedIcon(ICON_XY);
        guiAxis.setRolloverSelectedIcon(ICON_XY);
        guiAxis.setIcon(ICON_XY_DISABLE);
        guiAxis.setRolloverIcon(ICON_XY_DISABLE);
        guiStatefull.setPressedIcon(ICON_STATEFULL);
        guiStatefull.setSelectedIcon(ICON_STATEFULL);
        guiStatefull.setRolloverSelectedIcon(ICON_STATEFULL);
        guiStatefull.setIcon(ICON_STATEFULL_DISABLE);
        guiStatefull.setRolloverIcon(ICON_STATEFULL_DISABLE);
    }
    
    public GoMap2D getMap() {
        return map;
    }

    public void setMap(GoMap2D map) {
        
        if(this.map != null){
            this.map.getComponent().removeMouseMotionListener(listener);
        }
        
        this.map = map;
        gui_crsButton.setMap(this.map);
        
        if(this.map != null){
            this.map.getComponent().addMouseMotionListener(listener);
        }
        
        gui_crsButton.setEnabled(this.map != null);
    }
        
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gui_crsButton = new JCRSButton();
        guiCoord = new JLabel();
        guiAxis = new JCheckBox();
        guiStatefull = new JCheckBox();

        setOpaque(false);

        guiAxis.setSelected(true);
        guiAxis.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                guiAxisActionPerformed(evt);
            }
        });

        guiStatefull.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                guiStatefullActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(guiStatefull)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(guiAxis)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(guiCoord, GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(gui_crsButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(gui_crsButton, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(guiStatefull, GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
            .addComponent(guiAxis, GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
            .addComponent(guiCoord, GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void guiStatefullActionPerformed(ActionEvent evt) {//GEN-FIRST:event_guiStatefullActionPerformed
        if(map != null && map instanceof J2DMapVolatile){
            ((J2DMapVolatile)map).setStatefull(guiStatefull.isSelected());
        }
    }//GEN-LAST:event_guiStatefullActionPerformed

    private void guiAxisActionPerformed(ActionEvent evt) {//GEN-FIRST:event_guiAxisActionPerformed
        if(map != null){
            map.getCanvas().getController().setAxisProportions((!guiAxis.isSelected()) ? Double.NaN : 1);
        }
    }//GEN-LAST:event_guiAxisActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    JCheckBox guiAxis;
    JLabel guiCoord;
    JCheckBox guiStatefull;
    JCRSButton gui_crsButton;
    // End of variables declaration//GEN-END:variables

    
    private class myListener extends MouseMotionAdapter{

        @Override
        public void mouseMoved(MouseEvent e) {
            update(e);
        }

        @Override
        public void mouseDragged(MouseEvent e) {
            update(e);
        }

        private void update(MouseEvent event){
            
            Point2D coord = new DirectPosition2D();
            try {
                coord = map.getCanvas().getController().getTransform().inverseTransform(event.getPoint(), coord);
            } catch (NoninvertibleTransformException ex) {
                guiCoord.setText(error);
                return;
            }
            
            guiCoord.setText("  X = "+ NUMBER_FORMAT.format(coord.getX()) +"  /  Y = "+ NUMBER_FORMAT.format(coord.getY()) );
        }
        
    }
    
}
