/*
 *    Geotoolkit - An Open Source Java GIS Toolkit
 *    http://www.geotoolkit.org
 *
 *    (C) 2007 - 2008, Open Source Geospatial Foundation (OSGeo)
 *    (C) 2008 - 2009, Johann Sorel
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotoolkit.gui.swing.propertyedit;

import java.awt.Component;
import java.awt.Font;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;

import org.geotoolkit.factory.FactoryFinder;
import org.geotoolkit.gui.swing.style.JTextExpressionPane;
import org.geotoolkit.util.SimpleInternationalString;
import org.geotoolkit.gui.swing.resource.MessageBundle;
import org.geotoolkit.map.FeatureMapLayer;
import org.geotoolkit.map.MapLayer;

import org.opengis.filter.expression.Expression;
import org.opengis.filter.expression.Literal;

/**
 * layer general information panel
 * 
 * @author Johann Sorel
 * @module pending
 */
public class LayerGeneralPanel extends javax.swing.JPanel implements PropertyPane {

    private MapLayer layer = null;
    private final String title;

    /** Creates new form LayerGeneralPanel */
    public LayerGeneralPanel() {
        initComponents();
        title = MessageBundle.getString("property_general_title");        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {





        jLabel15 = new JLabel();
        gui_jtf_name = new JTextField();
        paneTemp = new JPanel();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        guiStartTemp = new JTextExpressionPane();
        guiEndTemp = new JTextExpressionPane();

        jLabel15.setFont(jLabel15.getFont().deriveFont(jLabel15.getFont().getStyle() | Font.BOLD));
        jLabel15.setText(MessageBundle.getString("property_title")); // NOI18N
        paneTemp.setBorder(BorderFactory.createTitledBorder(MessageBundle.getString("temporal_configuration"))); // NOI18N
        jLabel1.setText(MessageBundle.getString("temporal_start")); // NOI18N
        jLabel2.setText(MessageBundle.getString("temporal_end")); // NOI18N
        GroupLayout paneTempLayout = new GroupLayout(paneTemp);
        paneTemp.setLayout(paneTempLayout);
        paneTempLayout.setHorizontalGroup(
            paneTempLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(paneTempLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneTempLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(paneTempLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(guiStartTemp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGroup(paneTempLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(guiEndTemp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        paneTempLayout.setVerticalGroup(
            paneTempLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(paneTempLayout.createSequentialGroup()
                .addGroup(paneTempLayout.createParallelGroup(Alignment.LEADING, false)
                    .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guiStartTemp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(paneTempLayout.createParallelGroup(Alignment.LEADING, false)
                    .addComponent(jLabel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guiEndTemp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(paneTemp, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(gui_jtf_name, GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(gui_jtf_name, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(paneTemp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void parse() {
        guiStartTemp.setLayer(layer);
        guiEndTemp.setLayer(layer);

        if (layer != null) {
            gui_jtf_name.setText(layer.getDescription().getTitle().toString());

        } else {
            gui_jtf_name.setText("");
        }

        paneTemp.setVisible(layer instanceof FeatureMapLayer);

        if(layer instanceof FeatureMapLayer){
            Expression[] temp = ((FeatureMapLayer)layer).getTemporalRange();
            guiStartTemp.parse(temp[0]);
            guiEndTemp.parse(temp[1]);
        }else{
            guiStartTemp.parse(null);
            guiEndTemp.parse(null);
        }

    }

    @Override
    public void setTarget(Object target) {
        if (target instanceof MapLayer) {
            layer = (MapLayer) target;
        } else {
            layer = null;
        }
        parse();
    }

    @Override
    public void apply() {
        if (layer != null) {
            layer.setDescription(FactoryFinder.getStyleFactory(null).description(
                    new SimpleInternationalString(gui_jtf_name.getText()),
                    new SimpleInternationalString("")));

            if(layer instanceof FeatureMapLayer){
                Expression exp1 = guiStartTemp.create();
                Expression exp2 = guiEndTemp.create();
                if(exp1 instanceof Literal && ((Literal)exp1).getValue().equals("") ) exp1 = null;
                if(exp2 instanceof Literal && ((Literal)exp2).getValue().equals("") ) exp2 = null;
                ((FeatureMapLayer)layer).setTemporalRange(exp1,exp2);
            }

        }
    }

    @Override
    public void reset() {
        parse();
    }

    @Override
    public String getTitle() {
        return title;
    }

    @Override
    public ImageIcon getIcon() {
        return null;
    }

    @Override
    public String getToolTip() {
        return title;
    }

    @Override
    public Component getComponent() {
        return this;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextExpressionPane guiEndTemp;
    private JTextExpressionPane guiStartTemp;
    private JTextField gui_jtf_name;
    private JLabel jLabel1;
    private JLabel jLabel15;
    private JLabel jLabel2;
    private JPanel paneTemp;
    // End of variables declaration//GEN-END:variables
}
