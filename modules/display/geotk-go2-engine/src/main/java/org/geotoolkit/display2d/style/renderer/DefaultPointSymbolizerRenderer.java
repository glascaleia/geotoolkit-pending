/*
 *    Geotoolkit - An Open Source Java GIS Toolkit
 *    http://www.geotoolkit.org
 *
 *    (C) 2004 - 2008, Open Source Geospatial Foundation (OSGeo)
 *    (C) 2008 - 2010, Geomatys
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotoolkit.display2d.style.renderer;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.MultiPoint;
import com.vividsolutions.jts.geom.Point;

import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.util.Iterator;
import javax.measure.unit.NonSI;

import org.geotoolkit.display.canvas.VisitFilter;
import org.geotoolkit.display.exception.PortrayalException;
import org.geotoolkit.display2d.primitive.ProjectedFeature;
import org.geotoolkit.display2d.canvas.RenderingContext2D;
import org.geotoolkit.display2d.style.CachedPointSymbolizer;
import org.geotoolkit.referencing.operation.matrix.XAffineTransform;
import org.geotoolkit.display2d.GO2Utilities;
import org.geotoolkit.display2d.primitive.ProjectedCoverage;
import org.geotoolkit.display2d.primitive.ProjectedGeometry;
import org.geotoolkit.display2d.primitive.SearchAreaJ2D;

import org.opengis.feature.Feature;
import org.opengis.referencing.operation.TransformException;

/**
 * @author Johann Sorel (Geomatys)
 * @module pending
 */
public class DefaultPointSymbolizerRenderer extends AbstractSymbolizerRenderer<CachedPointSymbolizer>{

    public DefaultPointSymbolizerRenderer(CachedPointSymbolizer symbol, RenderingContext2D context){
        super(symbol,context);
    }

    /**
     * {@inheritDoc }
     */
    @Override
    public void portray(ProjectedFeature projectedFeature) throws PortrayalException{

        final Feature feature = projectedFeature.getFeature();

        //test if the symbol is visible on this feature
        if(!symbol.isVisible(feature)) return;

        final ProjectedGeometry projectedGeometry = projectedFeature.getGeometry(geomPropertyName);

        //symbolizer doesnt match the featuretype, no geometry found with this name.
        if(projectedGeometry == null) return;

        g2d.setComposite(GO2Utilities.ALPHA_COMPOSITE_1F);

        //we switch to  more appropriate context CRS for rendering ---------
        // a point symbolis always paint in display unit -------------------
        renderingContext.switchToDisplayCRS();

        //we adjust coefficient for rendering ------------------------------
        float coeff;
        if(symbolUnit.equals(NonSI.PIXEL)){
            //symbol is in display unit
            coeff = 1;
        }else{
            //we have a special unit we must adjust the coefficient
            coeff = renderingContext.getUnitCoefficient(symbolUnit);
            // calculate scale difference between objective and display
            final AffineTransform inverse = renderingContext.getObjectiveToDisplay();
            coeff *= Math.abs(XAffineTransform.getScale(inverse));
        }

        //create the image--------------------------------------------------
        final BufferedImage img = symbol.getImage(feature,coeff,hints);

        if(img == null) throw new PortrayalException("A null image has been generated by a point symbol.");

        final float[] disps = new float[2];
        final float[] anchor = new float[2];
        symbol.getDisplacement(feature,disps);
        symbol.getAnchor(feature,anchor);
        disps[0] *= coeff ;
        disps[1] *= coeff ;

        final Geometry geom;
        try {
            geom = projectedGeometry.getDisplayGeometryJTS();
        } catch (TransformException ex) {
            throw new PortrayalException("Could not calculate display projected geometry",ex);
        }

        if(geom instanceof Point || geom instanceof MultiPoint){

            //TODO use generalisation on multipoints

            final Coordinate[] coords = geom.getCoordinates();
            for(int i=0, n = coords.length; i<n ; i++){
                final Coordinate coord = coords[i];
                final int x = (int) (-img.getWidth()*anchor[0] + coord.x + disps[0]);
                final int y = (int) (-img.getHeight()*anchor[1] + coord.y - disps[1]);
                g2d.drawImage(img, x, y, null);
            }

        }else{

            final Point pt2d = geom.getCentroid();
            if(pt2d == null){
                //no geometry
                return;
            }

            final int x = (int) (-img.getWidth()*anchor[0] + pt2d.getX() + disps[0]);
            final int y = (int) (-img.getHeight()*anchor[1] + pt2d.getY() - disps[1]);
            g2d.drawImage(img, x, y, null);
        }

    }

    @Override
    public void portray(Iterator<ProjectedFeature> graphics) throws PortrayalException {

        g2d.setComposite(GO2Utilities.ALPHA_COMPOSITE_1F);

        //we switch to  more appropriate context CRS for rendering ---------
        // a point symbolis always paint in display unit -------------------
        renderingContext.switchToDisplayCRS();
        //we adjust coefficient for rendering ------------------------------
        float coeff;
        if(symbolUnit.equals(NonSI.PIXEL)){
            //symbol is in display unit
            coeff = 1;
        }else{
            //we have a special unit we must adjust the coefficient
            coeff = renderingContext.getUnitCoefficient(symbolUnit);
            // calculate scale difference between objective and display
            final AffineTransform inverse = renderingContext.getObjectiveToDisplay();
            coeff *= Math.abs(XAffineTransform.getScale(inverse));
        }

        //caches
        ProjectedFeature projectedFeature;
        Feature feature;
        final float[] disps = new float[2];
        final float[] anchor = new float[2];
        final AffineTransform imgTrs = new AffineTransform();


        while(graphics.hasNext()){
            if(monitor.stopRequested()) return;

            projectedFeature = graphics.next();
            feature = projectedFeature.getFeature();

            //test if the symbol is visible on this feature
            if(!symbol.isVisible(feature)) return;

            final ProjectedGeometry projectedGeometry = projectedFeature.getGeometry(geomPropertyName);

            //symbolizer doesnt match the featuretype, no geometry found with this name.
            if(projectedGeometry == null) return;

            //create the image--------------------------------------------------
            final BufferedImage img = symbol.getImage(feature,coeff,hints);

            if(img == null) throw new PortrayalException("A null image has been generated by a Mark symbol.");

            symbol.getDisplacement(feature,disps);
            symbol.getAnchor(feature,anchor);
            disps[0] *= coeff ;
            disps[1] *= coeff ;

            final Geometry geom;
            try {
                geom = projectedGeometry.getDisplayGeometryJTS();
            } catch (TransformException ex) {
                throw new PortrayalException("Could not calculate display projected geometry",ex);
            }

            if(geom instanceof Point || geom instanceof MultiPoint){

                //TODO use generalisation on multipoints

                final Coordinate[] coords = geom.getCoordinates();
                for(int i=0, n = coords.length; i<n ; i++){
                    final Coordinate coord = coords[i];
                    imgTrs.setToTranslation(
                            -img.getWidth()*anchor[0] + coord.x + disps[0], 
                            -img.getHeight()*anchor[1] + coord.y - disps[1]);
                    g2d.drawRenderedImage(img, imgTrs);
                }

            }else{

                final Point pt2d = geom.getCentroid();
                if(pt2d == null){
                    //no geometry
                    return;
                }
                imgTrs.setToTranslation(
                            -img.getWidth()*anchor[0] + pt2d.getX() + disps[0], 
                            -img.getHeight()*anchor[1] + pt2d.getY() - disps[1]);
                g2d.drawRenderedImage(img, imgTrs);
            }
        }

    }

    /**
     * {@inheritDoc }
     */
    @Override
    public void portray(final ProjectedCoverage graphic) throws PortrayalException{
        //nothing to portray
    }

    /**
     * {@inheritDoc }
     */
    @Override
    public boolean hit(final ProjectedFeature projectedFeature, final SearchAreaJ2D search, final VisitFilter filter) {

        //TODO optimize test using JTS geometries, Java2D Area cost to much cpu

        final Shape mask = search.getDisplayShape();

        final Feature feature = projectedFeature.getFeature();

        //test if the symbol is visible on this feature
        if(!(symbol.isVisible(feature))) return false;

        final ProjectedGeometry projectedGeometry = projectedFeature.getGeometry(geomPropertyName);

        //symbolizer doesnt match the featuretype, no geometry found with this name.
        if(projectedGeometry == null) return false;

        //we adjust coefficient for rendering ----------------------------------
        float coeff = 1;
        if(symbolUnit.equals(NonSI.PIXEL)){
            //symbol is in display unit
            coeff = 1;
        }else{
            //we have a special unit we must adjust the coefficient
            coeff = renderingContext.getUnitCoefficient(symbolUnit);
            // calculate scale difference between objective and display
            final AffineTransform inverse = renderingContext.getObjectiveToDisplay();
            coeff *= Math.abs(XAffineTransform.getScale(inverse));
        }

        //create the image------------------------------------------------------
        final BufferedImage img = symbol.getImage(feature,coeff,null);
        final float[] disps = new float[2];
        symbol.getDisplacement(feature,disps);
        disps[0] *= coeff ;
        disps[1] *= coeff ;

        final float[] anchor = new float[2];
        symbol.getAnchor(feature,anchor);

        final Geometry geom;
        try {
            geom = projectedGeometry.getDisplayGeometryJTS();
        } catch (TransformException ex) {
            ex.printStackTrace();
            return false;
        }

        if(geom instanceof Point || geom instanceof MultiPoint){

            //TODO use generalisation on multipoints

            final Coordinate[] coords = geom.getCoordinates();
            for(int i=0, n = coords.length; i<n ; i++){
                final Coordinate coord = coords[i];
                final int x = (int) (-img.getWidth()*anchor[0] + coord.x + disps[0]);
                final int y = (int) (-img.getHeight()*anchor[1] + coord.y - disps[1]);

                switch(filter){
                    case INTERSECTS :
                        if(mask.intersects(x,y,img.getWidth(),img.getHeight())){
                            //TODO should make a better test for the alpha pixel values in image
                            return true;
                        }
                        break;
                    case WITHIN :
                        if(mask.contains(x,y,img.getWidth(),img.getHeight())){
                            //TODO should make a better test for the alpha pixel values in image
                            return true;
                        }
                        break;
                }

            }

        }else{
            Point pt2d = geom.getCentroid();

            final int x = (int) (-img.getWidth()*anchor[0] + pt2d.getX() + disps[0]);
            final int y = (int) (-img.getHeight()*anchor[1] + pt2d.getY() - disps[1]);

            switch(filter){
                case INTERSECTS :
                    if(mask.intersects(x,y,img.getWidth(),img.getHeight())){
                        //TODO should make a better test for the alpha pixel values in image
                        return true;
                    }
                    break;
                case WITHIN :
                    if(mask.contains(x,y,img.getWidth(),img.getHeight())){
                        //TODO should make a better test for the alpha pixel values in image
                        return true;
                    }
                    break;
            }

        }

        return false;
    }

    /**
     * {@inheritDoc }
     */
    @Override
    public boolean hit(ProjectedCoverage graphic, SearchAreaJ2D mask, VisitFilter filter) {
        return false;
    }

}
