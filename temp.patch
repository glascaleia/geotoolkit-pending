diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/pom.xml
--- a/modules/datastore/geotk-kml/pom.xml	Tue May 04 16:03:03 2010 +0200
+++ b/modules/datastore/geotk-kml/pom.xml	Tue May 25 17:24:13 2010 +0200
@@ -59,6 +59,11 @@
             <artifactId>geotk-utility-pending</artifactId>
             <version>${project.version}</version>
         </dependency>
+        <dependency>
+            <groupId>org.geotoolkit.pending</groupId>
+            <artifactId>geotk-jaxp-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
 
         <dependency>
             <groupId>org.geotoolkit.project</groupId>
@@ -75,13 +80,21 @@
         <dependency>
             <groupId>postgresql</groupId>
             <artifactId>postgresql</artifactId>
+            <version>8.4-701.jdbc4</version>
             <scope>test</scope>
         </dependency>
         <dependency>
             <groupId>org.apache.derby</groupId>
             <artifactId>derby</artifactId>
+            <version>10.5.3.0_1</version>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <artifactId>wstx-asl</artifactId>
+            <groupId>org.codehaus.woodstox</groupId>
+            <type>jar</type>
+            <version>3.2.1</version>
+        </dependency>
     </dependencies>
 
 
@@ -101,3 +114,4 @@
         </plugins>
     </build>
 </project>
+
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/App.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/App.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,134 @@
+/*
+ * To change this template, choose Tools | Templates
+ * and open the template in the editor.
+ */
+
+package org.geotoolkit.data.kml;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.LinkedList;
+import java.util.List;
+import org.geotoolkit.data.model.KmlFactory;
+import org.geotoolkit.data.model.KmlFactoryDefault;
+import org.geotoolkit.data.model.kml.AbstractFeature;
+import org.geotoolkit.data.model.kml.AbstractGeometry;
+import org.geotoolkit.data.model.kml.Coordinate;
+import org.geotoolkit.data.model.kml.Coordinates;
+import org.geotoolkit.data.model.kml.ExtendedData;
+import org.geotoolkit.data.model.kml.IdAttributes;
+import org.geotoolkit.data.model.kml.Kml;
+import org.geotoolkit.data.model.kml.Region;
+import org.geotoolkit.feature.DefaultComplexAttribute;
+import org.geotoolkit.feature.DefaultFeature;
+import org.geotoolkit.feature.DefaultName;
+import org.geotoolkit.feature.DefaultProperty;
+import org.geotoolkit.feature.FeatureTypeBuilder;
+import org.geotoolkit.filter.identity.DefaultFeatureId;
+import org.geotoolkit.util.StringUtilities;
+import org.geotoolkit.util.Strings;
+import org.geotoolkit.util.XInteger;
+import org.opengis.feature.ComplexAttribute;
+import org.opengis.feature.Feature;
+import org.opengis.feature.Property;
+import org.opengis.feature.type.AttributeDescriptor;
+import org.opengis.feature.type.ComplexType;
+import org.opengis.feature.type.FeatureType;
+import org.opengis.feature.type.FeatureTypeFactory;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class App {
+
+    public static void featuresTests(){
+        final FeatureTypeBuilder ftb = new FeatureTypeBuilder();
+        final FeatureTypeFactory ftf = ftb.getFeatureTypeFactory();
+
+
+        ftb.setName("Address");
+        ftb.add("rue", String.class);
+        ftb.add("ville", String.class);
+        ComplexType adressType = ftb.buildType();
+        AttributeDescriptor descAdress = ftf.createAttributeDescriptor(adressType, adressType.getName(), 1, 1, true, null);
+        System.out.println(adressType);
+
+        final Collection<Property> properties = new ArrayList<Property>();
+        properties.add(new DefaultProperty("rue jean moulin", adressType.getDescriptor("rue")));
+        properties.add(new DefaultProperty("montmartre", adressType.getDescriptor("ville")));
+        ComplexAttribute adress1 = new DefaultComplexAttribute(properties,  descAdress, new DefaultFeatureId("RR"));
+
+
+
+
+
+        ftb.reset();
+        ftb.setName("Personne");
+        ftb.add("nom", String.class);
+        ftb.add("age", Integer.class);
+        ftb.add(adressType,new DefaultName(null,  "adress"),null,0,Integer.MAX_VALUE,true,null);
+        FeatureType ft = ftb.buildFeatureType();
+        System.out.println(ft);
+
+
+        properties.clear();
+        properties.add(new DefaultProperty("robert", ft.getDescriptor("nom")));
+        properties.add(new DefaultProperty(23, ft.getDescriptor("age")));
+        properties.add(new DefaultProperty(adress1, ft.getDescriptor("adress")));
+        properties.add(new DefaultProperty(adress1, ft.getDescriptor("adress")));
+
+        Feature person1 = DefaultFeature.create(properties, ft, new DefaultFeatureId("1"));
+
+        System.out.println(person1);
+    }
+
+    public static Kml buildKml(){
+        KmlFactory kmlFactory = new KmlFactoryDefault();
+        boolean visibility = true;
+        boolean extrude = true;
+        boolean open = true;
+        String name = "This is a name";
+        String description = "This is a description";
+        String address = "This is an address";
+        String snippet = "This is a snippet";
+        String phoneNumber = "This is a phone number";
+        Region region = null;
+        ExtendedData extendedData = null;
+
+        
+        //kmlFactory.
+        IdAttributes idAttributes = kmlFactory.createIdAttributes("di", "ditarget");
+        List<Coordinate> coordinatesList = new LinkedList<Coordinate>();
+        Coordinate coordinate1 = kmlFactory.createCoordinate(0.1,0.2,0.3);
+        Coordinate coordinate2 = kmlFactory.createCoordinate(0.4,0.55,0.6);
+        coordinatesList.add(coordinate1);
+        coordinatesList.add(coordinate2);
+        Coordinates coordinates = kmlFactory.createCoordinates(coordinatesList);
+        AbstractGeometry point = kmlFactory.createPoint(null, idAttributes, null, null, extrude, null, coordinates, null, null);
+        AbstractFeature placeMark = kmlFactory.createPlacemark(null, idAttributes,"Placemark name", visibility, open, null, null, "Placemark address", null, "Placemark phone number", "Placemark snippet", "Placemark description", null, null, null, null, region, extendedData, null, null, point, null, null);
+        return kmlFactory.createKml(null, placeMark, null, null);
+    }
+
+    public static void main(String[] args) {
+
+        
+        //featuresTests();
+        
+        File input = new File("/home/samuel/netbeans/geotoolkit-kml/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/" +
+                "input3.xml");
+        File output = new File("/home/samuel/netbeans/geotoolkit-kml/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/" +
+                "output2.xml");
+        KmlReader reader = new KmlReader(input);
+        Kml kml = reader.read();
+        //System.out.println(kml);
+
+        KmlWriter writer = new KmlWriter(output);
+        writer.write(kml);
+
+
+    }
+
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/KmlReader.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/KmlReader.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,3143 @@
+package org.geotoolkit.data.kml;
+
+import com.ctc.wstx.stax.WstxInputFactory;
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLReporter;
+import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+import org.geotoolkit.data.model.KmlFactory;
+import org.geotoolkit.data.model.KmlFactoryDefault;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.kml.AbstractContainer;
+import org.geotoolkit.data.model.kml.AbstractFeature;
+import org.geotoolkit.data.model.kml.AbstractGeometry;
+import org.geotoolkit.data.model.kml.AbstractObject;
+import org.geotoolkit.data.model.kml.AbstractOverlay;
+import org.geotoolkit.data.model.kml.AbstractStyleSelector;
+import org.geotoolkit.data.model.kml.AbstractTimePrimitive;
+import org.geotoolkit.data.model.kml.AbstractView;
+import org.geotoolkit.data.model.kml.Alias;
+import org.geotoolkit.data.model.kml.AltitudeMode;
+import org.geotoolkit.data.model.kml.Angle180;
+import org.geotoolkit.data.model.kml.Angle360;
+import org.geotoolkit.data.model.kml.Angle90;
+import org.geotoolkit.data.model.kml.Anglepos180;
+import org.geotoolkit.data.model.kml.BalloonStyle;
+import org.geotoolkit.data.model.kml.BasicLink;
+import org.geotoolkit.data.model.kml.Boundary;
+import org.geotoolkit.data.model.kml.Camera;
+import org.geotoolkit.data.model.kml.Color;
+import org.geotoolkit.data.model.kml.ColorMode;
+import org.geotoolkit.data.model.kml.Coordinate;
+import org.geotoolkit.data.model.kml.Coordinates;
+import org.geotoolkit.data.model.kml.Data;
+import org.geotoolkit.data.model.kml.DisplayMode;
+import org.geotoolkit.data.model.kml.Document;
+import org.geotoolkit.data.model.kml.ExtendedData;
+import org.geotoolkit.data.model.kml.Folder;
+import org.geotoolkit.data.model.kml.GroundOverlay;
+import org.geotoolkit.data.model.kml.IconStyle;
+import org.geotoolkit.data.model.kml.IdAttributes;
+import org.geotoolkit.data.model.kml.ItemIcon;
+import org.geotoolkit.data.model.kml.ItemIconState;
+import org.geotoolkit.data.model.kml.Kml;
+import org.geotoolkit.data.model.kml.KmlException;
+import org.geotoolkit.data.model.kml.LabelStyle;
+import org.geotoolkit.data.model.kml.LatLonAltBox;
+import org.geotoolkit.data.model.kml.LatLonBox;
+import org.geotoolkit.data.model.kml.LineString;
+import org.geotoolkit.data.model.kml.LineStyle;
+import org.geotoolkit.data.model.kml.LinearRing;
+import org.geotoolkit.data.model.kml.Link;
+import org.geotoolkit.data.model.kml.ListItem;
+import org.geotoolkit.data.model.kml.ListStyle;
+import org.geotoolkit.data.model.kml.Location;
+import org.geotoolkit.data.model.kml.Lod;
+import org.geotoolkit.data.model.kml.LookAt;
+import org.geotoolkit.data.model.kml.Model;
+import org.geotoolkit.data.model.kml.MultiGeometry;
+import org.geotoolkit.data.model.kml.NetworkLink;
+import org.geotoolkit.data.model.kml.NetworkLinkControl;
+import org.geotoolkit.data.model.kml.Orientation;
+import org.geotoolkit.data.model.kml.Pair;
+import org.geotoolkit.data.model.kml.PhotoOverlay;
+import org.geotoolkit.data.model.kml.Placemark;
+import org.geotoolkit.data.model.kml.Point;
+import org.geotoolkit.data.model.kml.PolyStyle;
+import org.geotoolkit.data.model.kml.Polygon;
+import org.geotoolkit.data.model.kml.RefreshMode;
+import org.geotoolkit.data.model.kml.Region;
+import org.geotoolkit.data.model.kml.ResourceMap;
+import org.geotoolkit.data.model.kml.Scale;
+import org.geotoolkit.data.model.kml.Schema;
+import org.geotoolkit.data.model.kml.SchemaData;
+import org.geotoolkit.data.model.kml.ScreenOverlay;
+import org.geotoolkit.data.model.kml.SimpleData;
+import org.geotoolkit.data.model.kml.SimpleField;
+import org.geotoolkit.data.model.kml.Style;
+import org.geotoolkit.data.model.kml.StyleMap;
+import org.geotoolkit.data.model.kml.StyleState;
+import org.geotoolkit.data.model.kml.TimeSpan;
+import org.geotoolkit.data.model.kml.TimeStamp;
+import org.geotoolkit.data.model.kml.Units;
+import org.geotoolkit.data.model.kml.Vec2;
+import org.geotoolkit.data.model.kml.ViewRefreshMode;
+import org.geotoolkit.data.model.xal.AddressDetails;
+import org.geotoolkit.data.model.xsd.SimpleType;
+import org.geotoolkit.xml.StaxStreamReader;
+import static org.geotoolkit.data.model.ModelConstants.*;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class KmlReader extends StaxStreamReader {
+
+    private XMLInputFactory inputFactory;//A SUPPRIMER
+    private Kml root;
+    private KmlFactory kmlFactory;
+
+    
+    public static final double DEF_ALTITUDE = 0.0;
+    public static final AltitudeMode DEF_ALTITUDE_MODE = AltitudeMode.CLAMP_TO_GROUND;
+    public static Color DEF_BG_COLOR;
+    public static Color DEF_COLOR;
+    public static final ColorMode DEF_COLOR_MODE = ColorMode.NORMAL;
+    public static final DisplayMode DEF_DISPLAY_MODE = DisplayMode.DEFAULT;
+    public static final int DEF_DRAW_ORDER = 0;
+    public static Angle180 DEF_EAST;
+    public static final boolean DEF_EXTRUDE = false;
+    public static final boolean DEF_FILL = true;
+    public static Angle360 DEF_HEADING;
+    public static Angle90 DEF_LATITUDE;
+    public static final ListItem DEF_LIST_ITEM = ListItem.CHECK;
+    public static Angle180 DEF_LONGITUDE;
+    public static final double DEF_MAX_ALTITUDE = 0.0;
+    public static final double DEF_MAX_FADE_EXTENT = 0.0;
+    public static final double DEF_MAX_LOD_PIXELS = -1.0;
+    public static final int DEF_MAX_SNIPPET_LINES = 2;
+    public static final double DEF_MIN_ALTITUDE = 0.0;
+    public static final double DEF_MIN_FADE_EXTENT = 0.0;
+    public static final double DEF_MIN_LOD_PIXELS = 0.0;
+    public static Angle180 DEF_NORTH;
+    public static final boolean DEF_OPEN = false;
+    public static final boolean DEF_OUTLINE = true;
+    public static final double DEF_RANGE = 0.0;
+    public static final RefreshMode DEF_REFRESH_MODE = RefreshMode.ON_CHANGE;
+    public static final double DEF_REFRESH_INTERVAL = 4.0;
+    public static Angle180 DEF_ROLL;
+    public static Angle180 DEF_ROTATION;
+    public static final double DEF_SCALE = 1.0;
+    public static Angle180 DEF_SOUTH;
+    public static final StyleState DEF_STYLE_STATE = StyleState.NORMAL;
+    public static final boolean DEF_TESSELLATE = false;
+    public static Anglepos180 DEF_TILT;
+    public static Color DEF_TEXT_COLOR;
+    public static final double DEF_VIEW_BOUND_SCALE = 1.0;
+    public static final ViewRefreshMode DEF_VIEW_REFRESH_MODE = ViewRefreshMode.NEVER;
+    public static final double DEF_VIEW_REFRESH_TIME = 4.0;
+    public static final boolean DEF_VISIBILITY = true;
+    public static Angle180 DEF_WEST;
+    public static final double DEF_WIDTH = 1.0;
+    public static final double DEF_X = 1.0;
+    public static final double DEF_Y = 1.0;
+    public static final double DEF_Z = 1.0;
+
+    public KmlReader(File file) {
+        super();
+        this.initSource(file);
+        try {
+            this.initDefaults();
+        } catch (KmlException ex) {
+            Logger.getLogger(KmlReader.class.getName()).log(Level.SEVERE, null, ex);
+        }
+    }
+
+    private void initSource(Object o) {
+        // Choice of the StAX implementation of Java 6 interface
+        System.setProperty("javax.xml.stream.XMLInputFactory", "com.ctc.wstx.stax.WstxInputFactory");
+        System.setProperty("javax.xml.stream.XMLEventFactory", "com.ctc.wstx.stax.WstxEventFactory");
+
+        // Factories
+        //XMLInputFactory factory = new WstxInputFactory();// Implementation explicitly named
+        this.inputFactory = XMLInputFactory.newInstance();// Transparent implementation based on the previous choice.
+        //this.inputFactory = new WstxInputFactory();
+        inputFactory.setProperty(XMLInputFactory.IS_COALESCING, Boolean.FALSE);
+        inputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);
+        inputFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, Boolean.TRUE);
+        inputFactory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, Boolean.FALSE);
+        inputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);
+        inputFactory.setProperty(XMLInputFactory.IS_VALIDATING, Boolean.FALSE);
+        ((WstxInputFactory) inputFactory).configureForSpeed();
+
+        if (this.inputFactory.isPropertySupported("javax.xml.stream.isValidating")) {
+            this.inputFactory.setProperty("javax.xml.stream.isValidating", Boolean.TRUE);
+//            System.out.println("Validation active : " + this.inputFactory.getProperty("javax.xml.stream.isValidating"));
+        }
+
+        // Errors displaying
+        this.inputFactory.setXMLReporter(new XMLReporter() {
+
+            public void report(String message, String typeErreur, Object source, javax.xml.stream.Location location) throws XMLStreamException {
+//                System.out.println("Erreur de type : " + typeErreur + ", message : " + message);
+            }
+        });
+
+        try {
+            this.setInput(o);
+        } catch (IOException ex) {
+            Logger.getLogger(KmlReader.class.getName()).log(Level.SEVERE, null, ex);
+        } catch (XMLStreamException ex) {
+            Logger.getLogger(KmlReader.class.getName()).log(Level.SEVERE, null, ex);
+        }
+        this.kmlFactory = new KmlFactoryDefault();
+    }
+
+    private void initDefaults() throws KmlException {
+        DEF_BG_COLOR = this.kmlFactory.createColor("ffffffff");
+        DEF_COLOR = this.kmlFactory.createColor("ffffffff");
+        DEF_EAST = this.kmlFactory.createAngle180(180.0);
+        DEF_HEADING = this.kmlFactory.createAngle360(0.0);
+        DEF_LATITUDE = this.kmlFactory.createAngle90(0.0);
+        DEF_LONGITUDE = this.kmlFactory.createAngle180(0.0);
+        DEF_NORTH = this.kmlFactory.createAngle180(180.0);
+        DEF_ROLL = this.kmlFactory.createAngle180(0.0);
+        DEF_ROTATION = this.kmlFactory.createAngle180(0.0);
+        DEF_SOUTH = this.kmlFactory.createAngle180(-180.0);
+        DEF_TEXT_COLOR = this.kmlFactory.createColor("ff000000");
+        DEF_TILT = this.kmlFactory.createAnglepos180(0.0);
+        DEF_WEST = this.kmlFactory.createAngle180(-180.0);
+    }
+
+    public Kml read() {
+
+        try {
+
+            while (reader.hasNext()) {
+
+                switch (reader.next()) {
+
+                    case XMLStreamConstants.START_ELEMENT:
+                        final String eName = reader.getLocalName();
+                        final String eUri = reader.getNamespaceURI();
+
+                        if (URI_KML.equals(eUri)) {
+                            if (TAG_KML.equals(eName)) {
+                                this.root = this.readKml();
+                            }
+                        }
+                        break;
+                }
+            }
+        } catch (XMLStreamException ex) {
+            Logger.getLogger(KmlReader.class.getName()).log(Level.SEVERE, null, ex);
+        } catch (KmlException ex) {
+            System.out.println("KML EXCEPTION : " + ex.getMessage());
+        }
+        return this.root;
+    }
+
+    private Kml readKml() throws XMLStreamException, KmlException {
+        NetworkLinkControl networkLinkControl = null;
+        AbstractFeature abstractFeature = null;
+        List<SimpleType> kmlSimpleExtensions = null;
+        List<AbstractObject> kmlObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_NETWORK_LINK_CONTROL.equals(eName)) {
+                            networkLinkControl = this.readNetworkLinkControl();
+                        } else if (isAbstractFeature(eName)) {
+                            abstractFeature = this.readAbstractFeature(eName);
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_KML.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createKml(networkLinkControl, abstractFeature, kmlSimpleExtensions, kmlObjectExtensions);
+    }
+
+    private Placemark readPlacemark() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractFeature
+        String name = null;
+        boolean visibility = DEF_VISIBILITY;
+        boolean open = DEF_OPEN;
+        AtomPersonConstruct author = null;
+        AtomLink link = null;
+        String address = null;
+        AddressDetails addressDetails = null;
+        String phoneNumber = null;
+        String snippet = null;
+        String description = null;
+        AbstractView view = null;
+        AbstractTimePrimitive timePrimitive = null;
+        String styleUrl = null;
+        List<AbstractStyleSelector> styleSelector = new ArrayList<AbstractStyleSelector>();
+        Region region = null;
+        ExtendedData extendedData = null;
+        List<SimpleType> featureSimpleExtensions = null;
+        List<AbstractObject> featureObjectExtensions = null;
+
+        // Placemark
+        AbstractGeometry abstractGeometry = null;
+        List<SimpleType> placemarkSimpleExtensions = null;
+        List<AbstractObject> placemarkObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_NAME.equals(eName)) {
+                            name = reader.getElementText();
+                        } else if (TAG_VISIBILITY.equals(eName)) {
+                            visibility = parseBoolean(reader.getElementText());
+                        } else if (TAG_OPEN.equals(eName)) {
+                            open = parseBoolean(reader.getElementText());
+                        } else if (TAG_ADDRESS.equals(eName)) {
+                            address = reader.getElementText();
+                        } else if (TAG_PHONE_NUMBER.equals(eName)) {
+                            phoneNumber = reader.getElementText();
+                        } else if (TAG_SNIPPET.equals(eName)) {
+                            snippet = reader.getElementText();
+                        } else if (TAG_DESCRIPTION.equals(eName)) {
+                            description = reader.getElementText();
+                        } else if (TAG_STYLE_URL.equals(eName)) {
+                            styleUrl = reader.getElementText();
+                        } else if (isAbstractView(eName)) {
+                            view = this.readAbstractView(eName);
+                        } else if (isAbstractTimePrimitive(eName)) {
+                            timePrimitive = this.readAbstractTimePrimitive(eName);
+                        } else if (TAG_STYLE_URL.equals(eName)) {
+                            styleUrl = reader.getElementText();
+                        } else if (isAbstractStyleSelector(eName)) {
+                            styleSelector.add(this.readAbstractStyleSelector(eName));
+                        } else if (TAG_REGION.equals(eName)) {
+                            region = this.readRegion();
+                        } else if (TAG_EXTENDED_DATA.equals(eName)) {
+                            extendedData = this.readExtendedData();
+                        }
+
+                        // PLACEMARK
+                        else if (isAbstractGeometry(eName)) {
+                            abstractGeometry = this.readAbstractGeometry(eName);
+                        }
+
+
+                    } else if (URI_ATOM.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_ATOM_PERSON_CONSTRUCT.equals(eName)) {
+                            author = this.readAtomPersonConstruct();
+                        } else if (TAG_ATOM_LINK.equals(eName)) {
+                            link = this.readAtomLink();
+                        }
+                    }
+                    if (URI_XAL.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_XAL_ADDRESS_DETAILS.equals(eName)) {
+                            addressDetails = this.readXalAddressDetails();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_PLACEMARK.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createPlacemark(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link, address, addressDetails, phoneNumber, snippet, description, view, timePrimitive, styleUrl,
+                styleSelector, region, extendedData, featureSimpleExtensions, featureObjectExtensions,
+                abstractGeometry, placemarkSimpleExtensions, placemarkObjectExtensions);
+    }
+
+    private Region readRegion() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // Region
+        LatLonAltBox latLonAltBox = null;
+        Lod lod = null;
+        List<SimpleType> regionSimpleExtensions = null;
+        List<AbstractObject> regionObjectExtentions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // REGION
+                        if (TAG_LAT_LON_ALT_BOX.equals(eName)) {
+                            latLonAltBox = this.readLatLonAltBox();
+                        } else if (TAG_LOD.equals(eName)) {
+                            lod = this.readLod();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_REGION.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createRegion(objectSimpleExtensions, idAttributes,
+                latLonAltBox, lod, regionSimpleExtensions, regionObjectExtentions);
+    }
+
+    private Lod readLod() throws XMLStreamException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // Lod
+        double minLodPixels = DEF_MIN_LOD_PIXELS;
+        double maxLodPixels = DEF_MAX_LOD_PIXELS;
+        double minFadeExtent = DEF_MIN_FADE_EXTENT;
+        double maxFadeExtent = DEF_MAX_FADE_EXTENT;
+        List<SimpleType> lodSimpleExtentions = null;
+        List<AbstractObject> lodObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // REGION
+                        if (TAG_MIN_LOD_PIXELS.equals(eName)) {
+                            minLodPixels = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_MAX_LOD_PIXELS.equals(eName)) {
+                            maxLodPixels = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_MIN_FADE_EXTENT.equals(eName)) {
+                            minFadeExtent = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_MAX_FADE_EXTENT.equals(eName)) {
+                            maxFadeExtent = Double.parseDouble(reader.getElementText());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_LOD.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createLod(objectSimpleExtensions, idAttributes,
+                minLodPixels, maxLodPixels, minFadeExtent, maxFadeExtent, lodSimpleExtentions, lodObjectExtensions);
+    }
+
+    private ExtendedData readExtendedData() throws XMLStreamException {
+        List<Data> datas = new ArrayList<Data>();
+        List<SchemaData> schemaDatas = new ArrayList<SchemaData>();
+        List<Object> anyOtherElements = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // EXTENDED DATA
+                        if (TAG_DATA.equals(eName)) {
+                            datas.add(this.readData());
+                        } else if (TAG_SCHEMA_DATA.equals(eName)) {
+                            schemaDatas.add(this.readSchemaData());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_EXTENDED_DATA.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+        
+        return this.kmlFactory.createExtendedData(datas, schemaDatas, anyOtherElements);
+    }
+
+    private Data readData() throws XMLStreamException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // Data
+        String displayName = null;
+        String value = null;
+        List<Object> dataExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // REGION
+                        if (TAG_DISPLAY_NAME.equals(eName)) {
+                            displayName = reader.getElementText();
+                        } else if (TAG_VALUE.equals(eName)) {
+                            value = reader.getElementText();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_DATA.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createData(objectSimpleExtensions, idAttributes, displayName, value, dataExtensions);
+    }
+
+    private SchemaData readSchemaData() throws XMLStreamException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // Data
+        List<SimpleData> simpleDatas = new ArrayList<SimpleData>();
+        List<Object> schemaDataExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // SCHEMA DATA
+                        if (TAG_SIMPLE_DATA.equals(eName)) {
+                            simpleDatas.add(this.readSimpleData());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_SCHEMA_DATA.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createSchemaData(objectSimpleExtensions, idAttributes, simpleDatas, schemaDataExtensions);
+    }
+
+    private SimpleData readSimpleData() throws XMLStreamException {
+        return this.kmlFactory.createSimpleData(reader.getAttributeValue(null, ATT_NAME), reader.getElementText());
+    }
+
+    private NetworkLinkControl readNetworkLinkControl() {
+        NetworkLinkControl resultat = null;
+        return resultat;
+    }
+
+    private AbstractGeometry readAbstractGeometry(String eName) throws XMLStreamException, KmlException {
+        AbstractGeometry resultat = null;
+        if (TAG_MULTI_GEOMETRY.equals(eName)) {
+            resultat = readMultiGeometry();
+        }
+        if (TAG_LINE_STRING.equals(eName)) {
+            resultat = readLineString();
+        }
+        if (TAG_POLYGON.equals(eName)) {
+            resultat = readPolygon();
+        }
+        if (TAG_POINT.equals(eName)) {
+            resultat = readPoint();
+        }
+        if (TAG_LINEAR_RING.equals(eName)) {
+            resultat = readLinearRing();
+        }
+        if (TAG_MODEL.equals(eName)) {
+            resultat = readModel();
+        }
+        return resultat;
+    }
+
+    private Polygon readPolygon() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractGeometry
+        List<SimpleType> abstractGeometrySimpleExtensions = null;
+        List<AbstractObject> abstractGeometryObjectExtensions = null;
+
+        // Polygon
+        boolean extrude = DEF_EXTRUDE;
+        boolean tessellate = DEF_TESSELLATE;
+        AltitudeMode altitudeMode = DEF_ALTITUDE_MODE;
+        Boundary outerBoundaryIs = null;
+        List<Boundary> innerBoundariesAre = new ArrayList<Boundary>();
+        List<SimpleType> polygonSimpleExtensions = null;
+        List<AbstractObject> polygonObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // POLYGON
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_EXTRUDE.equals(eName)) {
+                            extrude = parseBoolean(reader.getElementText());
+                        } else if (TAG_TESSELLATE.equals(eName)) {
+                            tessellate = parseBoolean(reader.getElementText());
+                        } else if (TAG_ALTITUDE_MODE.equals(eName)) {
+                            altitudeMode = AltitudeMode.transform(reader.getElementText());
+                        } else if (TAG_OUTER_BOUNDARY_IS.equals(eName)) {
+                            outerBoundaryIs = this.readBoundary();
+                        } else if (TAG_INNER_BOUNDARY_IS.equals(eName)) {
+                            innerBoundariesAre.add(this.readBoundary());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_POLYGON.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createPolygon(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions,
+                extrude, tessellate, altitudeMode, outerBoundaryIs, innerBoundariesAre,
+                polygonSimpleExtensions, polygonObjectExtensions);
+    }
+
+    private Boundary readBoundary() throws XMLStreamException{
+        LinearRing linearRing = null;
+        List<SimpleType> boundarySimpleExtensions = null;
+        List<AbstractObject> boundaryObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // BOUNDARY
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_LINEAR_RING.equals(eName)) {
+                            linearRing = this.readLinearRing();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if ((TAG_OUTER_BOUNDARY_IS.equals(reader.getLocalName()) || TAG_INNER_BOUNDARY_IS.equals(reader.getLocalName()))
+                            && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createBoundary(linearRing, boundarySimpleExtensions, boundaryObjectExtensions);
+    }
+
+    private Model readModel() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractGeometry
+        List<SimpleType> abstractGeometrySimpleExtensions = null;
+        List<AbstractObject> abstractGeometryObjectExtensions = null;
+
+        // Model
+        AltitudeMode altitudeMode = DEF_ALTITUDE_MODE;
+        Location location = null;
+        Orientation orientation = null;
+        Scale scale = null;
+        Link link = null;
+        ResourceMap resourceMap = null;
+        List<SimpleType> modelSimpleExtensions = null;
+        List<AbstractObject> modelObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // MODEL
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_ALTITUDE_MODE.equals(eName)) {
+                            altitudeMode = AltitudeMode.transform(reader.getElementText());
+                        } else if (TAG_LOCATION.equals(eName)) {
+                            location = this.readLocation();
+                        } else if (TAG_ORIENTATION.equals(eName)) {
+                            orientation = this.readOrientation();
+                        } else if (TAG_SCALE.equals(eName)) {
+                            scale = readScale();
+                        } else if (TAG_LINK.equals(eName)) {
+                            link = this.readLink(eName);
+                        } else if (TAG_SCALE.equals(eName)) {
+                            resourceMap = readResourceMap();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_MODEL.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createModel(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions,
+                altitudeMode, location, orientation, scale, link, resourceMap,
+                modelSimpleExtensions, modelObjectExtensions);
+    }
+
+    private ResourceMap readResourceMap() throws XMLStreamException{
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // ResourceMap
+        List<Alias> aliases = new ArrayList<Alias>();
+        List<SimpleType> resourceMapSimpleExtensions = null;
+        List<AbstractObject> resourceMapObjectExtensions = null;
+
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // RESOURCE MAP
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_ALIAS.equals(eName)) {
+                            aliases.add(this.readAlias());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_RESOURCE_MAP.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createResourceMap(objectSimpleExtensions, idAttributes,
+                aliases, resourceMapSimpleExtensions, resourceMapObjectExtensions);
+
+    }
+
+     private Alias readAlias() throws XMLStreamException{
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // Alias
+        String targetHref = null;
+        String sourceHref = null;
+        List<SimpleType> alaisSimpleExtensions = null;
+        List<AbstractObject> aliasObjectExtensions = null;
+
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // ALIAS
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_TARGET_HREF.equals(eName)) {
+                            targetHref = reader.getElementText();
+                        } else if (TAG_SOURCE_HREF.equals(eName)) {
+                            sourceHref = reader.getElementText();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_ALIAS.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createAlias(objectSimpleExtensions, idAttributes,
+                targetHref, sourceHref, alaisSimpleExtensions, aliasObjectExtensions);
+
+    }
+
+    private Scale readScale() throws XMLStreamException{
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // Scale
+        double x = DEF_X;
+        double y = DEF_Y;
+        double z = DEF_Z;
+        List<SimpleType> scaleSimpleExtensions = null;
+        List<AbstractObject> scaleObjectExtensions = null;
+
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // SCALE
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_X.equals(eName)) {
+                            x = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_Y.equals(eName)) {
+                            y = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_Z.equals(eName)){
+                            y = Double.parseDouble(reader.getElementText());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_SCALE.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createScale(objectSimpleExtensions, idAttributes,
+                x, y, z, scaleSimpleExtensions, scaleObjectExtensions);
+        
+    }
+
+    private Location readLocation() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // Location
+        Angle180 longitude = DEF_LONGITUDE;
+        Angle90 latitude = DEF_LATITUDE;
+        double altitude = DEF_ALTITUDE;
+        List<SimpleType> locationSimpleExtensions = null;
+        List<AbstractObject> locationObjectExtensions = null;
+
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // LOCATION
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_LONGITUDE.equals(eName)) {
+                            longitude = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_LATITUDE.equals(eName)) {
+                            latitude = this.kmlFactory.createAngle90(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_ALTITUDE.equals(eName)){
+                            altitude = Double.parseDouble(reader.getElementText());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_LOCATION.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createLocation(objectSimpleExtensions, idAttributes,
+                longitude, latitude, altitude, locationSimpleExtensions, locationObjectExtensions);
+    }
+
+    private Orientation readOrientation() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // Orientation
+        Angle360 heading = DEF_HEADING;
+        Anglepos180 tilt = DEF_TILT;
+        Angle180 roll = DEF_ROLL;
+        List<SimpleType> orientationSimpleExtensions = null;
+        List<AbstractObject> orientationObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // ORIENTATION
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_HEADING.equals(eName)) {
+                            heading = this.kmlFactory.createAngle360(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_TILT.equals(eName)) {
+                            tilt = this.kmlFactory.createAnglepos180(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_ROLL.equals(eName)) {
+                            roll = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_ORIENTATION.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createOrientation(objectSimpleExtensions, idAttributes,
+                heading, tilt, roll, orientationSimpleExtensions, orientationObjectExtensions);
+    }
+
+    private LinearRing readLinearRing() throws XMLStreamException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractGeometry
+        List<SimpleType> abstractGeometrySimpleExtensions = null;
+        List<AbstractObject> abstractGeometryObjectExtensions = null;
+
+        // LinearRing
+        boolean extrude = DEF_EXTRUDE;
+        boolean tessellate = DEF_TESSELLATE;
+        AltitudeMode altitudeMode = DEF_ALTITUDE_MODE;
+        Coordinates coordinates = null;
+        List<SimpleType> linearRingSimpleExtensions = null;
+        List<AbstractObject> linearRingObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // LINEAR RING
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_EXTRUDE.equals(eName)) {
+                            extrude = parseBoolean(reader.getElementText());
+                        } else if (TAG_TESSELLATE.equals(eName)) {
+                            tessellate = parseBoolean(reader.getElementText());
+                        } else if (TAG_ALTITUDE_MODE.equals(eName)) {
+                            altitudeMode = AltitudeMode.transform(reader.getElementText());
+                        } else if (TAG_COORDINATES.equals(eName)) {
+                            coordinates = readCoordinates(reader.getElementText());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_LINEAR_RING.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createLinearRing(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions,
+                extrude, tessellate, altitudeMode, coordinates,
+                linearRingSimpleExtensions, linearRingObjectExtensions);
+    }
+
+    private LineString readLineString() throws XMLStreamException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractGeometry
+        List<SimpleType> abstractGeometrySimpleExtensions = null;
+        List<AbstractObject> abstractGeometryObjectExtensions = null;
+
+        // LineString
+        boolean extrude = DEF_EXTRUDE;
+        boolean tessellate = DEF_TESSELLATE;
+        AltitudeMode altitudeMode = DEF_ALTITUDE_MODE;
+        Coordinates coordinates = null;
+        List<SimpleType> lineStringSimpleExtensions = null;
+        List<AbstractObject> lineStringObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // LINE STRING
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_EXTRUDE.equals(eName)) {
+                            extrude = parseBoolean(reader.getElementText());
+                        } else if (TAG_TESSELLATE.equals(eName)) {
+                            tessellate = parseBoolean(reader.getElementText());
+                        } else if (TAG_ALTITUDE_MODE.equals(eName)) {
+                            altitudeMode = AltitudeMode.transform(reader.getElementText());
+                        } else if (TAG_COORDINATES.equals(eName)) {
+                            coordinates = readCoordinates(reader.getElementText());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_LINE_STRING.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createLineString(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions,
+                extrude, tessellate, altitudeMode, coordinates,
+                lineStringSimpleExtensions, lineStringObjectExtensions);
+    }
+
+    private MultiGeometry readMultiGeometry() throws XMLStreamException, KmlException{
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractGeometry
+        List<SimpleType> abstractGeometrySimpleExtensions = null;
+        List<AbstractObject> abstractGeometryObjectExtensions = null;
+
+        // Multi Geometry
+        List<AbstractGeometry> geometries = new ArrayList<AbstractGeometry>();
+        List<SimpleType> multiGeometrySimpleExtensions = null;
+        List<AbstractObject> multiGeometryObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // MULTI GEOMETRY
+                    if (URI_KML.equals(eUri)) {
+                        if (isAbstractGeometry(eName)) {
+                            geometries.add(this.readAbstractGeometry(eName));
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_MULTI_GEOMETRY.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createMultiGeometry(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions,
+                geometries, multiGeometrySimpleExtensions, multiGeometryObjectExtensions);
+
+    }
+
+    private AbstractFeature readAbstractFeature(String eName) throws XMLStreamException, KmlException {
+        AbstractFeature resultat = null;
+        if (isAbstractContainer(eName)) {
+            resultat = this.readAbstractContainer(eName);
+        } else if (isAbstractOverlay(eName)) {
+            resultat = this.readAbstractOverlay(eName);
+        } else if (TAG_NETWORK_LINK.equals(eName)) {
+            resultat = readNetworkLink();
+        } else if (isAbstractOverlay(eName)) {
+            resultat = readAbstractOverlay(eName);
+        } else if (TAG_PLACEMARK.equals(eName)) {
+            resultat = readPlacemark();
+        }
+        return resultat;
+    }
+
+    /**
+     * Reads an AbstractOverlay
+     * @param eName The Tag name
+     * @return an AbstractOverlay instance
+     * @throws XMLStreamException
+     */
+    private AbstractOverlay readAbstractOverlay(String eName) throws XMLStreamException, KmlException {
+        AbstractOverlay resultat = null;
+        if (TAG_GROUND_OVERLAY.equals(eName)) {
+            resultat = readGroundOverlay();
+        }
+        if (TAG_PHOTO_OVERLAY.equals(eName)) {
+            resultat = readPhotoOverlay();
+        }
+        if (TAG_SCREEN_OVERLAY.equals(eName)) {
+            resultat = readScreenOverlay();
+        }
+        return resultat;
+    }
+
+    private GroundOverlay readGroundOverlay() throws XMLStreamException, KmlException {
+
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractFeature
+        String name = null;
+        boolean visibility = DEF_VISIBILITY;
+        boolean open = DEF_OPEN;
+        AtomPersonConstruct author = null;
+        AtomLink link = null;
+        String address = null;
+        AddressDetails addressDetails = null;
+        String phoneNumber = null;
+        String snippet = null;
+        String description = null;
+        AbstractView view = null;
+        AbstractTimePrimitive timePrimitive = null;
+        String styleUrl = null;
+        List<AbstractStyleSelector> styleSelector = new ArrayList<AbstractStyleSelector>();
+        Region region = null;
+        ExtendedData extendedData = null;
+        List<SimpleType> featureSimpleExtensions = null;
+        List<AbstractObject> featureObjectExtensions = null;
+
+        // AbstractOverlay
+        Color color = DEF_COLOR;
+        int drawOrder = DEF_DRAW_ORDER;
+        Link icon = null;
+        List<SimpleType> abstractOverlaySimpleExtensions = null;
+        List<AbstractObject> abstractOverlayObjectExtensions = null;
+
+        // GroundOverlay
+        double altitude = DEF_ALTITUDE;
+        AltitudeMode altitudeMode = DEF_ALTITUDE_MODE;
+        LatLonBox latLonBox = null;
+        List<SimpleType> groundOverlaySimpleExtensions = null;
+        List<AbstractObject> groundOverlayObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_NAME.equals(eName)) {
+                            name = reader.getElementText();
+                        } else if (TAG_VISIBILITY.equals(eName)) {
+                            visibility = parseBoolean(reader.getElementText());
+                        } else if (TAG_OPEN.equals(eName)) {
+                            open = parseBoolean(reader.getElementText());
+                        } else if (TAG_ADDRESS.equals(eName)) {
+                            address = reader.getElementText();
+                        } else if (TAG_PHONE_NUMBER.equals(eName)) {
+                            phoneNumber = reader.getElementText();
+                        } else if (TAG_SNIPPET.equals(eName)) {
+                            snippet = reader.getElementText();
+                        } else if (TAG_DESCRIPTION.equals(eName)) {
+                            description = reader.getElementText();
+                        } else if (TAG_STYLE_URL.equals(eName)) {
+                            styleUrl = reader.getElementText();
+                        } else if (isAbstractView(eName)) {
+                            view = this.readAbstractView(eName);
+                        } else if (isAbstractTimePrimitive(eName)) {
+                            timePrimitive = this.readAbstractTimePrimitive(eName);
+                        } else if (TAG_STYLE_URL.equals(eName)) {
+                            styleUrl = reader.getElementText();
+                        } else if (isAbstractStyleSelector(eName)) {
+                            styleSelector.add(this.readAbstractStyleSelector(eName));
+                        } else if (TAG_REGION.equals(eName)) {
+                            region = this.readRegion();
+                        } else if (TAG_EXTENDED_DATA.equals(eName)) {
+                            extendedData = this.readExtendedData();
+                        }
+
+                        // ABSTRACT OVERLAY
+                        else if (TAG_COLOR.equals(eName)) {
+                            color = this.kmlFactory.createColor(reader.getElementText());
+                        } else if (TAG_DRAW_ORDER.equals(eName)) {
+                            drawOrder = Integer.parseInt(reader.getElementText());
+                        } else if (TAG_ICON.equals(eName)) {
+                            icon = readLink(eName);
+                        }
+
+                        // GROUND OVERLAY
+                        else if (TAG_ALTITUDE.equals(eName)) {
+                            altitude = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_ALTITUDE_MODE.equals(eName)) {
+                            altitudeMode = AltitudeMode.transform(reader.getElementText());
+                        } else if (TAG_LAT_LON_BOX.equals(eName)) {
+                            latLonBox = this.readLatLonBox();
+                        }
+
+
+                    } else if (URI_ATOM.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_ATOM_PERSON_CONSTRUCT.equals(eName)) {
+                            author = this.readAtomPersonConstruct();
+                        } else if (TAG_ATOM_LINK.equals(eName)) {
+                            link = this.readAtomLink();
+                        }
+                    }
+                    if (URI_XAL.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_XAL_ADDRESS_DETAILS.equals(eName)) {
+                            addressDetails = this.readXalAddressDetails();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_GROUND_OVERLAY.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createGroundOverlay(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link,
+                address, addressDetails, phoneNumber, snippet, description, view, timePrimitive,
+                styleUrl, styleSelector, region, extendedData,
+                featureSimpleExtensions, featureObjectExtensions,
+                color, drawOrder, icon,
+                abstractOverlaySimpleExtensions, abstractOverlayObjectExtensions,
+                altitude, altitudeMode, latLonBox,
+                groundOverlaySimpleExtensions, groundOverlayObjectExtensions);
+    }
+
+    private Link readLink(String stopTag) throws KmlException, XMLStreamException {
+
+        if (stopTag == null) {
+            throw new KmlException("The stop tag cannot be null. "
+                    + "It's probably an <Icon>, <Link> or <Url> tag according to KML 2.2 specification.");
+        }
+
+        // Comme BasicLink
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        String href = null;
+        List<SimpleType> basicLinkSimpleExtensions = null;
+        List<AbstractObject> basicLinkObjectExtensions = null;
+
+        // Sp√©cifique √† Link
+        RefreshMode refreshMode = DEF_REFRESH_MODE;
+        double refreshInterval = DEF_REFRESH_INTERVAL;
+        ViewRefreshMode viewRefreshMode = DEF_VIEW_REFRESH_MODE;
+        double viewRefreshTime = DEF_VIEW_REFRESH_TIME;
+        double viewBoundScale = DEF_VIEW_BOUND_SCALE;
+        String viewFormat = null;
+        String httpQuery = null;
+        List<SimpleType> linkSimpleExtensions = null;
+        List<AbstractObject> linkObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // COMME BASIC LINK
+                        if (TAG_HREF.equals(eName)) {
+                            href = reader.getElementText();
+                        }
+
+                        // SPECIFIQUE A LINK
+                        if (TAG_REFRESH_MODE.equals(eName)) {
+                            refreshMode = RefreshMode.transform(reader.getElementText());
+                        } else if (TAG_REFRESH_INTERVAL.equals(eName)) {
+                            refreshInterval = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_VIEW_REFRESH_MODE.equals(eName)) {
+                            viewRefreshMode = ViewRefreshMode.transform(reader.getElementText());
+                        } else if (TAG_VIEW_REFRESH_TIME.equals(eName)) {
+                            viewRefreshTime = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_VIEW_BOUND_SCALE.equals(eName)) {
+                            viewBoundScale = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_VIEW_FORMAT.equals(eName)) {
+                            viewFormat = reader.getElementText();
+                        } else if (TAG_HTTP_QUERY.equals(eName)) {
+                            httpQuery = reader.getElementText();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (stopTag.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createLink(objectSimpleExtensions, idAttributes,
+                href, basicLinkSimpleExtensions, basicLinkObjectExtensions,
+                refreshMode, refreshInterval, viewRefreshMode, viewRefreshTime, viewBoundScale, viewFormat, httpQuery,
+                linkSimpleExtensions, linkObjectExtensions);
+    }
+
+    private LatLonBox readLatLonBox() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractLatLonBox
+        Angle180 north = DEF_NORTH;
+        Angle180 south = DEF_SOUTH;
+        Angle180 east = DEF_EAST;
+        Angle180 west = DEF_WEST;
+        List<SimpleType> abstractLatLonBoxSimpleExtensions = null;
+        List<AbstractObject> abstractLatLonBoxObjectExtensions = null;
+
+        // LatLonBox
+        Angle180 rotation = DEF_ROTATION;
+        List<SimpleType> latLonBoxSimpleExtensions = null;
+        List<AbstractObject> latLonBoxObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // ABSTRACT LATLONBOX
+                        if (TAG_NORTH.equals(eName)) {
+                            north = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_SOUTH.equals(eName)) {
+                            south = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_EAST.equals(eName)) {
+                            east = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_WEST.equals(eName)) {
+                            west = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        } 
+                        
+                        // LATLONBOX
+                        else if (TAG_ROTATION.equals(eName)) {
+                            rotation = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        }
+
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_LAT_LON_BOX.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+        return this.kmlFactory.createLatLonBox(objectSimpleExtensions, idAttributes,
+                north, south, east, west,
+                abstractLatLonBoxSimpleExtensions, abstractLatLonBoxObjectExtensions,
+                rotation, latLonBoxSimpleExtensions, latLonBoxObjectExtensions);
+    }
+
+    private LatLonAltBox readLatLonAltBox() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractLatLonBox
+        Angle180 north = DEF_NORTH;
+        Angle180 south = DEF_SOUTH;
+        Angle180 east = DEF_EAST;
+        Angle180 west = DEF_WEST;
+        List<SimpleType> abstractLatLonBoxSimpleExtensions = null;
+        List<AbstractObject> abstractLatLonBoxObjectExtensions = null;
+
+        // LatLonAltBox
+        double minAltitude = DEF_MIN_ALTITUDE;
+        double maxAltitude = DEF_MAX_ALTITUDE;
+        AltitudeMode altitudeMode = DEF_ALTITUDE_MODE;
+        List<SimpleType> latLonAltBoxSimpleExtensions = null;
+        List<AbstractObject> latLonAltBoxObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // ABSTRACT LATLONBOX
+                        if (TAG_NORTH.equals(eName)) {
+                            north = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_SOUTH.equals(eName)) {
+                            south = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_EAST.equals(eName)) {
+                            east = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_WEST.equals(eName)) {
+                            west = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        }
+
+                        // LATLONALTBOX
+                        else if (TAG_MIN_ALTITUDE.equals(eName)) {
+                            minAltitude = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_MAX_ALTITUDE.equals(eName)) {
+                            maxAltitude = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_MIN_ALTITUDE.equals(eName)) {
+                            altitudeMode = AltitudeMode.transform(reader.getElementText());
+                        }
+
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_LAT_LON_ALT_BOX.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+        return this.kmlFactory.createLatLonAltBox(objectSimpleExtensions, idAttributes,
+                north, south, east, west, abstractLatLonBoxSimpleExtensions, abstractLatLonBoxObjectExtensions,
+                minAltitude, maxAltitude, altitudeMode, latLonAltBoxSimpleExtensions, latLonAltBoxObjectExtensions);
+    }
+
+    private PhotoOverlay readPhotoOverlay() {
+        PhotoOverlay resultat = null;
+
+        return resultat;
+    }
+
+    private ScreenOverlay readScreenOverlay() throws XMLStreamException, KmlException {
+
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractFeature
+        String name = null;
+        boolean visibility = DEF_VISIBILITY;
+        boolean open = DEF_OPEN;
+        AtomPersonConstruct author = null;
+        AtomLink link = null;
+        String address = null;
+        AddressDetails addressDetails = null;
+        String phoneNumber = null;
+        String snippet = null;
+        String description = null;
+        AbstractView view = null;
+        AbstractTimePrimitive timePrimitive = null;
+        String styleUrl = null;
+        List<AbstractStyleSelector> styleSelector = new ArrayList<AbstractStyleSelector>();
+        Region region = null;
+        ExtendedData extendedData = null;
+        List<SimpleType> featureSimpleExtensions = null;
+        List<AbstractObject> featureObjectExtensions = null;
+
+        // AbstractOverlay
+        Color color = DEF_COLOR;
+        int drawOrder = DEF_DRAW_ORDER;
+        Link icon = null;
+        List<SimpleType> abstractOverlaySimpleExtensions = null;
+        List<AbstractObject> abstractOverlayObjectExtensions = null;
+
+        // ScreenOverlay
+        Vec2 overlayXY = null;
+        Vec2 screenXY = null;
+        Vec2 rotationXY = null;
+        Vec2 size = null;
+        Angle180 rotation = DEF_ROTATION;
+        List<SimpleType> screenOverlaySimpleExtensions = null;
+        List<AbstractObject> screenOverlayObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_NAME.equals(eName)) {
+                            name = reader.getElementText();
+                        } else if (TAG_VISIBILITY.equals(eName)) {
+                            visibility = parseBoolean(reader.getElementText());
+                        } else if (TAG_OPEN.equals(eName)) {
+                            open = parseBoolean(reader.getElementText());
+                        } else if (TAG_ADDRESS.equals(eName)) {
+                            address = reader.getElementText();
+                        } else if (TAG_PHONE_NUMBER.equals(eName)) {
+                            phoneNumber = reader.getElementText();
+                        } else if (TAG_SNIPPET.equals(eName)) {
+                            snippet = reader.getElementText();
+                        } else if (TAG_DESCRIPTION.equals(eName)) {
+                            description = reader.getElementText();
+                        } else if (TAG_STYLE_URL.equals(eName)) {
+                            styleUrl = reader.getElementText();
+                        } else if (isAbstractView(eName)) {
+                            view = this.readAbstractView(eName);
+                        } else if (isAbstractTimePrimitive(eName)) {
+                            timePrimitive = this.readAbstractTimePrimitive(eName);
+                        } else if (TAG_STYLE_URL.equals(eName)) {
+                            styleUrl = reader.getElementText();
+                        } else if (isAbstractStyleSelector(eName)) {
+                            styleSelector.add(this.readAbstractStyleSelector(eName));
+                        } else if (TAG_REGION.equals(eName)) {
+                            region = this.readRegion();
+                        } else if (TAG_EXTENDED_DATA.equals(eName)) {
+                            extendedData = this.readExtendedData();
+                        }
+
+                        // ABSTRACT OVERLAY
+                        else if (TAG_COLOR.equals(eName)) {
+                            color = this.kmlFactory.createColor(reader.getElementText());
+                        } else if (TAG_DRAW_ORDER.equals(eName)) {
+                            drawOrder = Integer.parseInt(reader.getElementText());
+                        } else if (TAG_ICON.equals(eName)) {
+                            icon = readLink(eName);
+                        }
+
+                        // SCREEN OVERLAY
+                        else if (TAG_OVERLAY_XY.equals(eName)) {
+                            overlayXY = this.readVec2(eName);
+                        } else if (TAG_SCREEN_XY.equals(eName)) {
+                            screenXY = this.readVec2(eName);
+                        } else if (TAG_ROTATION_XY.equals(eName)) {
+                            rotationXY = this.readVec2(eName);
+                        } else if (TAG_SIZE.equals(eName)) {
+                            size = this.readVec2(eName);
+                        } else if (TAG_ROTATION.equals(eName)) {
+                            rotation = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        }
+
+
+                    } else if (URI_ATOM.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_ATOM_PERSON_CONSTRUCT.equals(eName)) {
+                            author = this.readAtomPersonConstruct();
+                        } else if (TAG_ATOM_LINK.equals(eName)) {
+                            link = this.readAtomLink();
+                        }
+                    }
+                    if (URI_XAL.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_XAL_ADDRESS_DETAILS.equals(eName)) {
+                            addressDetails = this.readXalAddressDetails();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_SCREEN_OVERLAY.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createScreenOverlay(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link, address, addressDetails,
+                phoneNumber, snippet, description, view, timePrimitive, styleUrl, styleSelector,
+                region, extendedData, featureSimpleExtensions, featureObjectExtensions,
+                color, drawOrder, icon, abstractOverlaySimpleExtensions, abstractOverlayObjectExtensions,
+                overlayXY, screenXY, rotationXY, size, rotation,
+                screenOverlaySimpleExtensions, screenOverlayObjectExtensions);
+    }
+
+    /**
+     *
+     * @param eName The tag name
+     * @return An AbstractContainer instance
+     * @throws XMLStreamException
+     */
+    private AbstractContainer readAbstractContainer(String eName) throws XMLStreamException, KmlException {
+        AbstractContainer resultat = null;
+        if (TAG_FOLDER.equals(eName)) {
+            resultat = readFolder();
+        } else if (TAG_DOCUMENT.equals(eName)) {
+            resultat = readDocument();
+        }
+        return resultat;
+    }
+
+    /**
+     *
+     * @param eName The tag name
+     * @return An AbstractView instance
+     * @throws XMLStreamException
+     */
+    private AbstractView readAbstractView(String eName) throws XMLStreamException, KmlException {
+        AbstractView resultat = null;
+        if (TAG_LOOK_AT.equals(eName)) {
+            resultat = readLookAt();
+        } else if (TAG_CAMERA.equals(eName)) {
+            resultat = readCamera();
+        }
+        return resultat;
+    }
+
+    private LookAt readLookAt() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractView
+        List<SimpleType> abstractViewSimpleExtensions = null;
+        List<AbstractObject> abstractViewObjectExtensions = null;
+
+        // LookAt
+        Angle180 longitude = DEF_LONGITUDE;
+        Angle90 latitude = DEF_LATITUDE;
+        double altitude = DEF_ALTITUDE;
+        Angle360 heading = DEF_HEADING;
+        Anglepos180 tilt = DEF_TILT;
+        double range = DEF_RANGE;
+        List<SimpleType> lookAtSimpleExtensions = null;
+        List<AbstractObject> lookAtObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // LOOK AT
+                        if (TAG_LONGITUDE.equals(eName)) {
+                            longitude = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_LATITUDE.equals(eName)) {
+                            latitude = this.kmlFactory.createAngle90(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_ALTITUDE.equals(eName)) {
+                            altitude = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_HEADING.equals(eName)) {
+                            heading = this.kmlFactory.createAngle360(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_TILT.equals(eName)) {
+                            tilt = this.kmlFactory.createAnglepos180(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_RANGE.equals(eName)) {
+                            range = Double.parseDouble(reader.getElementText());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_LOOK_AT.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+        }
+        return this.kmlFactory.createLookAt(objectSimpleExtensions, idAttributes,
+                abstractViewSimpleExtensions, abstractViewObjectExtensions,
+                longitude, latitude, altitude, heading, tilt, range,
+                lookAtSimpleExtensions, lookAtObjectExtensions);
+    }
+
+    private Camera readCamera() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractView
+        List<SimpleType> abstractViewSimpleExtensions = null;
+        List<AbstractObject> abstractViewObjectExtensions = null;
+
+        // Camera
+        Angle180 longitude = DEF_LONGITUDE;
+        Angle90 latitude = DEF_LATITUDE;
+        double altitude = DEF_ALTITUDE;
+        Angle360 heading = DEF_HEADING;
+        Anglepos180 tilt = DEF_TILT;
+        Angle180 roll = DEF_ROLL;
+        List<SimpleType> cameraSimpleExtensions = null;
+        List<AbstractObject> cameraObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // CAMERA
+                        if (TAG_LONGITUDE.equals(eName)) {
+                            longitude = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_LATITUDE.equals(eName)) {
+                            latitude = this.kmlFactory.createAngle90(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_ALTITUDE.equals(eName)) {
+                            altitude = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_HEADING.equals(eName)) {
+                            heading = this.kmlFactory.createAngle360(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_TILT.equals(eName)) {
+                            tilt = this.kmlFactory.createAnglepos180(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_ROLL.equals(eName)) {
+                            roll = this.kmlFactory.createAngle180(Double.parseDouble(reader.getElementText()));
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_CAMERA.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+        }
+        return this.kmlFactory.createCamera(objectSimpleExtensions, idAttributes,
+                abstractViewSimpleExtensions, abstractViewObjectExtensions,
+                longitude, latitude, altitude, heading, tilt, roll,
+                cameraSimpleExtensions, cameraObjectExtensions);
+    }
+
+    /**
+     *
+     * @param eName The tag name
+     * @return An AbstractStyleSelector instance
+     * @throws XMLStreamException
+     */
+    private AbstractStyleSelector readAbstractStyleSelector(String eName) throws XMLStreamException, KmlException {
+        AbstractStyleSelector resultat = null;
+        if (TAG_STYLE.equals(eName)) {
+            resultat = readStyle();
+        } else if (TAG_STYLE_MAP.equals(eName)) {
+            resultat = readStyleMap();
+        }
+        return resultat;
+    }
+
+    private StyleMap readStyleMap() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractStyleSelector
+        List<SimpleType> styleSelectorSimpleExtensions = null;
+        List<AbstractObject> styleSelectorObjectExtensions = null;
+
+        // StyleMap
+        List<Pair> pairs = new ArrayList<Pair>();
+        List<SimpleType> styleMapSimpleExtensions = null;
+        List<AbstractObject> styleMapObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // STYLE MAP
+                        if (TAG_PAIR.equals(eName)) {
+                            pairs.add(this.readPair());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_STYLE_MAP.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+        return this.kmlFactory.createStyleMap(objectSimpleExtensions, idAttributes,
+                styleSelectorSimpleExtensions, styleSelectorObjectExtensions,
+                pairs, styleMapSimpleExtensions, styleMapObjectExtensions);
+    }
+
+    private Pair readPair() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // Pair
+        StyleState key = DEF_STYLE_STATE;
+        String styleUrl = null;
+        AbstractStyleSelector styleSelector = null;
+        List<SimpleType> pairSimpleExtensions = null;
+        List<AbstractObject> pairObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // PAIR
+                        if (TAG_KEY.equals(eName)) {
+                            key = StyleState.transform(reader.getElementText());
+                        } else if (TAG_STYLE_URL.equals(eName)) {
+                            styleUrl = reader.getElementText();
+                        } else if (isAbstractStyleSelector(eName)) {
+                            styleSelector = this.readAbstractStyleSelector(eName);
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_PAIR.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+        return this.kmlFactory.createPair(objectSimpleExtensions, idAttributes,
+                key, styleUrl, styleSelector, pairSimpleExtensions, pairObjectExtensions);
+    }
+
+    private Style readStyle() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractStyleSelector
+        List<SimpleType> styleSelectorSimpleExtensions = null;
+        List<AbstractObject> styleSelectorObjectExtensions = null;
+
+        // Style
+        IconStyle iconStyle = null;
+        LabelStyle labelStyle = null;
+        LineStyle lineStyle = null;
+        PolyStyle polyStyle = null;
+        BalloonStyle balloonStyle = null;
+        ListStyle listStyle = null;
+        List<SimpleType> styleSimpleExtensions = null;
+        List<AbstractObject> styleObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // STYLE
+                        if (TAG_ICON_STYLE.equals(eName)) {
+                            iconStyle = this.readIconStyle();
+                        } else if (TAG_LABEL_STYLE.equals(eName)) {
+                            labelStyle = this.readLabelStyle();
+                        } else if (TAG_LINE_STYLE.equals(eName)) {
+                            lineStyle = this.readLineStyle();
+                        } else if (TAG_POLY_STYLE.equals(eName)) {
+                            polyStyle = this.readPolyStyle();
+                        } else if (TAG_BALLOON_STYLE.equals(eName)) {
+                            balloonStyle = this.readBalloonStyle();
+                        } else if (TAG_LIST_STYLE.equals(eName)) {
+                            listStyle = this.readListStyle();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_STYLE.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+        return this.kmlFactory.createStyle(objectSimpleExtensions, idAttributes,
+                styleSelectorSimpleExtensions, styleSelectorObjectExtensions,
+                iconStyle, labelStyle, lineStyle, polyStyle, balloonStyle, listStyle,
+                styleSimpleExtensions, styleObjectExtensions);
+    }
+
+    private IconStyle readIconStyle() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractSubStyle
+        List<SimpleType> subStyleSimpleExtensions = null;
+        List<AbstractObject> subStyleObjectExtensions = null;
+
+        // AbstractColorStyle
+        Color color = DEF_COLOR;
+        ColorMode colorMode = DEF_COLOR_MODE;
+        List<SimpleType> colorStyleSimpleExtensions = null;
+        List<AbstractObject> colorStyleObjectExtensions = null;
+
+        // IconStyle
+        double scale = DEF_SCALE;
+        Angle360 heading = DEF_HEADING;
+        BasicLink icon = null;
+        Vec2 hotSpot = null;
+        List<SimpleType> iconStyleSimpleExtensions = null;
+        List<AbstractObject> iconStyleObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // COLOR STYLE
+                        if (TAG_COLOR.equals(eName)) {
+                            color = this.kmlFactory.createColor(reader.getElementText());
+                        } else if (TAG_COLOR_MODE.equals(eName)) {
+                            colorMode = ColorMode.transform(reader.getElementText());
+                        }
+
+                        // ICON STYLE
+                        else if (TAG_SCALE.equals(eName)) {
+                            scale = Double.parseDouble(reader.getElementText());
+                        } else if (TAG_HEADING.equals(eName)) {
+                            heading = this.kmlFactory.createAngle360(Double.parseDouble(reader.getElementText()));
+                        } else if (TAG_ICON.equals(eName)) {
+                            icon = this.readBasicLink(TAG_ICON);
+                        } else if (TAG_HOT_SPOT.equals(eName)) {
+                            hotSpot = this.readVec2(TAG_HOT_SPOT);
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_ICON_STYLE.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createIconStyle(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                color, colorMode,
+                colorStyleSimpleExtensions, colorStyleObjectExtensions,
+                scale, heading, icon, hotSpot,
+                iconStyleSimpleExtensions, iconStyleObjectExtensions);
+    }
+
+    private LabelStyle readLabelStyle() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractSubStyle
+        List<SimpleType> subStyleSimpleExtensions = null;
+        List<AbstractObject> subStyleObjectExtensions = null;
+
+        // AbstractColorStyle
+        Color color = DEF_COLOR;
+        ColorMode colorMode = DEF_COLOR_MODE;
+        List<SimpleType> colorStyleSimpleExtensions = null;
+        List<AbstractObject> colorStyleObjectExtensions = null;
+
+        // LabelStyle
+        double scale = DEF_SCALE;
+        List<SimpleType> labelStyleSimpleExtensions = null;
+        List<AbstractObject> labelStyleObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // COLOR STYLE
+                        if (TAG_COLOR.equals(eName)) {
+                            color = this.kmlFactory.createColor(reader.getElementText());
+                        } else if (TAG_COLOR_MODE.equals(eName)) {
+                            colorMode = ColorMode.transform(reader.getElementText());
+                        }
+
+                        // LABEL STYLE
+                        else if (TAG_SCALE.equals(eName)) {
+                            scale = Double.parseDouble(reader.getElementText());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_LABEL_STYLE.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createLabelStyle(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                color, colorMode, colorStyleSimpleExtensions, colorStyleObjectExtensions,
+                scale, labelStyleSimpleExtensions, labelStyleObjectExtensions);
+    }
+
+    private LineStyle readLineStyle() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractSubStyle
+        List<SimpleType> subStyleSimpleExtensions = null;
+        List<AbstractObject> subStyleObjectExtensions = null;
+
+        // AbstractColorStyle
+        Color color = DEF_COLOR;
+        ColorMode colorMode = DEF_COLOR_MODE;
+        List<SimpleType> colorStyleSimpleExtensions = null;
+        List<AbstractObject> colorStyleObjectExtensions = null;
+
+        // LineStyle
+        double width = DEF_WIDTH;
+        List<SimpleType> lineStyleSimpleExtensions = null;
+        List<AbstractObject> lineStyleObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // COLOR STYLE
+                        if (TAG_COLOR.equals(eName)) {
+                            color = this.kmlFactory.createColor(reader.getElementText());
+                        } else if (TAG_COLOR_MODE.equals(eName)) {
+                            colorMode = ColorMode.transform(reader.getElementText());
+                        }
+
+                        // LINE STYLE
+                        else if (TAG_WIDTH.equals(eName)) {
+                            width = Double.parseDouble(reader.getElementText());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_LINE_STYLE.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createLineStyle(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                color, colorMode, colorStyleSimpleExtensions, colorStyleObjectExtensions,
+                width, lineStyleSimpleExtensions, lineStyleObjectExtensions);
+    }
+
+    private PolyStyle readPolyStyle() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractSubStyle
+        List<SimpleType> subStyleSimpleExtensions = null;
+        List<AbstractObject> subStyleObjectExtensions = null;
+
+        // AbstractColorStyle
+        Color color = DEF_COLOR;
+        ColorMode colorMode = DEF_COLOR_MODE;
+        List<SimpleType> colorStyleSimpleExtensions = null;
+        List<AbstractObject> colorStyleObjectExtensions = null;
+
+        // PolyStyle
+        boolean fill = DEF_FILL;
+        boolean outline = DEF_OUTLINE;
+        List<SimpleType> polyStyleSimpleExtensions = null;
+        List<AbstractObject> polyStyleObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // COLOR STYLE
+                        if (TAG_COLOR.equals(eName)) {
+                            color = this.kmlFactory.createColor(reader.getElementText());
+                        } else if (TAG_COLOR_MODE.equals(eName)) {
+                            colorMode = ColorMode.transform(reader.getElementText());
+                        }
+
+                        // POLY STYLE
+                        else if (TAG_FILL.equals(eName)) {
+                            fill = parseBoolean(reader.getElementText());
+                        } else if (TAG_OUTLINE.equals(eName)) {
+                            outline = parseBoolean(reader.getElementText());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_POLY_STYLE.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createPolyStyle(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                color, colorMode, colorStyleSimpleExtensions, colorStyleObjectExtensions,
+                fill, outline, polyStyleSimpleExtensions, polyStyleObjectExtensions);
+    }
+
+    private BalloonStyle readBalloonStyle() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractSubStyle
+        List<SimpleType> subStyleSimpleExtensions = null;
+        List<AbstractObject> subStyleObjectExtensions = null;
+
+        // BalloonStyle
+        Color bgColor = DEF_BG_COLOR;
+        Color textColor = DEF_TEXT_COLOR;
+        String text = null;
+        DisplayMode displayMode = DEF_DISPLAY_MODE;
+        List<SimpleType> balloonStyleSimpleExtensions = null;
+        List<AbstractObject> balloonStyleObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // BALLOON STYLE
+                        if (TAG_BG_COLOR.equals(eName)) {
+                            bgColor = this.kmlFactory.createColor(reader.getElementText());
+                        } else if (TAG_TEXT_COLOR.equals(eName)) {
+                            textColor = this.kmlFactory.createColor(reader.getElementText());
+                        } else if (TAG_TEXT.equals(eName)) {
+                            text = reader.getElementText();
+                        } else if (TAG_DISPLAY_MODE.equals(eName)) {
+                            displayMode = DisplayMode.transform(reader.getElementText());
+                        }
+
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_BALLOON_STYLE.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createBalloonStyle(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                bgColor, textColor, text, displayMode,
+                balloonStyleSimpleExtensions, balloonStyleObjectExtensions);
+    }
+
+    private ListStyle readListStyle() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractSubStyle
+        List<SimpleType> subStyleSimpleExtensions = null;
+        List<AbstractObject> subStyleObjectExtensions = null;
+
+        // ListStyle
+        ListItem listItem = DEF_LIST_ITEM;
+        Color bgColor = DEF_BG_COLOR;
+        List<ItemIcon> itemIcons = new ArrayList<ItemIcon>();
+        int maxSnippetLines = DEF_MAX_SNIPPET_LINES;
+        List<SimpleType> listStyleSimpleExtensions = null;
+        List<AbstractObject> listStyleObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // LIST STYLE
+                        if (TAG_LIST_ITEM.equals(eName)) {
+                            listItem = listItem.transform(reader.getElementText());
+                        } else if (TAG_BG_COLOR.equals(eName)) {
+                            bgColor = this.kmlFactory.createColor(reader.getElementText());
+                        } else if (TAG_ITEM_ICON.equals(eName)) {
+                            itemIcons.add(this.readItemIcon());
+                        } else if (TAG_MAX_SNIPPET_LINES.equals(eName)) {
+                            maxSnippetLines = Integer.parseInt(reader.getElementText());
+                        }
+
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_LIST_STYLE.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createListStyle(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                listItem, bgColor, itemIcons, maxSnippetLines,
+                listStyleSimpleExtensions, listStyleObjectExtensions);
+    }
+
+    private ItemIcon readItemIcon() throws XMLStreamException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // ListStyle
+        List<ItemIconState> states = null;
+        String href = null;
+        List<SimpleType> itemIconSimpleExtensions = null;
+        List<AbstractObject> itemIconObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // ITEM ICON
+                        if (TAG_STATE.equals(eName)) {
+                            states = this.readStates();
+                        } else if (TAG_HREF.equals(eName)) {
+                            href = reader.getElementText();
+                        }
+
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_ITEM_ICON.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createItemIcon(objectSimpleExtensions, idAttributes,
+                states, href, itemIconSimpleExtensions, itemIconObjectExtensions);
+    }
+
+    private List<ItemIconState> readStates() throws XMLStreamException {
+
+        List<ItemIconState> states = new ArrayList<ItemIconState>();
+        for (String iiss : reader.getElementText().split(" ")) {
+            ItemIconState iis = ItemIconState.transform(iiss);
+            if (iis != null) {
+                states.add(iis);
+            }
+        }
+        return states;
+    }
+
+    private BasicLink readBasicLink(String stopTag) throws XMLStreamException, KmlException {
+
+        if (stopTag == null) {
+            throw new KmlException("The stop tag cannot be null. "
+                    + "It's probably an <Icon> tag according to KML 2.2 specification.");
+        }
+
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        String href = null;
+        List<SimpleType> basicLinkSimpleExtensions = null;
+        List<AbstractObject> basicLinkObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_HREF.equals(eName)) {
+                            href = reader.getElementText();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (stopTag.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createBasicLink(objectSimpleExtensions, idAttributes,
+                href, basicLinkSimpleExtensions, basicLinkObjectExtensions);
+    }
+
+    private Vec2 readVec2(String stopTag) throws XMLStreamException, KmlException {
+
+        if (stopTag == null) {
+            throw new KmlException("The stop tag cannot be null. "
+                    + "It's propably <hotSpot>, <rotationXY>, <size>, <overlayXY> or <screenXY> according to KML 2.2 specification.");
+        }
+
+        double x;
+        String sx = reader.getAttributeValue(null, ATT_X);
+        if (sx != null) {
+            x = Double.parseDouble(sx);
+        } else {
+            x = 1.0;
+        }
+
+        double y = 1.0;
+        String sy = reader.getAttributeValue(null, ATT_Y);
+        if (sy != null) {
+            y = Double.parseDouble(sy);
+        } else {
+            y = 1.0;
+        }
+
+        Units xUnit = Units.transform(reader.getAttributeValue(null, ATT_XUNITS), Units.FRACTION);
+        Units yUnit = Units.transform(reader.getAttributeValue(null, ATT_YUNITS), Units.FRACTION);
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.END_ELEMENT:
+                    if (stopTag.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createVec2(x, y, xUnit, yUnit);
+    }
+
+    /**
+     *
+     * @param eName The tag name
+     * @return An AbstractTimePrimitive instance
+     * @throws XMLStreamException
+     */
+    private AbstractTimePrimitive readAbstractTimePrimitive(String eName) throws XMLStreamException {
+        AbstractTimePrimitive resultat = null;
+        if (TAG_TIME_STAMP.equals(eName)) {
+            resultat = readTimeStamp();
+        } else if (TAG_TIME_SPAN.equals(eName)) {
+            resultat = readTimeSpan();
+        }
+        return resultat;
+    }
+
+    private TimeSpan readTimeSpan() throws XMLStreamException{
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractTimePrimitive
+        List<SimpleType> AbstractTimePrimitiveSimpleExtensions = null;
+        List<AbstractObject> AbstractTimePrimitiveObjectExtensions = null;
+
+        // TimeSpan
+        String begin = null;
+        String end = null;
+        List<SimpleType> TimeSpanSimpleExtensions = null;
+        List<AbstractObject> TimeSpanObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_BEGIN.equals(eName)) {
+                            begin = reader.getElementText();
+                        } else if (TAG_END.equals(eName)) {
+                            end = reader.getElementText();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_TIME_SPAN.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+        return this.kmlFactory.createTimeSpan(objectSimpleExtensions, idAttributes,
+                AbstractTimePrimitiveSimpleExtensions, AbstractTimePrimitiveObjectExtensions,
+                begin, end, TimeSpanSimpleExtensions, TimeSpanObjectExtensions);
+    }
+
+    private TimeStamp readTimeStamp() throws XMLStreamException{
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractTimePrimitive
+        List<SimpleType> AbstractTimePrimitiveSimpleExtensions = null;
+        List<AbstractObject> AbstractTimePrimitiveObjectExtensions = null;
+
+        // TimeStamp
+        String when = null;
+        List<SimpleType> TimeStampSimpleExtensions = null;
+        List<AbstractObject> TimeStampObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_WHEN.equals(eName)) {
+                            when = reader.getElementText();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_TIME_STAMP.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+        return this.kmlFactory.createTimeStamp(objectSimpleExtensions, idAttributes,
+                AbstractTimePrimitiveSimpleExtensions, AbstractTimePrimitiveObjectExtensions,
+                when, TimeStampSimpleExtensions, TimeStampObjectExtensions);
+    }
+
+    /**
+     *
+     * @return An AtomPersonConstruct instance
+     * @throws XMLStreamException
+     */
+    private AtomPersonConstruct readAtomPersonConstruct() throws XMLStreamException {
+        List<String> names = new ArrayList<String>();
+        List<String> uris = new ArrayList<String>();
+        List<String> emails = new ArrayList<String>();
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_ATOM.equals(eUri)) {
+                        if (TAG_ATOM_NAME.equals(eName)) {
+                            names.add(reader.getElementText());
+                        } else if (TAG_ATOM_URI.equals(eName)) {
+                            uris.add(reader.getElementText());
+                        } else if (TAG_ATOM_NAME.equals(eName)) {
+                            emails.add(reader.getElementText());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_ATOM_PERSON_CONSTRUCT.equals(reader.getLocalName()) && URI_ATOM.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+        return this.kmlFactory.createAtomPersonConstruct(names, uris, emails);
+    }
+
+    private AtomLink readAtomLink() throws XMLStreamException {
+        AtomLink resultat = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_ATOM.equals(eUri)) {
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_ATOM_LINK.equals(reader.getLocalName()) && URI_ATOM.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+        return resultat;
+    }
+
+    private AddressDetails readXalAddressDetails() throws XMLStreamException {
+        AddressDetails resultat = null;
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_XAL.equals(eUri)) {
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_XAL_ADDRESS_DETAILS.equals(reader.getLocalName()) && URI_XAL.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+        return resultat;
+    }
+
+    private Folder readFolder() throws XMLStreamException, KmlException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractFeature
+        String name = null;
+        boolean visibility = DEF_VISIBILITY;
+        boolean open = DEF_OPEN;
+        AtomPersonConstruct author = null;
+        AtomLink link = null;
+        String address = null;
+        AddressDetails addressDetails = null;
+        String phoneNumber = null;
+        String snippet = null;
+        String description = null;
+        AbstractView view = null;
+        AbstractTimePrimitive timePrimitive = null;
+        String styleUrl = null;
+        List<AbstractStyleSelector> styleSelector = new ArrayList<AbstractStyleSelector>();
+        Region region = null;
+        ExtendedData extendedData = null;
+        List<SimpleType> featureSimpleExtensions = null;
+        List<AbstractObject> featureObjectExtensions = null;
+
+        // Container
+        List<SimpleType> abstractContainerSimpleExtensions = null;
+        List<AbstractObject> abstractContainerObjectExtensions = null;
+
+        // Folder
+        List<AbstractFeature> features = new ArrayList<AbstractFeature>();
+        List<SimpleType> folderSimpleExtensions = null;
+        List<AbstractObject> folderObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_NAME.equals(eName)) {
+                            name = reader.getElementText();
+                        } else if (TAG_VISIBILITY.equals(eName)) {
+                            visibility = parseBoolean(reader.getElementText());
+                        } else if (TAG_OPEN.equals(eName)) {
+                            open = parseBoolean(reader.getElementText());
+                        } else if (TAG_ADDRESS.equals(eName)) {
+                            address = reader.getElementText();
+                        } else if (TAG_PHONE_NUMBER.equals(eName)) {
+                            phoneNumber = reader.getElementText();
+                        } else if (TAG_SNIPPET.equals(eName)) {
+                            snippet = reader.getElementText();
+                        } else if (TAG_DESCRIPTION.equals(eName)) {
+                            description = reader.getElementText();
+                        } else if (TAG_STYLE_URL.equals(eName)) {
+                            styleUrl = reader.getElementText();
+                        } else if (isAbstractView(eName)) {
+                            view = this.readAbstractView(eName);
+                        } else if (isAbstractTimePrimitive(eName)) {
+                            timePrimitive = this.readAbstractTimePrimitive(eName);
+                        } else if (TAG_STYLE_URL.equals(eName)) {
+                            styleUrl = reader.getElementText();
+                        } else if (isAbstractStyleSelector(eName)) {
+                            styleSelector.add(this.readAbstractStyleSelector(eName));
+                        } else if (TAG_REGION.equals(eName)) {
+                            region = this.readRegion();
+                        } else if (TAG_EXTENDED_DATA.equals(eName)) {
+                            extendedData = this.readExtendedData();
+                        }
+
+                        // FOLDER
+                        else if (isAbstractFeature(eName)) {
+                            features.add(this.readAbstractFeature(eName));
+                        }
+
+                    } else if (URI_ATOM.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_ATOM_PERSON_CONSTRUCT.equals(eName)) {
+                            author = this.readAtomPersonConstruct();
+                        } else if (TAG_ATOM_LINK.equals(eName)) {
+                            link = this.readAtomLink();
+                        }
+                    }
+                    if (URI_XAL.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_XAL_ADDRESS_DETAILS.equals(eName)) {
+                            addressDetails = this.readXalAddressDetails();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_FOLDER.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+        return this.kmlFactory.createFolder(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link, address, addressDetails,
+                phoneNumber, snippet, description, view, timePrimitive, styleUrl, styleSelector, region, extendedData,
+                featureSimpleExtensions, featureObjectExtensions,
+                abstractContainerSimpleExtensions, abstractContainerObjectExtensions,
+                features, folderSimpleExtensions, folderObjectExtensions);
+    }
+
+    private Document readDocument() throws XMLStreamException, KmlException {
+
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractFeature
+        String name = null;
+        boolean visibility = DEF_VISIBILITY;
+        boolean open = DEF_OPEN;
+        AtomPersonConstruct author = null;
+        AtomLink link = null;
+        String address = null;
+        AddressDetails addressDetails = null;
+        String phoneNumber = null;
+        String snippet = null;
+        String description = null;
+        AbstractView view = null;
+        AbstractTimePrimitive timePrimitive = null;
+        String styleUrl = null;
+        List<AbstractStyleSelector> styleSelector = new ArrayList<AbstractStyleSelector>();
+        Region region = null;
+        ExtendedData extendedData = null;
+        List<SimpleType> featureSimpleExtensions = null;
+        List<AbstractObject> featureObjectExtensions = null;
+
+        // Container
+        List<SimpleType> abstractContainerSimpleExtensions = null;
+        List<AbstractObject> abstractContainerObjectExtensions = null;
+
+        // Document
+        List<Schema> schemas = new ArrayList<Schema>();
+        List<AbstractFeature> features = new ArrayList<AbstractFeature>();
+        List<SimpleType> documentSimpleExtensions = null;
+        List<AbstractObject> documentObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    if (URI_KML.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_NAME.equals(eName)) {
+                            name = reader.getElementText();
+                        } else if (TAG_VISIBILITY.equals(eName)) {
+                            visibility = parseBoolean(reader.getElementText());
+                        } else if (TAG_OPEN.equals(eName)) {
+                            open = parseBoolean(reader.getElementText());
+                        } else if (TAG_ADDRESS.equals(eName)) {
+                            address = reader.getElementText();
+                        } else if (TAG_PHONE_NUMBER.equals(eName)) {
+                            phoneNumber = reader.getElementText();
+                        } else if (TAG_SNIPPET.equals(eName)) {
+                            snippet = reader.getElementText();
+                        } else if (TAG_DESCRIPTION.equals(eName)) {
+                            description = reader.getElementText();
+                        } else if (TAG_STYLE_URL.equals(eName)) {
+                            styleUrl = reader.getElementText();
+                        } else if (isAbstractView(eName)) {
+                            view = this.readAbstractView(eName);
+                        } else if (isAbstractTimePrimitive(eName)) {
+                            timePrimitive = this.readAbstractTimePrimitive(eName);
+                        } else if (TAG_STYLE_URL.equals(eName)) {
+                            styleUrl = reader.getElementText();
+                        } else if (isAbstractStyleSelector(eName)) {
+                            styleSelector.add(this.readAbstractStyleSelector(eName));
+                        } else if (TAG_REGION.equals(eName)) {
+                            region = this.readRegion();
+                        } else if (TAG_EXTENDED_DATA.equals(eName)) {
+                            extendedData = this.readExtendedData();
+                        }
+
+                        // DOCUMENT
+                        else if (TAG_SCHEMA.equals(eName)) {
+                            schemas.add(this.readSchema());
+                        } else if (isAbstractFeature(eName)) {
+                            features.add(this.readAbstractFeature(eName));
+                        }
+
+
+                    } else if (URI_ATOM.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_ATOM_PERSON_CONSTRUCT.equals(eName)) {
+                            author = this.readAtomPersonConstruct();
+                        } else if (TAG_ATOM_LINK.equals(eName)) {
+                            link = this.readAtomLink();
+                        }
+                    }
+                    if (URI_XAL.equals(eUri)) {
+
+                        // ABSTRACT FEATURE
+                        if (TAG_XAL_ADDRESS_DETAILS.equals(eName)) {
+                            addressDetails = this.readXalAddressDetails();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_DOCUMENT.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createDocument(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link, address, addressDetails, phoneNumber, snippet, description,
+                view, timePrimitive, styleUrl, styleSelector, region, extendedData, featureSimpleExtensions, featureObjectExtensions,
+                abstractContainerSimpleExtensions, abstractContainerObjectExtensions,
+                schemas, features, documentSimpleExtensions, documentObjectExtensions);
+    }
+
+    private Schema readSchema() throws XMLStreamException {
+
+        // Schema
+        List<SimpleField> simplefields = new ArrayList<SimpleField>();
+        //public List<SchemaExtension> getSchemaExtensions();
+        String name = reader.getAttributeValue(null, ATT_NAME);
+        String id = reader.getAttributeValue(null, ATT_ID);
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // SCHEMA
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_SIMPLE_FIELD.equals(eName)) {
+                            simplefields.add(this.readSimpleField());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_SCHEMA.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createSchema(simplefields, name, id);
+    }
+
+    private SimpleField readSimpleField() throws XMLStreamException {
+
+        // SimpleField
+        String displayName = null;
+        //public List<SimpleFieldExtension> getSimpleFieldExtensions();
+        String name = reader.getAttributeValue(null, ATT_NAME);
+        String type = reader.getAttributeValue(null, ATT_TYPE);
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // SIMPLE FIELD
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_DISPLAY_NAME.equals(eName)) {
+                            displayName = reader.getElementText();
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_SIMPLE_FIELD.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createSimpleField(displayName, type, name);
+    }
+
+    private NetworkLink readNetworkLink() {
+        NetworkLink resultat = null;
+
+        return resultat;
+    }
+
+    private Point readPoint() throws XMLStreamException {
+        // AbstractObject
+        List<SimpleType> objectSimpleExtensions = null;
+        IdAttributes idAttributes = this.readIdAttributes();
+
+        // AbstractGeometry
+        List<SimpleType> abstractGeometrySimpleExtensions = null;
+        List<AbstractObject> abstractGeometryObjectExtensions = null;
+
+        // Point
+        boolean extrude = DEF_EXTRUDE;
+        AltitudeMode altitudeMode = DEF_ALTITUDE_MODE;
+        Coordinates coordinates = null;
+        List<SimpleType> pointSimpleExtensions = null;
+        List<AbstractObject> pointObjectExtensions = null;
+
+        boucle:
+        while (reader.hasNext()) {
+
+            switch (reader.next()) {
+                case XMLStreamConstants.START_ELEMENT:
+                    final String eName = reader.getLocalName();
+                    final String eUri = reader.getNamespaceURI();
+
+                    // POINT
+                    if (URI_KML.equals(eUri)) {
+                        if (TAG_EXTRUDE.equals(eName)) {
+                            extrude = parseBoolean(reader.getElementText());
+                        } else if (TAG_ALTITUDE_MODE.equals(eName)) {
+                            altitudeMode = AltitudeMode.transform(reader.getElementText());
+                        } else if (TAG_COORDINATES.equals(eName)) {
+                            coordinates = readCoordinates(reader.getElementText());
+                        }
+                    }
+                    break;
+
+                case XMLStreamConstants.END_ELEMENT:
+                    if (TAG_POINT.equals(reader.getLocalName()) && URI_KML.contains(reader.getNamespaceURI())) {
+                        break boucle;
+                    }
+                    break;
+            }
+
+        }
+
+        return this.kmlFactory.createPoint(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions,
+                extrude, altitudeMode, coordinates, pointSimpleExtensions, pointObjectExtensions);
+    }
+
+    /**
+     * Transforms a String of KML coordinates into an instance of Coordinates
+     * @param coordinates The coordinates String
+     * @return The Coordinates object wich is a List of Coordinate instances.
+     */
+    private Coordinates readCoordinates(String coordinates) {
+        List<Coordinate> coordinatesList = new ArrayList<Coordinate>();
+
+        String[] coordinatesStringList = coordinates.split("[\\s]+");
+        
+        for (String coordinatesString : coordinatesStringList) {
+            if(!coordinatesString.equals("")){
+                coordinatesList.add(this.kmlFactory.createCoordinate(coordinatesString));
+            }
+        }
+
+        return this.kmlFactory.createCoordinates(coordinatesList);
+    }
+
+    private IdAttributes readIdAttributes() {
+        return this.kmlFactory.createIdAttributes(
+                reader.getAttributeValue(null, ATT_ID), reader.getAttributeValue(null, ATT_TARGET_ID));
+    }
+
+
+    /*
+     *  METHODES DE TEST SUR LES TYPES ABSTRAITS
+     */
+    private boolean isAbstractGeometry(String eName) {
+        return (TAG_MULTI_GEOMETRY.equals(eName)
+                || TAG_LINE_STRING.equals(eName)
+                || TAG_POLYGON.equals(eName)
+                || TAG_POINT.equals(eName)
+                || TAG_LINEAR_RING.equals(eName)
+                || TAG_MODEL.equals(eName));
+    }
+
+    private boolean isAbstractFeature(String eName) {
+        return (TAG_FOLDER.equals(eName)
+                || TAG_GROUND_OVERLAY.equals(eName)
+                || TAG_PHOTO_OVERLAY.equals(eName)
+                || TAG_NETWORK_LINK.equals(eName)
+                || TAG_DOCUMENT.equals(eName)
+                || TAG_SCREEN_OVERLAY.equals(eName)
+                || TAG_PLACEMARK.equals(eName));
+    }
+
+    private boolean isAbstractContainer(String eName) {
+        return (TAG_FOLDER.equals(eName)
+                || TAG_DOCUMENT.equals(eName));
+    }
+
+    private boolean isAbstractOverlay(String eName) {
+        return (TAG_GROUND_OVERLAY.equals(eName)
+                || TAG_PHOTO_OVERLAY.equals(eName)
+                || TAG_SCREEN_OVERLAY.equals(eName));
+    }
+
+    private boolean isAbstractView(String eName) {
+        return (TAG_LOOK_AT.equals(eName)
+                || TAG_CAMERA.equals(eName));
+    }
+
+    private boolean isAbstractTimePrimitive(String eName) {
+        return (TAG_TIME_STAMP.equals(eName)
+                || TAG_TIME_SPAN.equals(eName));
+    }
+
+    private boolean isAbstractStyleSelector(String eName) {
+        return (TAG_STYLE.equals(eName)
+                || TAG_STYLE_MAP.equals(eName));
+    }
+
+    /*
+     * METHODES UTILITAIRES
+     */
+    /**
+     * Adaptation of boolean parsing to XML boolean values 1 and 0.
+     * @param bool The String to parse
+     * @return true if bool is equal to "true" or "1".
+     */
+    private static boolean parseBoolean(String bool) {
+        boolean resultat = Boolean.parseBoolean(bool);
+        if (!resultat && Integer.parseInt(bool) == 1) {
+            resultat = true;
+        }
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/KmlWriter.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/KmlWriter.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,1366 @@
+package org.geotoolkit.data.kml;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import javax.xml.stream.XMLEventFactory;
+import javax.xml.stream.XMLOutputFactory;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamWriter;
+import org.geotoolkit.data.model.kml.AbstractColorStyle;
+import org.geotoolkit.data.model.kml.AbstractContainer;
+import org.geotoolkit.data.model.kml.AbstractFeature;
+import org.geotoolkit.data.model.kml.AbstractGeometry;
+import org.geotoolkit.data.model.kml.AbstractLatLonBox;
+import org.geotoolkit.data.model.kml.AbstractObject;
+import org.geotoolkit.data.model.kml.AbstractOverlay;
+import org.geotoolkit.data.model.kml.AbstractStyleSelector;
+import org.geotoolkit.data.model.kml.AbstractSubStyle;
+import org.geotoolkit.data.model.kml.AbstractView;
+import org.geotoolkit.data.model.kml.AltitudeMode;
+import org.geotoolkit.data.model.kml.Angle180;
+import org.geotoolkit.data.model.kml.Angle360;
+import org.geotoolkit.data.model.kml.Angle90;
+import org.geotoolkit.data.model.kml.Anglepos180;
+import org.geotoolkit.data.model.kml.BalloonStyle;
+import org.geotoolkit.data.model.kml.BasicLink;
+import org.geotoolkit.data.model.kml.Boundary;
+import org.geotoolkit.data.model.kml.Camera;
+import org.geotoolkit.data.model.kml.Color;
+import org.geotoolkit.data.model.kml.ColorMode;
+import org.geotoolkit.data.model.kml.Coordinate;
+import org.geotoolkit.data.model.kml.Coordinates;
+import org.geotoolkit.data.model.kml.DisplayMode;
+import org.geotoolkit.data.model.kml.Document;
+import org.geotoolkit.data.model.kml.Folder;
+import org.geotoolkit.data.model.kml.GroundOverlay;
+import org.geotoolkit.data.model.kml.IconStyle;
+import org.geotoolkit.data.model.kml.IdAttributes;
+import org.geotoolkit.data.model.kml.ItemIcon;
+import org.geotoolkit.data.model.kml.ItemIconState;
+import org.geotoolkit.data.model.kml.Kml;
+import org.geotoolkit.data.model.kml.LabelStyle;
+import org.geotoolkit.data.model.kml.LatLonBox;
+import org.geotoolkit.data.model.kml.LineString;
+import org.geotoolkit.data.model.kml.LineStyle;
+import org.geotoolkit.data.model.kml.LinearRing;
+import org.geotoolkit.data.model.kml.Link;
+import org.geotoolkit.data.model.kml.ListItem;
+import org.geotoolkit.data.model.kml.ListStyle;
+import org.geotoolkit.data.model.kml.Location;
+import org.geotoolkit.data.model.kml.LookAt;
+import org.geotoolkit.data.model.kml.Model;
+import org.geotoolkit.data.model.kml.MultiGeometry;
+import org.geotoolkit.data.model.kml.Orientation;
+import org.geotoolkit.data.model.kml.Pair;
+import org.geotoolkit.data.model.kml.PhotoOverlay;
+import org.geotoolkit.data.model.kml.Placemark;
+import org.geotoolkit.data.model.kml.Point;
+import org.geotoolkit.data.model.kml.PolyStyle;
+import org.geotoolkit.data.model.kml.Polygon;
+import org.geotoolkit.data.model.kml.RefreshMode;
+import org.geotoolkit.data.model.kml.ResourceMap;
+import org.geotoolkit.data.model.kml.Scale;
+import org.geotoolkit.data.model.kml.Schema;
+import org.geotoolkit.data.model.kml.ScreenOverlay;
+import org.geotoolkit.data.model.kml.Style;
+import org.geotoolkit.data.model.kml.StyleMap;
+import org.geotoolkit.data.model.kml.StyleState;
+import org.geotoolkit.data.model.kml.Vec2;
+import org.geotoolkit.data.model.kml.ViewRefreshMode;
+import org.geotoolkit.data.model.xsd.SimpleType;
+import org.geotoolkit.xml.StaxStreamWriter;
+import static org.geotoolkit.data.model.ModelConstants.*;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class KmlWriter extends StaxStreamWriter {
+
+    //private XMLOutputFactory outputFactory;
+    //private File file;
+
+    public KmlWriter(File file){
+        this.initSource(file);
+    }
+
+    public void initSource(Object o) {
+        System.setProperty("javax.xml.stream.XMLOutputFactory", "com.ctc.wstx.stax.WstxOutputFactory");
+        try {
+            //this.outputFactory = XMLOutputFactory.newInstance();
+            this.setOutput(o);
+        } catch (IOException ex) {
+            Logger.getLogger(KmlWriter.class.getName()).log(Level.SEVERE, null, ex);
+        } catch (XMLStreamException ex) {
+            Logger.getLogger(KmlWriter.class.getName()).log(Level.SEVERE, null, ex);
+        }
+    }
+
+    public void write(Kml kml) {
+        try {
+
+            // FACULTATIF : INDENTATION DE LA SORTIE
+            //streamWriter = new IndentingXMLStreamWriter(streamWriter);
+
+            writer.writeStartDocument("UTF-8", "1.0");
+
+            writer.writeStartElement(TAG_KML);
+            writer.setDefaultNamespace(URI_KML);
+            writer.writeDefaultNamespace(URI_KML);
+            /*streamWriter.writeNamespace(PREFIX_ATOM, URI_ATOM);
+            streamWriter.writeNamespace(PREFIX_XAL, URI_XAL);
+            streamWriter.writeNamespace(PREFIX_XSI, URI_XSI);
+            streamWriter.writeAttribute(URI_XSI,
+                    "schemaLocation",
+                    URI_KML+" C:/Users/w7mainuser/Documents/OGC_SCHEMAS/sld/1.1.0/StyledLayerDescriptor.xsd");
+            streamWriter.writeAttribute("version", "0");*/
+            this.writeKml(kml);
+            writer.writeEndElement();
+            writer.writeEndDocument();
+
+            writer.flush();
+            writer.close();
+
+        } catch (XMLStreamException ex) {
+            Logger.getLogger(KmlWriter.class.getName()).log(Level.SEVERE, null, ex);
+        }
+    }
+
+    private void writeKml(Kml kml) throws XMLStreamException{
+        if (kml.getNetworkLinkControl() != null){
+        }
+        if (kml.getAbstractFeature() != null){
+            this.writeAbstractFeature(kml.getAbstractFeature());
+        }
+        if (kml.getKmlSimpleExtensions() != null){
+        }
+        if (kml.getKmlObjectExtensions() != null){
+        }
+    }
+
+    private void writeCommonAbstractObject(AbstractObject abstractObject) throws XMLStreamException{
+        if (abstractObject.getIdAttributes() != null){
+            this.writeIdAttributes(abstractObject.getIdAttributes());
+        }
+        if (abstractObject.getObjectSimpleExtensions() != null){
+            this.writeSimpleExtensions(abstractObject.getObjectSimpleExtensions());
+        }
+    }
+
+    private void writeIdAttributes(IdAttributes idAttributes) throws XMLStreamException{
+        if(idAttributes.getId() != null){
+            writer.writeAttribute(ATT_ID, idAttributes.getId());
+        }
+        if(idAttributes.getTargetId() != null){
+            writer.writeAttribute(ATT_TARGET_ID, idAttributes.getTargetId());
+        }
+    }
+
+    private void writeAbstractFeature(AbstractFeature abstractFeature) throws XMLStreamException{
+        if (abstractFeature instanceof AbstractContainer){
+            this.writeAbstractContainer((AbstractContainer)abstractFeature);
+//        } else if (abstractFeature instanceof NetworkLink){
+//
+        } else if (abstractFeature instanceof AbstractOverlay){
+            this.writeAbstractOverlay((AbstractOverlay)abstractFeature);
+        } else if (abstractFeature instanceof Placemark){
+            this.writePlacemark((Placemark)abstractFeature);
+        }
+    }
+
+    private void writeCommonAbstractFeature(AbstractFeature abstractFeature) throws XMLStreamException{
+        this.writeCommonAbstractObject(abstractFeature);
+        if (abstractFeature.getName() != null){
+            this.writeName(abstractFeature.getName());
+        }
+        this.writeVisibility(abstractFeature.getVisibility());
+        this.writeOpen(abstractFeature.getOpen());
+//        if (abstractFeature.getAuthor() != null){
+//            this.writeAuthor(abstractFeature.getAuthor(), streamWriter);
+//        }
+//        if (abstractFeature.getLink() != null){
+//            this.writeLink(abstractFeature.getLink(), streamWriter);
+//        }
+        if (abstractFeature.getAddress() != null){
+            this.writeAddress(abstractFeature.getAddress());
+        }
+//        if (abstractFeature.getAddressDetails() != null){
+//            this.writeAddresDetails(abstractFeature.getAddressDetails(), streamWriter);
+//        }
+        if (abstractFeature.getPhoneNumber() != null){
+            this.writePhoneNumber(abstractFeature.getPhoneNumber());
+        }
+        if (abstractFeature.getSnippet() != null){
+            this.writeSnippet(abstractFeature.getSnippet());
+        }
+        if (abstractFeature.getDescription() != null){
+            this.writeDescription(abstractFeature.getDescription());
+        }
+        if (abstractFeature.getView() != null){
+            this.writeAbstractView(abstractFeature.getView());
+        }
+//        if (abstractFeature.getTimePrimitive() != null){
+//            this.writeTimePrimitive(abstractFeature.getTimePrimitive(), streamWriter);
+//        }
+        if (abstractFeature.getStyleUrl() != null){
+            this.writeStyleUrl(abstractFeature.getStyleUrl());
+        }
+        if (abstractFeature.getStyleSelectors() != null){
+            for(AbstractStyleSelector abstractStyleSelector : abstractFeature.getStyleSelectors()){
+                this.writeAbstractStyleSelector(abstractStyleSelector);
+            }
+        }
+        if (abstractFeature.getAbstractFeatureSimpleExtensions() != null){
+            this.writeSimpleExtensions(abstractFeature.getAbstractFeatureSimpleExtensions());
+        }
+        if (abstractFeature.getAbstractFeatureObjectExtensions() != null){
+            this.writeObjectExtensions(abstractFeature.getAbstractFeatureObjectExtensions());
+        }
+    }
+
+    private void writeAbstractView(AbstractView abstractView) throws XMLStreamException{
+        if (abstractView instanceof LookAt){
+                this.writeLookAt((LookAt)abstractView);
+        } else if (abstractView instanceof Camera){
+                this.writeCamera((Camera)abstractView);
+        }
+    }
+
+    private void writeLookAt(LookAt lookAt) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_LOOK_AT);
+        this.writeCommonAbstractView(lookAt);
+        if (lookAt.getLongitude() != null){
+            this.writeLongitude(lookAt.getLongitude());
+        }
+        if (lookAt.getLatitude() != null){
+            this.writeLatitude(lookAt.getLatitude());
+        }
+        if (isFiniteNumber(lookAt.getAltitude())){
+            this.writeAltitude(lookAt.getAltitude());
+        }
+        if (lookAt.getHeading() != null){
+            this.writeHeading(lookAt.getHeading());
+        }
+        if (lookAt.getTilt() != null){
+            this.writeTilt(lookAt.getTilt());
+        }
+        if (isFiniteNumber(lookAt.getRange())){
+            this.writeRange(lookAt.getRange());
+        }
+        if (lookAt.getLookAtSimpleExtensions() != null){
+            this.writeSimpleExtensions(lookAt.getLookAtSimpleExtensions());
+        }
+        if (lookAt.getLookAtObjectExtensions() != null){
+            this.writeObjectExtensions(lookAt.getLookAtObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeCamera(Camera camera){
+
+    }
+
+    private void writeCommonAbstractView(AbstractView abstractView) throws XMLStreamException{
+        this.writeCommonAbstractObject(abstractView);
+        if (abstractView.getAbstractViewSimpleExtensions() != null){
+            this.writeSimpleExtensions(abstractView.getAbstractViewSimpleExtensions());
+        }
+        if (abstractView.getAbstractViewObjectExtensions() != null){
+            this.writeObjectExtensions(abstractView.getAbstractViewObjectExtensions());
+        }
+    }
+
+    private void writeAbstractStyleSelector(AbstractStyleSelector abstractStyleSelector) throws XMLStreamException{
+        if (abstractStyleSelector instanceof Style){
+            this.writeStyle((Style)abstractStyleSelector);
+        } else if (abstractStyleSelector instanceof StyleMap){
+            this.writeStyleMap((StyleMap)abstractStyleSelector);
+        }
+    }
+
+    private void writeCommonAbstractStyleSelector(AbstractStyleSelector abstractStyleSelector) throws XMLStreamException{
+        this.writeCommonAbstractObject(abstractStyleSelector);
+        if (abstractStyleSelector.getAbstractStyleSelectorSimpleExtensions() != null){
+            this.writeSimpleExtensions(abstractStyleSelector.getAbstractStyleSelectorSimpleExtensions());
+        }
+        if (abstractStyleSelector.getAbstractStyleSelectorObjectExtensions() != null){
+            this.writeObjectExtensions(abstractStyleSelector.getAbstractStyleSelectorObjectExtensions());
+        }
+    }
+
+    private void writeStyleMap(StyleMap styleMap) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_STYLE_MAP);
+        this.writeCommonAbstractStyleSelector(styleMap);
+        if (styleMap.getPairs() != null){
+            for(Pair pair : styleMap.getPairs()){
+                this.writePair(pair);
+            }
+        }
+        if (styleMap.getStyleMapSimpleExtensions() != null){
+            this.writeSimpleExtensions(styleMap.getStyleMapSimpleExtensions());
+        }
+        if (styleMap.getStyleMapObjectExtensions() != null){
+            this.writeObjectExtensions(styleMap.getStyleMapObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writePair(Pair pair) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_PAIR);
+        this.writeCommonAbstractObject(pair);
+        if (pair.getKey() != null){
+            this.writeKey(pair.getKey());
+        }
+        if (pair.getStyleUrl() != null){
+            this.writeStyleUrl(pair.getStyleUrl());
+        }
+        if (pair.getAbstractStyleSelector() != null){
+            this.writeAbstractStyleSelector(pair.getAbstractStyleSelector());
+        }
+        if (pair.getPairSimpleExtensions() != null){
+            this.writeSimpleExtensions(pair.getPairSimpleExtensions());
+        }
+        if (pair.getPairObjectExtensions() != null){
+            this.writeObjectExtensions(pair.getPairObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeStyle(Style style) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_STYLE);
+        this.writeCommonAbstractStyleSelector(style);
+        if (style.getIconStyle() != null){
+            this.writeIconStyle(style.getIconStyle());
+        }
+        if (style.getLabelStyle() != null){
+            this.writeLabelStyle(style.getLabelStyle());
+        }
+        if (style.getLineStyle() != null){
+            this.writeLineStyle(style.getLineStyle());
+        }
+        if (style.getPolyStyle() != null){
+            this.writePolyStyle(style.getPolyStyle());
+        }
+        if (style.getBalloonStyle() != null){
+            this.writeBalloonStyle(style.getBalloonStyle());
+        }
+        if (style.getListStyle() != null){
+            this.writeListStyle(style.getListStyle());
+        }
+        if (style.getStyleSimpleExtensions() != null){
+            this.writeSimpleExtensions(style.getStyleSimpleExtensions());
+        }
+        if (style.getStyleObjectExtensions() != null){
+            this.writeObjectExtensions(style.getStyleObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeIconStyle(IconStyle iconStyle) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_ICON_STYLE);
+        this.writeCommonAbstractColorStyle(iconStyle);
+        if (isFiniteNumber(iconStyle.getScale())){
+            this.writeScale(iconStyle.getScale());
+        }
+        if (iconStyle.getHeading() != null){
+            this.writeHeading(iconStyle.getHeading());
+        }
+        if (iconStyle.getIcon() != null){
+            this.writeIcon(iconStyle.getIcon());
+        }
+        if (iconStyle.getHotSpot() != null){
+            this.writeHotSpot(iconStyle.getHotSpot());
+        }
+        if (iconStyle.getIconStyleSimpleExtensions() != null){
+            this.writeSimpleExtensions(iconStyle.getIconStyleSimpleExtensions());
+        }
+        if (iconStyle.getIconStyleObjectExtensions() != null){
+            this.writeObjectExtensions(iconStyle.getIconStyleObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeLabelStyle(LabelStyle labelStyle) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_LABEL_STYLE);
+        this.writeCommonAbstractColorStyle(labelStyle);
+        if (isFiniteNumber(labelStyle.getScale())){
+            this.writeScale(labelStyle.getScale());
+        }
+        if (labelStyle.getLabelStyleSimpleExtensions() != null){
+            this.writeSimpleExtensions(labelStyle.getLabelStyleSimpleExtensions());
+        }
+        if (labelStyle.getLabelStyleObjectExtensions() != null){
+            this.writeObjectExtensions(labelStyle.getLabelStyleObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeLineStyle(LineStyle lineStyle) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_LINE_STYLE);
+        this.writeCommonAbstractColorStyle(lineStyle);
+        if (isFiniteNumber(lineStyle.getWidth())){
+            this.writeWidth(lineStyle.getWidth());
+        }
+        if (lineStyle.getLineStyleSimpleExtensions() != null){
+            this.writeSimpleExtensions(lineStyle.getLineStyleSimpleExtensions());
+        }
+        if (lineStyle.getLineStyleObjectExtensions() != null){
+            this.writeObjectExtensions(lineStyle.getLineStyleObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writePolyStyle(PolyStyle polyStyle) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_POLY_STYLE);
+        this.writeCommonAbstractColorStyle(polyStyle);
+        this.writeFill(polyStyle.getFill());
+        this.writeOutline(polyStyle.getOutline());
+        if (polyStyle.getPolyStyleSimpleExtensions() != null){
+            this.writeSimpleExtensions(polyStyle.getPolyStyleSimpleExtensions());
+        }
+        if (polyStyle.getPolyStyleObjectExtensions() != null){
+            this.writeObjectExtensions(polyStyle.getPolyStyleObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeBalloonStyle(BalloonStyle balloonStyle) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_BALLOON_STYLE);
+        this.writeCommonAbstractSubStyle(balloonStyle);
+        if (balloonStyle.getBgColor() != null){
+            this.writeBgColor(balloonStyle.getBgColor());
+        }
+        if (balloonStyle.getTextColor() != null){
+            this.writeTextColor(balloonStyle.getTextColor());
+        }
+        if (balloonStyle.getText() != null){
+            this.writeText(balloonStyle.getText());
+        }
+        if (balloonStyle.getDisplayMode() != null){
+            this.writeDisplayMode(balloonStyle.getDisplayMode());
+        }
+        if (balloonStyle.getBalloonStyleSimpleExtensions() != null){
+            this.writeSimpleExtensions(balloonStyle.getBalloonStyleSimpleExtensions());
+        }
+        if (balloonStyle.getBalloonStyleObjectExtensions() != null){
+            this.writeObjectExtensions(balloonStyle.getBalloonStyleObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeListStyle(ListStyle listStyle) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_LIST_STYLE);
+        this.writeCommonAbstractSubStyle(listStyle);
+        if (listStyle.getListItem() != null){
+            this.writeListItem(listStyle.getListItem());
+        }
+        if (listStyle.getBgColor() != null){
+            this.writeBgColor(listStyle.getBgColor());
+        }
+        if (listStyle.getItemIcons() != null){
+            for(ItemIcon itemIcon : listStyle.getItemIcons()){
+                this.writeItemIcon(itemIcon);
+            }
+        }
+        if (isFiniteNumber(listStyle.getMaxSnippetLines())){
+            this.writeMaxSnippetLines(listStyle.getMaxSnippetLines());
+        }
+        if (listStyle.getListStyleSimpleExtensions() != null){
+            this.writeSimpleExtensions(listStyle.getListStyleSimpleExtensions());
+        }
+        if (listStyle.getListStyleObjectExtensions() != null){
+            this.writeObjectExtensions(listStyle.getListStyleObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeItemIcon(ItemIcon itemIcon) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_ITEM_ICON);
+        this.writeCommonAbstractObject(itemIcon);
+        if (itemIcon.getStates() != null){
+            this.writeStates(itemIcon.getStates());
+        }
+        if (itemIcon.getHref() != null){
+            this.writeHref(itemIcon.getHref());
+        }
+        if (itemIcon.getItemIconSimpleExtensions() != null){
+            this.writeSimpleExtensions(itemIcon.getItemIconSimpleExtensions());
+        }
+        if (itemIcon.getItemIconObjectExtensions() != null){
+            this.writeObjectExtensions(itemIcon.getItemIconObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeStates(List<ItemIconState> itemIconStates) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_STATE);
+        int i = 0;
+        int size = itemIconStates.size();
+        for(ItemIconState itemIconState : itemIconStates){
+            i++;
+            if(i == size){
+                writer.writeCharacters(itemIconState.getItemIconState());
+            } else {
+                writer.writeCharacters(itemIconState.getItemIconState()+" ");
+            }
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeIcon(BasicLink icon) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_ICON);
+        if (icon.getIdAttributes() != null){
+            this.writeIdAttributes(icon.getIdAttributes());
+        }
+        if (icon.getObjectSimpleExtensions() != null){
+            this.writeSimpleExtensions(icon.getObjectSimpleExtensions());
+        }
+        if (icon.getHref() != null){
+            this.writeHref(icon.getHref());
+        }
+        if (icon.getBasicLinkSimpleExtensions() != null){
+            this.writeSimpleExtensions(icon.getBasicLinkSimpleExtensions());
+        }
+        if (icon.getBasicLinkObjectExtensions() != null){
+            this.writeObjectExtensions(icon.getBasicLinkObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeIcon(Link icon) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_ICON);
+        this.writeLink_structure(icon);
+        writer.writeEndElement();
+    }
+
+    private void writeLink(Link link) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_LINK);
+        this.writeLink_structure(link);
+        writer.writeEndElement();
+    }
+
+    private void writeLink_structure(Link link) throws XMLStreamException{
+        this.writeCommonAbstractObject(link);
+        if (link.getHref() != null){
+            this.writeHref(link.getHref());
+        }
+        if (link.getBasicLinkSimpleExtensions() != null){
+            this.writeSimpleExtensions(link.getBasicLinkSimpleExtensions());
+        }
+        if (link.getBasicLinkObjectExtensions() != null){
+            this.writeObjectExtensions(link.getBasicLinkObjectExtensions());
+        }
+        if (link.getRefreshMode() != null){
+            this.writeRefreshMode(link.getRefreshMode());
+        }
+        if (isFiniteNumber(link.getRefreshInterval())){
+            this.writeRefreshInterval(link.getRefreshInterval());
+        }
+        if (link.getViewRefreshMode() != null){
+            this.writeViewRefreshMode(link.getViewRefreshMode());
+        }
+        if (isFiniteNumber(link.getViewRefreshTime())){
+            this.writeViewRefreshTime(link.getViewRefreshTime());
+        }
+        if (isFiniteNumber(link.getViewBoundScale())){
+            this.writeViewBoundScale(link.getViewBoundScale());
+        }
+        if (link.getViewFormat() != null){
+            this.writeViewFormat(link.getViewFormat());
+        }
+        if (link.getHttpQuery() != null){
+            this.writeHttpQuery(link.getHttpQuery());
+        }
+        if (link.getLinkSimpleExtensions() != null){
+            this.writeSimpleExtensions(link.getLinkSimpleExtensions());
+        }
+        if (link.getLinkObjectExtensions() != null){
+            this.writeObjectExtensions(link.getLinkObjectExtensions());
+        }
+    }
+
+    private void writeCommonAbstractColorStyle(AbstractColorStyle abstractColorStyle) throws XMLStreamException{
+        this.writeCommonAbstractSubStyle(abstractColorStyle);
+        if (abstractColorStyle.getColor() != null){
+            this.writeColor(abstractColorStyle.getColor());
+        }
+        if (abstractColorStyle.getColorMode() != null){
+            this.writeColorMode(abstractColorStyle.getColorMode());
+        }
+        if (abstractColorStyle.getColorStyleSimpleExtensions() != null){
+            this.writeSimpleExtensions(abstractColorStyle.getColorStyleSimpleExtensions());
+        }
+        if (abstractColorStyle.getColorStyleObjectExtensions() != null){
+            this.writeObjectExtensions(abstractColorStyle.getColorStyleObjectExtensions());
+        }
+    }
+
+    private void writeCommonAbstractSubStyle(AbstractSubStyle abstractSubStyle) throws XMLStreamException{
+        this.writeCommonAbstractObject(abstractSubStyle);
+        if (abstractSubStyle.getSubStyleSimpleExtensions() != null){
+            this.writeSimpleExtensions(abstractSubStyle.getSubStyleSimpleExtensions());
+        }
+        if (abstractSubStyle.getSubStyleObjectExtensions() != null){
+            this.writeObjectExtensions(abstractSubStyle.getSubStyleObjectExtensions());
+        }
+    }
+
+    private void writePlacemark(Placemark placemark) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_PLACEMARK);
+        this.writeCommonAbstractFeature(placemark);
+        if (placemark.getAbstractGeometry() != null){
+            this.writeAbstractGeometry(placemark.getAbstractGeometry());
+        }
+        if (placemark.getPlacemarkSimpleExtensions() != null){
+            this.writeSimpleExtensions(placemark.getPlacemarkSimpleExtensions());
+        }
+        if (placemark.getPlacemarkObjectExtensions() != null){
+            this.writeObjectExtensions(placemark.getPlacemarkObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeAbstractContainer(AbstractContainer abstractContainer) throws XMLStreamException{
+        if (abstractContainer instanceof Folder){
+            this.writeFolder((Folder)abstractContainer);
+        } else if (abstractContainer instanceof Document){
+            this.writeDocument((Document)abstractContainer);
+        }
+    }
+    
+    private void writeAbstractOverlay(AbstractOverlay abstractOverlay) throws XMLStreamException{
+        if (abstractOverlay instanceof GroundOverlay){
+            this.writeGroundOverlay((GroundOverlay)abstractOverlay);
+        } else if (abstractOverlay instanceof ScreenOverlay){
+            this.writeScreenOverlay((ScreenOverlay)abstractOverlay);
+        } else if (abstractOverlay instanceof PhotoOverlay){
+            //this.writePhotoOverlay((PhotoOverlay)abstractOverlay);
+        }
+    }
+
+    private void writeScreenOverlay(ScreenOverlay screenOverlay) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_SCREEN_OVERLAY);
+        this.writeCommonAbstractOverlay(screenOverlay);
+        if (screenOverlay.getOverlayXY() != null){
+            this.writeOverlayXY(screenOverlay.getOverlayXY());
+        }
+        if (screenOverlay.getScreenXY() != null){
+            this.writeScreenXY(screenOverlay.getScreenXY());
+        }
+        if (screenOverlay.getRotationXY() != null){
+            this.writeRotationXY(screenOverlay.getRotationXY());
+        }
+        if (screenOverlay.getSize() != null){
+            this.writeSize(screenOverlay.getSize());
+        }
+        if (screenOverlay.getRotation() != null){
+            this.writeRotation(screenOverlay.getRotation());
+        }
+        if (screenOverlay.getScreenOverlaySimpleExtensions() != null){
+            this.writeSimpleExtensions(screenOverlay.getScreenOverlaySimpleExtensions());
+        }
+        if (screenOverlay.getScreenOverlayObjectExtensions() != null){
+            this.writeObjectExtensions(screenOverlay.getScreenOverlayObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+    
+    private void writeGroundOverlay(GroundOverlay groundOverlay) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_GROUND_OVERLAY);
+        this.writeCommonAbstractOverlay(groundOverlay);
+        if (isFiniteNumber(groundOverlay.getAltitude())){
+            this.writeAltitude(groundOverlay.getAltitude());
+        }
+        if (groundOverlay.getAltitudeMode() != null){
+            this.writeAltitudeMode(groundOverlay.getAltitudeMode());
+        }
+        if (groundOverlay.getLatLonBox() != null){
+            this.writeLatLonBox(groundOverlay.getLatLonBox());
+        }
+        if (groundOverlay.getGroundOverlaySimpleExtensions() != null){
+            this.writeSimpleExtensions(groundOverlay.getGroundOverlaySimpleExtensions());
+        }
+        if (groundOverlay.getGroundOverlayObjectExtensions() != null){
+            this.writeObjectExtensions(groundOverlay.getGroundOverlayObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeLatLonBox(LatLonBox latLonBox) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_LAT_LON_BOX);
+        this.writeCommonAbstractLatLonBox(latLonBox);
+        if (latLonBox.getRotation() != null){
+            this.writeRotation(latLonBox.getRotation());
+        }
+        if (latLonBox.getLatLonBoxSimpleExtensions() != null){
+            this.writeSimpleExtensions(latLonBox.getLatLonBoxSimpleExtensions());
+        }
+        if (latLonBox.getLatLonBoxObjectExtensions() != null){
+            this.writeObjectExtensions(latLonBox.getLatLonBoxObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeCommonAbstractLatLonBox(AbstractLatLonBox abstractLatLonBox) throws XMLStreamException{
+        this.writeCommonAbstractObject(abstractLatLonBox);
+        if (abstractLatLonBox.getNorth() != null){
+            this.writeNorth(abstractLatLonBox.getNorth());
+        }
+        if (abstractLatLonBox.getSouth() != null){
+            this.writeSouth(abstractLatLonBox.getSouth());
+        }
+        if (abstractLatLonBox.getEast() != null){
+            this.writeEast(abstractLatLonBox.getEast());
+        }
+        if (abstractLatLonBox.getWest() != null){
+            this.writeWest(abstractLatLonBox.getWest());
+        }
+        if (abstractLatLonBox.getAbstractLatLonBoxSimpleExtensions() != null){
+            this.writeSimpleExtensions(abstractLatLonBox.getAbstractLatLonBoxSimpleExtensions());
+        }
+        if (abstractLatLonBox.getAbstractLatLonBoxObjectExtensions() != null){
+            this.writeObjectExtensions(abstractLatLonBox.getAbstractLatLonBoxObjectExtensions());
+        }
+    }
+    
+    private void writeCommonAbstractOverlay(AbstractOverlay abstractOverlay) throws XMLStreamException{
+        this.writeCommonAbstractFeature(abstractOverlay);
+        if (abstractOverlay.getColor() != null){
+            this.writeColor(abstractOverlay.getColor());
+        }
+        if (isFiniteNumber(abstractOverlay.getDrawOrder())){
+            this.writeDrawOrder(abstractOverlay.getDrawOrder());
+        }
+        if (abstractOverlay.getIcon() != null){
+            this.writeIcon(abstractOverlay.getIcon());
+        }
+        if (abstractOverlay.getAbstractOverlaySimpleExtensions() != null){
+            this.writeSimpleExtensions(abstractOverlay.getAbstractOverlaySimpleExtensions());
+        }
+        if (abstractOverlay.getAbstractOverlayObjectExtensions() != null){
+            this.writeObjectExtensions(abstractOverlay.getAbstractOverlayObjectExtensions());
+        }
+    }
+
+    private void writeCommonAbstractContainer(AbstractContainer abstractContainer) throws XMLStreamException{
+        this.writeCommonAbstractFeature(abstractContainer);
+        if (abstractContainer.getAbstractContainerSimpleExtensions() != null){
+            this.writeSimpleExtensions(abstractContainer.getAbstractContainerSimpleExtensions());
+        }
+        if (abstractContainer.getAbstractContainerObjectExtensions() != null){
+            this.writeObjectExtensions(abstractContainer.getAbstractContainerObjectExtensions());
+        }
+    }
+
+    /**
+     * Writes a folder element
+     * @param folder The element to write
+     * @throws XMLStreamException
+     */
+    private void writeFolder(Folder folder) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_FOLDER);
+        this.writeCommonAbstractContainer(folder);
+
+        if (folder.getAbstractFeatures() != null){
+            for(AbstractFeature abstractFeature : folder.getAbstractFeatures()){
+                this.writeAbstractFeature(abstractFeature);
+            }
+        }
+        if (folder.getFolderSimpleExtensions() != null){
+            this.writeSimpleExtensions(folder.getFolderSimpleExtensions());
+        }
+        if (folder.getFolderObjectExtensions() != null){
+            this.writeObjectExtensions(folder.getFolderObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    /**
+     * Writes a document element
+     * @param document The element to write
+     * @throws XMLStreamException
+     */
+    private void writeDocument(Document document) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_DOCUMENT);
+        this.writeCommonAbstractContainer(document);
+
+        if (document.getSchemas() != null){
+            for(Schema schema : document.getSchemas()){
+                this.writeSchema(schema);
+            }
+        }
+        if (document.getAbstractFeatures() != null){
+            for(AbstractFeature abstractFeature : document.getAbstractFeatures()){
+                this.writeAbstractFeature(abstractFeature);
+            }
+        }
+        if (document.getDocumentSimpleExtensions() != null){
+            this.writeSimpleExtensions(document.getDocumentSimpleExtensions());
+        }
+        if (document.getDocumentObjectExtensions() != null){
+            this.writeObjectExtensions(document.getDocumentObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeSchema(Schema schema){
+        
+    }
+
+    private void writeAbstractGeometry(AbstractGeometry abstractGeometry) throws XMLStreamException{
+        if (abstractGeometry instanceof MultiGeometry){
+            this.writeMultiGeometry((MultiGeometry) abstractGeometry);
+        } else if (abstractGeometry instanceof LineString){
+            this.writeLineString((LineString) abstractGeometry);
+        } else if (abstractGeometry instanceof Polygon){
+            this.writePolygon((Polygon) abstractGeometry);
+        } else if (abstractGeometry instanceof Point){
+            this.writePoint((Point) abstractGeometry);
+        } else if (abstractGeometry instanceof LinearRing){
+            this.writeLinearRing((LinearRing) abstractGeometry);
+        } else if (abstractGeometry instanceof Model){
+            this.writeModel((Model) abstractGeometry);
+        }
+    }
+
+    private void writeCommonAbstractGeometry(AbstractGeometry abstractGeometry) throws XMLStreamException{
+        this.writeCommonAbstractObject(abstractGeometry);
+        if (abstractGeometry.getAbstractGeometrySimpleExtensions() != null){
+            this.writeSimpleExtensions(abstractGeometry.getAbstractGeometrySimpleExtensions());
+        }
+        if (abstractGeometry.getAbstractGeometryObjectExtensions() != null){
+            this.writeObjectExtensions(abstractGeometry.getAbstractGeometryObjectExtensions());
+        }
+    }
+
+    private void writeModel(Model model) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_MODEL);
+        this.writeCommonAbstractGeometry(model);
+        if (model.getAltitudeMode() != null){
+            this.writeAltitudeMode(model.getAltitudeMode());
+        }
+        if (model.getLocation() != null){
+            this.writeLocation(model.getLocation());
+        }
+        if (model.getOrientation() != null){
+            this.writeOrientation(model.getOrientation());
+        }
+        if (model.getScale() != null){
+            this.writeScale(model.getScale());
+        }
+        if (model.getLink() != null){
+            this.writeLink(model.getLink());
+        }
+        if (model.getRessourceMap() != null){
+            this.writeResourceMap(model.getRessourceMap());
+        }
+        if (model.getModelSimpleExtensions() != null){
+            this.writeSimpleExtensions(model.getModelSimpleExtensions());
+        }
+        if (model.getModelObjectExtensions() != null){
+            this.writeObjectExtensions(model.getModelObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeLocation(Location location){
+
+    }
+
+    private void writeOrientation(Orientation orientation){
+
+    }
+
+    private void writeScale(Scale scale){
+
+    }
+
+    private void writeResourceMap(ResourceMap resourceMap){
+
+    }
+
+    private void writePolygon(Polygon polygon) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_POLYGON);
+        this.writeCommonAbstractGeometry(polygon);
+        this.writeExtrude(polygon.getExtrude());
+        this.writeTessellate(polygon.getTessellate());
+        if (polygon.getAltitudeMode() != null){
+            this.writeAltitudeMode(polygon.getAltitudeMode());
+        }
+        if (polygon.getOuterBoundaryIs() != null){
+            this.writeOuterBoundaryIs(polygon.getOuterBoundaryIs());
+        }
+        if (polygon.getInnerBoundariesAre() != null){
+            for(Boundary innerBoundaryIs : polygon.getInnerBoundariesAre()){
+                this.writeInnerBoundaryIs(innerBoundaryIs);
+            }
+        }
+        if (polygon.getPolygonSimpleExtensions() != null){
+            this.writeSimpleExtensions(polygon.getPolygonSimpleExtensions());
+        }
+        if (polygon.getPolygonObjectExtensions() != null){
+            this.writeObjectExtensions(polygon.getPolygonObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeOuterBoundaryIs(Boundary boundary) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_OUTER_BOUNDARY_IS);
+        this.writeBoundary(boundary);
+        writer.writeEndElement();
+    }
+    
+    private void writeInnerBoundaryIs(Boundary boundary) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_INNER_BOUNDARY_IS);
+        this.writeBoundary(boundary);
+        writer.writeEndElement();
+    }
+
+    private void writeBoundary(Boundary boundary) throws XMLStreamException{
+        if (boundary.getLinearRing() != null){
+            this.writeLinearRing(boundary.getLinearRing());
+        }
+        if (boundary.getBoundarySimpleExtensions() != null){
+            this.writeSimpleExtensions(boundary.getBoundarySimpleExtensions());
+        }
+        if (boundary.getBoundaryObjectExtensions() != null){
+            this.writeObjectExtensions(boundary.getBoundaryObjectExtensions());
+        }
+    }
+
+    private void writeLineString(LineString lineString) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_LINE_STRING);
+        this.writeCommonAbstractGeometry(lineString);
+        this.writeExtrude(lineString.getExtrude());
+        this.writeTessellate(lineString.getTessellate());
+        if (lineString.getAltitudeMode() != null){
+            this.writeAltitudeMode(lineString.getAltitudeMode());
+        }
+        if (lineString.getCoordinates() != null){
+            this.writeCoordinates(lineString.getCoordinates());
+        }
+        if (lineString.getLineStringSimpleExtensions() != null){
+            this.writeSimpleExtensions(lineString.getLineStringSimpleExtensions());
+        }
+        if (lineString.getLineStringObjectExtensions() != null){
+            this.writeObjectExtensions(lineString.getLineStringObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeLinearRing(LinearRing linearRing) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_LINEAR_RING);
+        this.writeCommonAbstractGeometry(linearRing);
+        this.writeExtrude(linearRing.getExtrude());
+        this.writeTessellate(linearRing.getTessellate());
+        if (linearRing.getAltitudeMode() != null){
+            this.writeAltitudeMode(linearRing.getAltitudeMode());
+        }
+        if (linearRing.getCoordinates() != null){
+            this.writeCoordinates(linearRing.getCoordinates());
+        }
+        if (linearRing.getLinearRingSimpleExtensions() != null){
+            this.writeSimpleExtensions(linearRing.getLinearRingSimpleExtensions());
+        }
+        if (linearRing.getLinearRingObjectExtensions() != null){
+            this.writeObjectExtensions(linearRing.getLinearRingObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeMultiGeometry(MultiGeometry multiGeometry) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_MULTI_GEOMETRY);
+        this.writeCommonAbstractGeometry(multiGeometry);
+        if (multiGeometry.getGeometries() != null){
+            for (AbstractGeometry abstractGeometry : multiGeometry.getGeometries()){
+                this.writeAbstractGeometry(abstractGeometry);
+            }
+        }
+        if (multiGeometry.getMultiGeometrySimpleExtensions() != null){
+            this.writeSimpleExtensions(multiGeometry.getMultiGeometrySimpleExtensions());
+        }
+        if (multiGeometry.getMultiGeometryObjectExtensions() != null){
+            this.writeObjectExtensions(multiGeometry.getMultiGeometryObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writePoint(Point point) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_POINT);
+        this.writeCommonAbstractGeometry(point);
+        this.writeExtrude(point.getExtrude());
+        if (point.getAltitudeMode() != null){
+            this.writeAltitudeMode(point.getAltitudeMode());
+        }
+        if (point.getCoordinates() != null){
+            this.writeCoordinates(point.getCoordinates());
+        }
+        if (point.getPointSimpleExtensions() != null){
+            this.writeSimpleExtensions(point.getPointSimpleExtensions());
+        }
+        if (point.getPointObjectExtensions() != null){
+            this.writeObjectExtensions(point.getPointObjectExtensions());
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeCoordinates(Coordinates coordinates) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_COORDINATES);
+        writer.writeCharacters(coordinates.getCoordinatesString());
+        writer.writeEndElement();
+    }
+
+    private void writeExtrude(boolean extrude) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_EXTRUDE);
+        if(extrude){
+            writer.writeCharacters(SimpleType.BOOLEAN_TRUE);
+        } else {
+            writer.writeCharacters(SimpleType.BOOLEAN_FALSE);
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeVisibility(boolean visibility) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_VISIBILITY);
+        if(visibility){
+            writer.writeCharacters(SimpleType.BOOLEAN_TRUE);
+        } else {
+            writer.writeCharacters(SimpleType.BOOLEAN_FALSE);
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeOpen(boolean open) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_OPEN);
+        if(open){
+            writer.writeCharacters(SimpleType.BOOLEAN_TRUE);
+        } else {
+            writer.writeCharacters(SimpleType.BOOLEAN_FALSE);
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeFill(boolean fill) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_FILL);
+        if(fill){
+            writer.writeCharacters(SimpleType.BOOLEAN_TRUE);
+        } else {
+            writer.writeCharacters(SimpleType.BOOLEAN_FALSE);
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeOutline(boolean outline) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_OUTLINE);
+        if(outline){
+            writer.writeCharacters(SimpleType.BOOLEAN_TRUE);
+        } else {
+            writer.writeCharacters(SimpleType.BOOLEAN_FALSE);
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeTessellate(boolean tessellate) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_TESSELLATE);
+        if(tessellate){
+            writer.writeCharacters(SimpleType.BOOLEAN_TRUE);
+        } else {
+            writer.writeCharacters(SimpleType.BOOLEAN_FALSE);
+        }
+        writer.writeEndElement();
+    }
+
+    private void writeAddress(String address) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_ADDRESS);
+        writer.writeCharacters(address);
+        writer.writeEndElement();
+    }
+
+    private void writeSnippet(String snippet) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_SNIPPET);
+        writer.writeCharacters(snippet);
+        writer.writeEndElement();
+    }
+
+    private void writePhoneNumber(String phoneNumber) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_PHONE_NUMBER);
+        writer.writeCharacters(phoneNumber);
+        writer.writeEndElement();
+    }
+
+    private void writeName(String name) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_NAME);
+        writer.writeCharacters(name);
+        writer.writeEndElement();
+    }
+
+    private void writeDescription(String description) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_DESCRIPTION);
+        writer.writeCharacters(description);
+        writer.writeEndElement();
+    }
+
+    private void writeHref(String href) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_HREF);
+        writer.writeCharacters(href);
+        writer.writeEndElement();
+    }
+
+    private void writeText(String text) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_TEXT);
+        writer.writeCharacters(text);
+        writer.writeEndElement();
+    }
+
+    private void writeStyleUrl(String text) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_STYLE_URL);
+        writer.writeCharacters(text);
+        writer.writeEndElement();
+    }
+
+    private void writeViewFormat(String viewFormat) throws XMLStreamException {
+        writer.writeStartElement(URI_KML, TAG_VIEW_FORMAT);
+        writer.writeCharacters(viewFormat);
+        writer.writeEndElement();
+    }
+
+    private void writeHttpQuery(String httpQuery) throws XMLStreamException {
+        writer.writeStartElement(URI_KML, TAG_HTTP_QUERY);
+        writer.writeCharacters(httpQuery);
+        writer.writeEndElement();
+    }
+
+    private void writeColor(Color color) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_COLOR);
+        writer.writeCharacters(color.getColor());
+        writer.writeEndElement();
+    }
+
+    private void writeBgColor(Color color) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_BG_COLOR);
+        writer.writeCharacters(color.getColor());
+        writer.writeEndElement();
+    }
+
+    private void writeTextColor(Color color) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_TEXT_COLOR);
+        writer.writeCharacters(color.getColor());
+        writer.writeEndElement();
+    }
+
+    private void writeColorMode(ColorMode colorMode) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_COLOR_MODE);
+        writer.writeCharacters(colorMode.getColorMode());
+        writer.writeEndElement();
+    }
+
+    private void writeAltitudeMode(AltitudeMode altitudeMode) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_ALTITUDE_MODE);
+        writer.writeCharacters(altitudeMode.getAltitudeMode());
+        writer.writeEndElement();
+    }
+
+    private void writeDisplayMode(DisplayMode displayMode) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_ALTITUDE_MODE);
+        writer.writeCharacters(displayMode.getDisplayMode());
+        writer.writeEndElement();
+    }
+
+    private void writeKey(StyleState styleState) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_KEY);
+        writer.writeCharacters(styleState.getStyleState());
+        writer.writeEndElement();
+    }
+
+    private void writeRefreshMode(RefreshMode refreshMode) throws XMLStreamException {
+        writer.writeStartElement(URI_KML, TAG_REFRESH_MODE);
+        writer.writeCharacters(refreshMode.getRefreshMode());
+        writer.writeEndElement();
+    }
+
+    private void writeViewRefreshMode(ViewRefreshMode viewRefreshMode) throws XMLStreamException {
+        writer.writeStartElement(URI_KML, TAG_VIEW_REFRESH_MODE);
+        writer.writeCharacters(viewRefreshMode.getViewRefreshMode());
+        writer.writeEndElement();
+    }
+
+    private void writeListItem(ListItem listItem) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_LIST_ITEM);
+        writer.writeCharacters(listItem.getItem());
+        writer.writeEndElement();
+    }
+
+    private void writeScale(double scale) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_SCALE);
+        writer.writeCharacters(Double.toString(scale));
+        writer.writeEndElement();
+    }
+
+    private void writeWidth(double width) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_WIDTH);
+        writer.writeCharacters(Double.toString(width));
+        writer.writeEndElement();
+    }
+
+    private void writeAltitude(double altitude) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_ALTITUDE);
+        writer.writeCharacters(Double.toString(altitude));
+        writer.writeEndElement();
+    }
+
+    private void writeRange(double range) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_RANGE);
+        writer.writeCharacters(Double.toString(range));
+        writer.writeEndElement();
+    }
+
+    private void writeDrawOrder(double drawOrder) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_DRAW_ORDER);
+        writer.writeCharacters(Double.toString(drawOrder));
+        writer.writeEndElement();
+    }
+
+    private void writeRefreshInterval(double refreshInterval) throws XMLStreamException {
+        writer.writeStartElement(URI_KML, TAG_REFRESH_INTERVAL);
+        writer.writeCharacters(Double.toString(refreshInterval));
+        writer.writeEndElement();
+    }
+
+    private void writeViewRefreshTime(double viewRefreshTime) throws XMLStreamException {
+        writer.writeStartElement(URI_KML, TAG_VIEW_REFRESH_TIME);
+        writer.writeCharacters(Double.toString(viewRefreshTime));
+        writer.writeEndElement();
+    }
+
+    private void writeViewBoundScale(double viewBoundScale) throws XMLStreamException {
+        writer.writeStartElement(URI_KML, TAG_VIEW_BOUND_SCALE);
+        writer.writeCharacters(Double.toString(viewBoundScale));
+        writer.writeEndElement();
+    }
+
+    private void writeMaxSnippetLines(int msl) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_MAX_SNIPPET_LINES);
+        writer.writeCharacters(Integer.toString(msl));
+        writer.writeEndElement();
+    }
+
+    private void writeHeading(Angle360 heading) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_HEADING);
+        writer.writeCharacters(Double.toString(heading.getAngle()));
+        writer.writeEndElement();
+    }
+
+    private void writeLongitude(Angle180 longitude) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_LONGITUDE);
+        writer.writeCharacters(Double.toString(longitude.getAngle()));
+        writer.writeEndElement();
+    }
+
+    private void writeLatitude(Angle90 latitude) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_LATITUDE);
+        writer.writeCharacters(Double.toString(latitude.getAngle()));
+        writer.writeEndElement();
+    }
+
+    private void writeTilt(Anglepos180 tilt) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_TILT);
+        writer.writeCharacters(Double.toString(tilt.getAngle()));
+        writer.writeEndElement();
+    }
+
+    private void writeRotation(Angle180 rotation) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_ROTATION);
+        writer.writeCharacters(Double.toString(rotation.getAngle()));
+        writer.writeEndElement();
+    }
+
+    private void writeNorth(Angle180 north) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_NORTH);
+        writer.writeCharacters(Double.toString(north.getAngle()));
+        writer.writeEndElement();
+    }
+
+    private void writeSouth(Angle180 south) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_SOUTH);
+        writer.writeCharacters(Double.toString(south.getAngle()));
+        writer.writeEndElement();
+    }
+
+    private void writeEast(Angle180 east) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_EAST);
+        writer.writeCharacters(Double.toString(east.getAngle()));
+        writer.writeEndElement();
+    }
+
+    private void writeWest(Angle180 west) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_WEST);
+        writer.writeCharacters(Double.toString(west.getAngle()));
+        writer.writeEndElement();
+    }
+
+    private void writeVec2(Vec2 vec2) throws XMLStreamException{
+        if (isFiniteNumber(vec2.getX())){
+            writer.writeAttribute(ATT_X, Double.toString(vec2.getX()));
+        }
+        if (isFiniteNumber(vec2.getY())){
+            writer.writeAttribute(ATT_Y, Double.toString(vec2.getY()));
+        }
+        if (vec2.getXUnits() != null){
+            writer.writeAttribute(ATT_XUNITS, vec2.getXUnits().getUnit());
+        }
+        if (vec2.getYUnits() != null){
+            writer.writeAttribute(ATT_YUNITS, vec2.getYUnits().getUnit());
+        }
+    }
+
+    private void writeHotSpot(Vec2 hotspot) throws XMLStreamException{
+        writer.writeStartElement(URI_KML, TAG_HOT_SPOT);
+        this.writeVec2(hotspot);
+        writer.writeEndElement();
+    }
+
+
+    private void writeOverlayXY(Vec2 overlayXY) throws XMLStreamException {
+        writer.writeStartElement(URI_KML, TAG_OVERLAY_XY);
+        this.writeVec2(overlayXY);
+        writer.writeEndElement();
+    }
+
+    private void writeScreenXY(Vec2 screenXY) throws XMLStreamException {
+        writer.writeStartElement(URI_KML, TAG_SCREEN_XY);
+        this.writeVec2(screenXY);
+        writer.writeEndElement();
+    }
+
+    private void writeRotationXY(Vec2 rotationXY) throws XMLStreamException {
+        writer.writeStartElement(URI_KML, TAG_ROTATION_XY);
+        this.writeVec2(rotationXY);
+        writer.writeEndElement();
+    }
+
+    private void writeSize(Vec2 size) throws XMLStreamException {
+        writer.writeStartElement(URI_KML, TAG_SIZE);
+        this.writeVec2(size);
+        writer.writeEndElement();
+    }
+
+    private void writeSimpleExtensions(List<SimpleType> simpleExtensions){
+
+    }
+
+    private void writeObjectExtensions(List<AbstractObject> objectExtensions){
+
+    }
+
+    /*
+     * METHODES UTILITAIRES
+     */
+    private static boolean isFiniteNumber(double d){
+        return !(Double.isInfinite(d) && Double.isNaN(d));
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/input1.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/input1.xml	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+    Document   : input1.xml
+    Created on : 11 mai 2010, 10:29
+    Author     : samuel
+    Description:
+        Purpose of the document follows.
+-->
+
+<kml xmlns="http://www.opengis.net/kml/2.2">
+  <Placemark>
+    <name>Simple placemark</name>
+    <description>Attached to the ground. Intelligently places itself
+       at the height of the underlying terrain.</description>
+    <Point>
+      <coordinates>-122.0822035425683,37.42228990140251,0</coordinates>
+    </Point>
+  </Placemark>
+</kml>
\ No newline at end of file
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/input2.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/input2.xml	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,915 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<kml xmlns="http://www.opengis.net/kml/2.2">
+  <Document>
+    <name>KML Samples</name>
+    <open>1</open>
+    <description>Unleash your creativity with the help of these examples!</description>
+    <Style id="downArrowIcon">
+      <IconStyle>
+        <Icon>
+          <href>http://maps.google.com/mapfiles/kml/pal4/icon28.png</href>
+        </Icon>
+      </IconStyle>
+    </Style>
+    <Style id="globeIcon">
+      <IconStyle>
+        <Icon>
+          <href>http://maps.google.com/mapfiles/kml/pal3/icon19.png</href>
+        </Icon>
+      </IconStyle>
+      <LineStyle>
+        <width>2</width>
+      </LineStyle>
+    </Style>
+    <Style id="transPurpleLineGreenPoly">
+      <LineStyle>
+        <color>7fff00ff</color>
+        <width>4</width>
+      </LineStyle>
+      <PolyStyle>
+        <color>7f00ff00</color>
+      </PolyStyle>
+    </Style>
+    <Style id="yellowLineGreenPoly">
+      <LineStyle>
+        <color>7f00ffff</color>
+        <width>4</width>
+      </LineStyle>
+      <PolyStyle>
+        <color>7f00ff00</color>
+      </PolyStyle>
+    </Style>
+    <Style id="thickBlackLine">
+      <LineStyle>
+        <color>87000000</color>
+        <width>10</width>
+      </LineStyle>
+    </Style>
+    <Style id="redLineBluePoly">
+      <LineStyle>
+        <color>ff0000ff</color>
+      </LineStyle>
+      <PolyStyle>
+        <color>ffff0000</color>
+      </PolyStyle>
+    </Style>
+    <Style id="blueLineRedPoly">
+      <LineStyle>
+        <color>ffff0000</color>
+      </LineStyle>
+      <PolyStyle>
+        <color>ff0000ff</color>
+      </PolyStyle>
+    </Style>
+    <Style id="transRedPoly">
+      <LineStyle>
+        <width>1.5</width>
+      </LineStyle>
+      <PolyStyle>
+        <color>7d0000ff</color>
+      </PolyStyle>
+    </Style>
+    <Style id="transBluePoly">
+      <LineStyle>
+        <width>1.5</width>
+      </LineStyle>
+      <PolyStyle>
+        <color>7dff0000</color>
+      </PolyStyle>
+    </Style>
+    <Style id="transGreenPoly">
+      <LineStyle>
+        <width>1.5</width>
+      </LineStyle>
+      <PolyStyle>
+        <color>7d00ff00</color>
+      </PolyStyle>
+    </Style>
+    <Style id="transYellowPoly">
+      <LineStyle>
+        <width>1.5</width>
+      </LineStyle>
+      <PolyStyle>
+        <color>7d00ffff</color>
+      </PolyStyle>
+    </Style>
+    <Style id="noDrivingDirections">
+      <BalloonStyle>
+        <text><![CDATA[
+          <b>$[name]</b>
+          <br /><br />
+          $[description]
+        ]]></text>
+      </BalloonStyle>
+    </Style>
+    <Folder>
+      <name>Placemarks</name>
+      <description>These are just some of the different kinds of placemarks with
+        which you can mark your favorite places</description>
+      <LookAt>
+        <longitude>-122.0839597145766</longitude>
+        <latitude>37.42222904525232</latitude>
+        <altitude>0</altitude>
+        <heading>-148.4122922628044</heading>
+        <tilt>40.5575073395506</tilt>
+        <range>500.6566641072245</range>
+      </LookAt>
+      <Placemark>
+        <name>Simple placemark</name>
+        <description>Attached to the ground. Intelligently places itself at the
+          height of the underlying terrain.</description>
+        <Point>
+          <coordinates>-122.0822035425683,37.42228990140251,0</coordinates>
+        </Point>
+      </Placemark>
+      <Placemark>
+        <name>Floating placemark</name>
+        <visibility>0</visibility>
+        <description>Floats a defined distance above the ground.</description>
+        <LookAt>
+          <longitude>-122.0839597145766</longitude>
+          <latitude>37.42222904525232</latitude>
+          <altitude>0</altitude>
+          <heading>-148.4122922628044</heading>
+          <tilt>40.5575073395506</tilt>
+          <range>500.6566641072245</range>
+        </LookAt>
+        <styleUrl>#downArrowIcon</styleUrl>
+        <Point>
+          <altitudeMode>relativeToGround</altitudeMode>
+          <coordinates>-122.084075,37.4220033612141,50</coordinates>
+        </Point>
+      </Placemark>
+      <Placemark>
+        <name>Extruded placemark</name>
+        <visibility>0</visibility>
+        <description>Tethered to the ground by a customizable
+          &quot;tail&quot;</description>
+        <LookAt>
+          <longitude>-122.0845787421525</longitude>
+          <latitude>37.42215078737763</latitude>
+          <altitude>0</altitude>
+          <heading>-148.4126684946234</heading>
+          <tilt>40.55750733918048</tilt>
+          <range>365.2646606980322</range>
+        </LookAt>
+        <styleUrl>#globeIcon</styleUrl>
+        <Point>
+          <extrude>1</extrude>
+          <altitudeMode>relativeToGround</altitudeMode>
+          <coordinates>-122.0857667006183,37.42156927867553,50</coordinates>
+        </Point>
+      </Placemark>
+    </Folder>
+    <Folder>
+      <name>Styles and Markup</name>
+      <visibility>0</visibility>
+      <description>With KML it is easy to create rich, descriptive markup to
+        annotate and enrich your placemarks</description>
+      <LookAt>
+        <longitude>-122.0845787422371</longitude>
+        <latitude>37.42215078726837</latitude>
+        <altitude>0</altitude>
+        <heading>-148.4126777488172</heading>
+        <tilt>40.55750733930874</tilt>
+        <range>365.2646826292919</range>
+      </LookAt>
+      <styleUrl>#noDrivingDirections</styleUrl>
+      <Document>
+        <name>Highlighted Icon</name>
+        <visibility>0</visibility>
+        <description>Place your mouse over the icon to see it display the new
+          icon</description>
+        <LookAt>
+          <longitude>-122.0856552124024</longitude>
+          <latitude>37.4224281311035</latitude>
+          <altitude>0</altitude>
+          <heading>0</heading>
+          <tilt>0</tilt>
+          <range>265.8520424250024</range>
+        </LookAt>
+        <Style id="highlightPlacemark">
+          <IconStyle>
+            <Icon>
+              <href>http://maps.google.com/mapfiles/kml/paddle/red-stars.png</href>
+            </Icon>
+          </IconStyle>
+        </Style>
+        <Style id="normalPlacemark">
+          <IconStyle>
+            <Icon>
+              <href>http://maps.google.com/mapfiles/kml/paddle/wht-blank.png</href>
+            </Icon>
+          </IconStyle>
+        </Style>
+        <StyleMap id="exampleStyleMap">
+          <Pair>
+            <key>normal</key>
+            <styleUrl>#normalPlacemark</styleUrl>
+          </Pair>
+          <Pair>
+            <key>highlight</key>
+            <styleUrl>#highlightPlacemark</styleUrl>
+          </Pair>
+        </StyleMap>
+        <Placemark>
+          <name>Roll over this icon</name>
+          <visibility>0</visibility>
+          <styleUrl>#exampleStyleMap</styleUrl>
+          <Point>
+            <coordinates>-122.0856545755255,37.42243077405461,0</coordinates>
+          </Point>
+        </Placemark>
+      </Document>
+      <Placemark>
+        <name>Descriptive HTML</name>
+        <visibility>0</visibility>
+        <description><![CDATA[Click on the blue link!<br><br>
+Placemark descriptions can be enriched by using many standard HTML tags.<br>
+For example:
+<hr>
+Styles:<br>
+<i>Italics</i>,
+<b>Bold</b>,
+<u>Underlined</u>,
+<s>Strike Out</s>,
+subscript<sub>subscript</sub>,
+superscript<sup>superscript</sup>,
+<big>Big</big>,
+<small>Small</small>,
+<tt>Typewriter</tt>,
+<em>Emphasized</em>,
+<strong>Strong</strong>,
+<code>Code</code>
+<hr>
+Fonts:<br>
+<font color="red">red by name</font>,
+<font color="#408010">leaf green by hexadecimal RGB</font>
+<br>
+<font size=1>size 1</font>,
+<font size=2>size 2</font>,
+<font size=3>size 3</font>,
+<font size=4>size 4</font>,
+<font size=5>size 5</font>,
+<font size=6>size 6</font>,
+<font size=7>size 7</font>
+<br>
+<font face=times>Times</font>,
+<font face=verdana>Verdana</font>,
+<font face=arial>Arial</font><br>
+<hr>
+Links:
+<br>
+<a href="http://earth.google.com/">Google Earth!</a>
+<br>
+ or:  Check out our website at www.google.com
+<hr>
+Alignment:<br>
+<p align=left>left</p>
+<p align=center>center</p>
+<p align=right>right</p>
+<hr>
+Ordered Lists:<br>
+<ol><li>First</li><li>Second</li><li>Third</li></ol>
+<ol type="a"><li>First</li><li>Second</li><li>Third</li></ol>
+<ol type="A"><li>First</li><li>Second</li><li>Third</li></ol>
+<hr>
+Unordered Lists:<br>
+<ul><li>A</li><li>B</li><li>C</li></ul>
+<ul type="circle"><li>A</li><li>B</li><li>C</li></ul>
+<ul type="square"><li>A</li><li>B</li><li>C</li></ul>
+<hr>
+Definitions:<br>
+<dl>
+<dt>Google:</dt><dd>The best thing since sliced bread</dd>
+</dl>
+<hr>
+Centered:<br><center>
+Time present and time past<br>
+Are both perhaps present in time future,<br>
+And time future contained in time past.<br>
+If all time is eternally present<br>
+All time is unredeemable.<br>
+</center>
+<hr>
+Block Quote:
+<br>
+<blockquote>
+We shall not cease from exploration<br>
+And the end of all our exploring<br>
+Will be to arrive where we started<br>
+And know the place for the first time.<br>
+<i>-- T.S. Eliot</i>
+</blockquote>
+<br>
+<hr>
+Headings:<br>
+<h1>Header 1</h1>
+<h2>Header 2</h2>
+<h3>Header 3</h3>
+<h3>Header 4</h4>
+<h3>Header 5</h5>
+<hr>
+Images:<br>
+<i>Remote image</i><br>
+<img src="http://code.google.com/apis/kml/documentation/googleSample.png"><br>
+<i>Scaled image</i><br>
+<img src="http://code.google.com/apis/kml/documentation/googleSample.png" width=100><br>
+<hr>
+Simple Tables:<br>
+<table border="1" padding="1">
+<tr><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr>
+<tr><td>a</td><td>b</td><td>c</td><td>d</td><td>e</td></tr>
+</table>
+<br>
+[Did you notice that double-clicking on the placemark doesn't cause the viewer to take you anywhere? This is because it is possible to directly author a "placeless placemark". If you look at the code for this example, you will see that it has neither a point coordinate nor a LookAt element.]]]></description>
+      </Placemark>
+    </Folder>
+    <Folder>
+      <name>Ground Overlays</name>
+      <visibility>0</visibility>
+      <description>Examples of ground overlays</description>
+      <GroundOverlay>
+        <name>Large-scale overlay on terrain</name>
+        <visibility>0</visibility>
+        <description>Overlay shows Mount Etna erupting on July 13th, 2001.</description>
+        <LookAt>
+          <longitude>15.02468937557116</longitude>
+          <latitude>37.67395167941667</latitude>
+          <altitude>0</altitude>
+          <heading>-16.5581842842829</heading>
+          <tilt>58.31228652890705</tilt>
+          <range>30350.36838438907</range>
+        </LookAt>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/etna.jpg</href>
+        </Icon>
+        <LatLonBox>
+          <north>37.91904192681665</north>
+          <south>37.46543388598137</south>
+          <east>15.35832653742206</east>
+          <west>14.60128369746704</west>
+          <rotation>-0.1556640799496235</rotation>
+        </LatLonBox>
+      </GroundOverlay>
+    </Folder>
+    <Folder>
+      <name>Screen Overlays</name>
+      <visibility>0</visibility>
+      <description>Screen overlays have to be authored directly in KML. These
+        examples illustrate absolute and dynamic positioning in screen space.</description>
+      <ScreenOverlay>
+        <name>Simple crosshairs</name>
+        <visibility>0</visibility>
+        <description>This screen overlay uses fractional positioning to put the
+          image in the exact center of the screen</description>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/crosshairs.png</href>
+        </Icon>
+        <overlayXY x="0.5" y="0.5" xunits="fraction" yunits="fraction"/>
+        <screenXY x="0.5" y="0.5" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0.5" y="0.5" xunits="fraction" yunits="fraction"/>
+        <size x="0" y="0" xunits="pixels" yunits="pixels"/>
+      </ScreenOverlay>
+      <ScreenOverlay>
+        <name>Absolute Positioning: Top left</name>
+        <visibility>0</visibility>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/top_left.jpg</href>
+        </Icon>
+        <overlayXY x="0" y="1" xunits="fraction" yunits="fraction"/>
+        <screenXY x="0" y="1" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <size x="0" y="0" xunits="fraction" yunits="fraction"/>
+      </ScreenOverlay>
+      <ScreenOverlay>
+        <name>Absolute Positioning: Top right</name>
+        <visibility>0</visibility>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/top_right.jpg</href>
+        </Icon>
+        <overlayXY x="1" y="1" xunits="fraction" yunits="fraction"/>
+        <screenXY x="1" y="1" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <size x="0" y="0" xunits="fraction" yunits="fraction"/>
+      </ScreenOverlay>
+      <ScreenOverlay>
+        <name>Absolute Positioning: Bottom left</name>
+        <visibility>0</visibility>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/bottom_left.jpg</href>
+        </Icon>
+        <overlayXY x="0" y="-1" xunits="fraction" yunits="fraction"/>
+        <screenXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <size x="0" y="0" xunits="fraction" yunits="fraction"/>
+      </ScreenOverlay>
+      <ScreenOverlay>
+        <name>Absolute Positioning: Bottom right</name>
+        <visibility>0</visibility>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/bottom_right.jpg</href>
+        </Icon>
+        <overlayXY x="1" y="-1" xunits="fraction" yunits="fraction"/>
+        <screenXY x="1" y="0" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <size x="0" y="0" xunits="fraction" yunits="fraction"/>
+      </ScreenOverlay>
+      <ScreenOverlay>
+        <name>Dynamic Positioning: Top of screen</name>
+        <visibility>0</visibility>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/dynamic_screenoverlay.jpg</href>
+        </Icon>
+        <overlayXY x="0" y="1" xunits="fraction" yunits="fraction"/>
+        <screenXY x="0" y="1" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <size x="1" y="0.2" xunits="fraction" yunits="fraction"/>
+      </ScreenOverlay>
+      <ScreenOverlay>
+        <name>Dynamic Positioning: Right of screen</name>
+        <visibility>0</visibility>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/dynamic_right.jpg</href>
+        </Icon>
+        <overlayXY x="1" y="1" xunits="fraction" yunits="fraction"/>
+        <screenXY x="1" y="1" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <size x="0" y="1" xunits="fraction" yunits="fraction"/>
+      </ScreenOverlay>
+    </Folder>
+    <Folder>
+      <name>Paths</name>
+      <visibility>0</visibility>
+      <description>Examples of paths. Note that the tessellate tag is by default
+        set to 0. If you want to create tessellated lines, they must be authored
+        (or edited) directly in KML.</description>
+      <Placemark>
+        <name>Tessellated</name>
+        <visibility>0</visibility>
+        <description><![CDATA[If the <tessellate> tag has a value of 1, the line will contour to the underlying terrain]]></description>
+        <LookAt>
+          <longitude>-112.0822680013139</longitude>
+          <latitude>36.09825589333556</latitude>
+          <altitude>0</altitude>
+          <heading>103.8120432044965</heading>
+          <tilt>62.04855796276328</tilt>
+          <range>2889.145007690472</range>
+        </LookAt>
+        <LineString>
+          <tessellate>1</tessellate>
+          <coordinates> -112.0814237830345,36.10677870477137,0
+            -112.0870267752693,36.0905099328766,0 </coordinates>
+        </LineString>
+      </Placemark>
+      <Placemark>
+        <name>Untessellated</name>
+        <visibility>0</visibility>
+        <description><![CDATA[If the <tessellate> tag has a value of 0, the line follow a simple straight-line path from point to point]]></description>
+        <LookAt>
+          <longitude>-112.0822680013139</longitude>
+          <latitude>36.09825589333556</latitude>
+          <altitude>0</altitude>
+          <heading>103.8120432044965</heading>
+          <tilt>62.04855796276328</tilt>
+          <range>2889.145007690472</range>
+        </LookAt>
+        <LineString>
+          <tessellate>0</tessellate>
+          <coordinates> -112.080622229595,36.10673460007995,0
+            -112.085242575315,36.09049598612422,0 </coordinates>
+        </LineString>
+      </Placemark>
+      <Placemark>
+        <name>Absolute</name>
+        <visibility>0</visibility>
+        <description>Transparent purple line</description>
+        <LookAt>
+          <longitude>-112.2719329043177</longitude>
+          <latitude>36.08890633450894</latitude>
+          <altitude>0</altitude>
+          <heading>-106.8161545998597</heading>
+          <tilt>44.60763714063257</tilt>
+          <range>2569.386744398339</range>
+        </LookAt>
+        <styleUrl>#transPurpleLineGreenPoly</styleUrl>
+        <LineString>
+          <tessellate>1</tessellate>
+          <altitudeMode>absolute</altitudeMode>
+          <coordinates> -112.265654928602,36.09447672602546,2357
+            -112.2660384528238,36.09342608838671,2357
+            -112.2668139013453,36.09251058776881,2357
+            -112.2677826834445,36.09189827357996,2357
+            -112.2688557510952,36.0913137941187,2357
+            -112.2694810717219,36.0903677207521,2357
+            -112.2695268555611,36.08932171487285,2357
+            -112.2690144567276,36.08850916060472,2357
+            -112.2681528815339,36.08753813597956,2357
+            -112.2670588176031,36.08682685262568,2357
+            -112.2657374587321,36.08646312301303,2357 </coordinates>
+        </LineString>
+      </Placemark>
+      <Placemark>
+        <name>Absolute Extruded</name>
+        <visibility>0</visibility>
+        <description>Transparent green wall with yellow outlines</description>
+        <LookAt>
+          <longitude>-112.2643334742529</longitude>
+          <latitude>36.08563154742419</latitude>
+          <altitude>0</altitude>
+          <heading>-125.7518698668815</heading>
+          <tilt>44.61038665812578</tilt>
+          <range>4451.842204068102</range>
+        </LookAt>
+        <styleUrl>#yellowLineGreenPoly</styleUrl>
+        <LineString>
+          <extrude>1</extrude>
+          <tessellate>1</tessellate>
+          <altitudeMode>absolute</altitudeMode>
+          <coordinates> -112.2550785337791,36.07954952145647,2357
+            -112.2549277039738,36.08117083492122,2357
+            -112.2552505069063,36.08260761307279,2357
+            -112.2564540158376,36.08395660588506,2357
+            -112.2580238976449,36.08511401044813,2357
+            -112.2595218489022,36.08584355239394,2357
+            -112.2608216347552,36.08612634548589,2357
+            -112.262073428656,36.08626019085147,2357
+            -112.2633204928495,36.08621519860091,2357
+            -112.2644963846444,36.08627897945274,2357
+            -112.2656969554589,36.08649599090644,2357 </coordinates>
+        </LineString>
+      </Placemark>
+      <Placemark>
+        <name>Relative</name>
+        <visibility>0</visibility>
+        <description>Black line (10 pixels wide), height tracks terrain</description>
+        <LookAt>
+          <longitude>-112.2580438551384</longitude>
+          <latitude>36.1072674824385</latitude>
+          <altitude>0</altitude>
+          <heading>4.947421249553717</heading>
+          <tilt>44.61324882043339</tilt>
+          <range>2927.61105910266</range>
+        </LookAt>
+        <styleUrl>#thickBlackLine</styleUrl>
+        <LineString>
+          <tessellate>1</tessellate>
+          <altitudeMode>relativeToGround</altitudeMode>
+          <coordinates> -112.2532845153347,36.09886943729116,645
+            -112.2540466121145,36.09919570465255,645
+            -112.254734666947,36.09984998366178,645
+            -112.255493345654,36.10051310621746,645
+            -112.2563157098468,36.10108441943419,645
+            -112.2568033076439,36.10159722088088,645
+            -112.257494011321,36.10204323542867,645
+            -112.2584106072308,36.10229131995655,645
+            -112.2596588987972,36.10240001286358,645
+            -112.2610581199487,36.10213176873407,645
+            -112.2626285262793,36.10157011437219,645 </coordinates>
+        </LineString>
+      </Placemark>
+      <Placemark>
+        <name>Relative Extruded</name>
+        <visibility>0</visibility>
+        <description>Opaque blue walls with red outline, height tracks terrain</description>
+        <LookAt>
+          <longitude>-112.2683594333433</longitude>
+          <latitude>36.09884362144909</latitude>
+          <altitude>0</altitude>
+          <heading>-72.24271551768405</heading>
+          <tilt>44.60855445139561</tilt>
+          <range>2184.193522571467</range>
+        </LookAt>
+        <styleUrl>#redLineBluePoly</styleUrl>
+        <LineString>
+          <extrude>1</extrude>
+          <tessellate>1</tessellate>
+          <altitudeMode>relativeToGround</altitudeMode>
+          <coordinates> -112.2656634181359,36.09445214722695,630
+            -112.2652238941097,36.09520916122063,630
+            -112.2645079986395,36.09580763864907,630
+            -112.2638827428817,36.09628572284063,630
+            -112.2635746835406,36.09679275951239,630
+            -112.2635711822407,36.09740038871899,630
+            -112.2640296531825,36.09804913435539,630
+            -112.264327720538,36.09880337400301,630
+            -112.2642436562271,36.09963644790288,630
+            -112.2639148687042,36.10055381117246,630
+            -112.2626894973474,36.10149062823369,630 </coordinates>
+        </LineString>
+      </Placemark>
+    </Folder>
+    <Folder>
+      <name>Polygons</name>
+      <visibility>0</visibility>
+      <description>Examples of polygon shapes</description>
+      <Folder>
+        <name>Google Campus</name>
+        <visibility>0</visibility>
+        <description>A collection showing how easy it is to create 3-dimensional
+          buildings</description>
+        <LookAt>
+          <longitude>-122.084120030116</longitude>
+          <latitude>37.42174011925477</latitude>
+          <altitude>0</altitude>
+          <heading>-34.82469740081282</heading>
+          <tilt>53.454348562403</tilt>
+          <range>276.7870053764046</range>
+        </LookAt>
+        <Placemark>
+          <name>Building 40</name>
+          <visibility>0</visibility>
+          <styleUrl>#transRedPoly</styleUrl>
+          <Polygon>
+            <extrude>1</extrude>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -122.0848938459612,37.42257124044786,17
+                  -122.0849580979198,37.42211922626856,17
+                  -122.0847469573047,37.42207183952619,17
+                  -122.0845725380962,37.42209006729676,17
+                  -122.0845954886723,37.42215932700895,17
+                  -122.0838521118269,37.42227278564371,17
+                  -122.083792243335,37.42203539112084,17
+                  -122.0835076656616,37.42209006957106,17
+                  -122.0834709464152,37.42200987395161,17
+                  -122.0831221085748,37.4221046494946,17
+                  -122.0829247374572,37.42226503990386,17
+                  -122.0829339169385,37.42231242843094,17
+                  -122.0833837359737,37.42225046087618,17
+                  -122.0833607854248,37.42234159228745,17
+                  -122.0834204551642,37.42237075460644,17
+                  -122.083659133885,37.42251292011001,17
+                  -122.0839758438952,37.42265873093781,17
+                  -122.0842374743331,37.42265143972521,17
+                  -122.0845036949503,37.4226514386435,17
+                  -122.0848020460801,37.42261133916315,17
+                  -122.0847882750515,37.42256395055121,17
+                  -122.0848938459612,37.42257124044786,17 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+        <Placemark>
+          <name>Building 41</name>
+          <visibility>0</visibility>
+          <styleUrl>#transBluePoly</styleUrl>
+          <Polygon>
+            <extrude>1</extrude>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -122.0857412771483,37.42227033155257,17
+                  -122.0858169768481,37.42231408832346,17
+                  -122.085852582875,37.42230337469744,17
+                  -122.0858799945639,37.42225686138789,17
+                  -122.0858860101409,37.4222311076138,17
+                  -122.0858069157288,37.42220250173855,17
+                  -122.0858379542653,37.42214027058678,17
+                  -122.0856732640519,37.42208690214408,17
+                  -122.0856022926407,37.42214885429042,17
+                  -122.0855902778436,37.422128290487,17
+                  -122.0855841672237,37.42208171967246,17
+                  -122.0854852065741,37.42210455874995,17
+                  -122.0855067264352,37.42214267949824,17
+                  -122.0854430712915,37.42212783846172,17
+                  -122.0850990714904,37.42251282407603,17
+                  -122.0856769818632,37.42281815323651,17
+                  -122.0860162273783,37.42244918858722,17
+                  -122.0857260327004,37.42229239604253,17
+                  -122.0857412771483,37.42227033155257,17 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+        <Placemark>
+          <name>Building 42</name>
+          <visibility>0</visibility>
+          <styleUrl>#transGreenPoly</styleUrl>
+          <Polygon>
+            <extrude>1</extrude>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -122.0857862287242,37.42136208886969,25
+                  -122.0857312990603,37.42136935989481,25
+                  -122.0857312992918,37.42140934910903,25
+                  -122.0856077073679,37.42138390166565,25
+                  -122.0855802426516,37.42137299550869,25
+                  -122.0852186221971,37.42137299504316,25
+                  -122.0852277765639,37.42161656508265,25
+                  -122.0852598189347,37.42160565894403,25
+                  -122.0852598185499,37.42168200156,25
+                  -122.0852369311478,37.42170017860346,25
+                  -122.0852643957828,37.42176197982575,25
+                  -122.0853239032746,37.42176198013907,25
+                  -122.0853559454324,37.421852864452,25
+                  -122.0854108752463,37.42188921823734,25
+                  -122.0854795379357,37.42189285337048,25
+                  -122.0855436229819,37.42188921797546,25
+                  -122.0856260178042,37.42186013499926,25
+                  -122.085937287963,37.42186013453605,25
+                  -122.0859428718666,37.42160898590042,25
+                  -122.0859655469861,37.42157992759144,25
+                  -122.0858640462341,37.42147115002957,25
+                  -122.0858548911215,37.42140571326184,25
+                  -122.0858091162768,37.4214057134039,25
+                  -122.0857862287242,37.42136208886969,25 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+        <Placemark>
+          <name>Building 43</name>
+          <visibility>0</visibility>
+          <styleUrl>#transYellowPoly</styleUrl>
+          <Polygon>
+            <extrude>1</extrude>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -122.0844371128284,37.42177253003091,19
+                  -122.0845118855746,37.42191111542896,19
+                  -122.0850470999805,37.42178755121535,19
+                  -122.0850719913391,37.42143663023161,19
+                  -122.084916406232,37.42137237822116,19
+                  -122.0842193868167,37.42137237801626,19
+                  -122.08421938659,37.42147617161496,19
+                  -122.0838086419991,37.4214613409357,19
+                  -122.0837899728564,37.42131306410796,19
+                  -122.0832796534698,37.42129328840593,19
+                  -122.0832609819207,37.42139213944298,19
+                  -122.0829373621737,37.42137236399876,19
+                  -122.0829062425667,37.42151569778871,19
+                  -122.0828502269665,37.42176282576465,19
+                  -122.0829435788635,37.42176776969635,19
+                  -122.083217411188,37.42179248552686,19
+                  -122.0835970430103,37.4217480074456,19
+                  -122.0839455556771,37.42169364237603,19
+                  -122.0840077894637,37.42176283815853,19
+                  -122.084113587521,37.42174801104392,19
+                  -122.0840762473784,37.42171341292375,19
+                  -122.0841447047739,37.42167881534569,19
+                  -122.084144704223,37.42181720660197,19
+                  -122.0842503333074,37.4218170700446,19
+                  -122.0844371128284,37.42177253003091,19 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+      </Folder>
+      <Folder>
+        <name>Extruded Polygon</name>
+        <description>A simple way to model a building</description>
+        <Placemark>
+          <name>The Pentagon</name>
+          <LookAt>
+            <longitude>-77.05580139178142</longitude>
+            <latitude>38.870832443487</latitude>
+            <heading>59.88865561738225</heading>
+            <tilt>48.09646074797388</tilt>
+            <range>742.0552506670548</range>
+          </LookAt>
+          <Polygon>
+            <extrude>1</extrude>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -77.05788457660967,38.87253259892824,100
+                  -77.05465973756702,38.87291016281703,100
+                  -77.05315536854791,38.87053267794386,100
+                  -77.05552622493516,38.868757801256,100
+                  -77.05844056290393,38.86996206506943,100
+                  -77.05788457660967,38.87253259892824,100 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+            <innerBoundaryIs>
+              <LinearRing>
+                <coordinates> -77.05668055019126,38.87154239798456,100
+                  -77.05542625960818,38.87167890344077,100
+                  -77.05485125901024,38.87076535397792,100
+                  -77.05577677433152,38.87008686581446,100
+                  -77.05691162017543,38.87054446963351,100
+                  -77.05668055019126,38.87154239798456,100 </coordinates>
+              </LinearRing>
+            </innerBoundaryIs>
+          </Polygon>
+        </Placemark>
+      </Folder>
+      <Folder>
+        <name>Absolute and Relative</name>
+        <visibility>0</visibility>
+        <description>Four structures whose roofs meet exactly. Turn on/off
+          terrain to see the difference between relative and absolute
+          positioning.</description>
+        <LookAt>
+          <longitude>-112.3348969157552</longitude>
+          <latitude>36.14845533214919</latitude>
+          <altitude>0</altitude>
+          <heading>-86.91235037566909</heading>
+          <tilt>49.30695423894192</tilt>
+          <range>990.6761201087104</range>
+        </LookAt>
+        <Placemark>
+          <name>Absolute</name>
+          <visibility>0</visibility>
+          <styleUrl>#transBluePoly</styleUrl>
+          <Polygon>
+            <tessellate>1</tessellate>
+            <altitudeMode>absolute</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -112.3372510731295,36.14888505105317,1784
+                  -112.3356128688403,36.14781540589019,1784
+                  -112.3368169371048,36.14658677734382,1784
+                  -112.3384408457543,36.14762778914076,1784
+                  -112.3372510731295,36.14888505105317,1784 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+        <Placemark>
+          <name>Absolute Extruded</name>
+          <visibility>0</visibility>
+          <styleUrl>#transRedPoly</styleUrl>
+          <Polygon>
+            <extrude>1</extrude>
+            <tessellate>1</tessellate>
+            <altitudeMode>absolute</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -112.3396586818843,36.14637618647505,1784
+                  -112.3380597654315,36.14531751871353,1784
+                  -112.3368254237788,36.14659596244607,1784
+                  -112.3384555043203,36.14762621763982,1784
+                  -112.3396586818843,36.14637618647505,1784 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+        <Placemark>
+          <name>Relative</name>
+          <visibility>0</visibility>
+          <LookAt>
+            <longitude>-112.3350152490417</longitude>
+            <latitude>36.14943123077423</latitude>
+            <altitude>0</altitude>
+            <heading>-118.9214100848499</heading>
+            <tilt>37.92486261093203</tilt>
+            <range>345.5169113679813</range>
+          </LookAt>
+          <styleUrl>#transGreenPoly</styleUrl>
+          <Polygon>
+            <tessellate>1</tessellate>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -112.3349463145932,36.14988705767721,100
+                  -112.3354019540677,36.14941108398372,100
+                  -112.3344428289146,36.14878490381308,100
+                  -112.3331289492913,36.14780840132443,100
+                  -112.3317019516947,36.14680755678357,100
+                  -112.331131440106,36.1474173426228,100
+                  -112.332616324338,36.14845453364654,100
+                  -112.3339876620524,36.14926570522069,100
+                  -112.3349463145932,36.14988705767721,100 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+        <Placemark>
+          <name>Relative Extruded</name>
+          <visibility>0</visibility>
+          <LookAt>
+            <longitude>-112.3351587892382</longitude>
+            <latitude>36.14979247129029</latitude>
+            <altitude>0</altitude>
+            <heading>-55.42811560891606</heading>
+            <tilt>56.10280503739589</tilt>
+            <range>401.0997279712519</range>
+          </LookAt>
+          <styleUrl>#transYellowPoly</styleUrl>
+          <Polygon>
+            <extrude>1</extrude>
+            <tessellate>1</tessellate>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -112.3348783983763,36.1514008468736,100
+                  -112.3372535345629,36.14888517553886,100
+                  -112.3356068927954,36.14781612679284,100
+                  -112.3350034807972,36.14846469024177,100
+                  -112.3358353861232,36.1489624162954,100
+                  -112.3345888301373,36.15026229372507,100
+                  -112.3337937856278,36.14978096026463,100
+                  -112.3331798208424,36.1504472788618,100
+                  -112.3348783983763,36.1514008468736,100 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+      </Folder>
+    </Folder>
+  </Document>
+</kml>
\ No newline at end of file
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/input3.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/input3.xml	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,921 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<kml xmlns="http://www.opengis.net/kml/2.2">
+  <Document>
+    <name>KML Samples</name>
+    <open>1</open>
+    <description>Unleash your creativity with the help of these examples!</description>
+        <Style id="downArrowIcon">
+      <IconStyle>
+        <Icon>
+          <href>http://maps.google.com/mapfiles/kml/pal4/icon28.png</href>
+        </Icon>
+        <hotSpot x="4.5" y="9" xunits="yoyu" yunits="pixels" />
+      </IconStyle>
+    </Style>
+    <Style id="globeIcon">
+      <IconStyle>
+        <Icon>
+          <href>http://maps.google.com/mapfiles/kml/pal3/icon19.png</href>
+        </Icon>
+      </IconStyle>
+      <LineStyle>
+        <width>2</width>
+      </LineStyle>
+    </Style>
+    <Style id="transPurpleLineGreenPoly">
+      <LineStyle>
+        <color>7fff00ff</color>
+        <width>4</width>
+      </LineStyle>
+      <PolyStyle>
+        <color>7f00ff00</color>
+      </PolyStyle>
+    </Style>
+    <Style id="yellowLineGreenPoly">
+      <LineStyle>
+        <color>7f00ffff</color>
+        <width>4</width>
+      </LineStyle>
+      <PolyStyle>
+        <color>7f00ff00</color>
+      </PolyStyle>
+    </Style>
+    <Style id="thickBlackLine">
+      <LineStyle>
+        <color>87000000</color>
+        <width>10</width>
+      </LineStyle>
+    </Style>
+    <Style id="redLineBluePoly">
+      <LineStyle>
+        <color>ff0000ff</color>
+      </LineStyle>
+      <PolyStyle>
+        <color>ffff0000</color>
+      </PolyStyle>
+    </Style>
+    <Style id="blueLineRedPoly">
+      <LineStyle>
+        <color>ffff0000</color>
+      </LineStyle>
+      <PolyStyle>
+        <color>ff0000ff</color>
+      </PolyStyle>
+    </Style>
+    <Style id="transRedPoly">
+      <LineStyle>
+        <width>1.5</width>
+      </LineStyle>
+      <PolyStyle>
+        <color>7d0000ff</color>
+      </PolyStyle>
+    </Style>
+    <Style id="transBluePoly">
+      <LineStyle>
+        <width>1.5</width>
+      </LineStyle>
+      <PolyStyle>
+        <color>7dff0000</color>
+      </PolyStyle>
+    </Style>
+    <Style id="transGreenPoly">
+      <LineStyle>
+        <width>1.5</width>
+      </LineStyle>
+      <PolyStyle>
+        <color>7d00ff00</color>
+      </PolyStyle>
+    </Style>
+    <Style id="transYellowPoly">
+      <LineStyle>
+        <width>1.5</width>
+      </LineStyle>
+      <PolyStyle>
+        <color>7d00ffff</color>
+      </PolyStyle>
+    </Style>
+    <Style id="noDrivingDirections">
+      <BalloonStyle>
+        <text><![CDATA[
+          <b>$[name]</b>
+          <br /><br />
+          $[description]
+        ]]></text>
+      </BalloonStyle>
+      <ListStyle>
+          <ItemIcon>
+              <state>open closed error fetching0 fetching1</state>
+              </ItemIcon>
+              </ListStyle>
+    </Style>
+    <Folder>
+      <name>Placemarks</name>
+      <description>These are just some of the different kinds of placemarks with
+        which you can mark your favorite places</description>
+      <LookAt>
+        <longitude>-122.0839597145766</longitude>
+        <latitude>37.42222904525232</latitude>
+        <altitude>0</altitude>
+        <heading>-148.4122922628044</heading>
+        <tilt>40.5575073395506</tilt>
+        <range>500.6566641072245</range>
+      </LookAt>
+      <Placemark>
+        <name>Simple placemark</name>
+        <description>Attached to the ground. Intelligently places itself at the
+          height of the underlying terrain.</description>
+        <Point>
+          <coordinates>-122.0822035425683,37.42228990140251,0</coordinates>
+        </Point>
+      </Placemark>
+      <Placemark>
+        <name>Floating placemark</name>
+        <visibility>0</visibility>
+        <description>Floats a defined distance above the ground.</description>
+        <LookAt>
+          <longitude>-122.0839597145766</longitude>
+          <latitude>37.42222904525232</latitude>
+          <altitude>0</altitude>
+          <heading>-148.4122922628044</heading>
+          <tilt>40.5575073395506</tilt>
+          <range>500.6566641072245</range>
+        </LookAt>
+        <styleUrl>#downArrowIcon</styleUrl>
+        <Point>
+          <altitudeMode>relativeToGround</altitudeMode>
+          <coordinates>-122.084075,37.4220033612141,50</coordinates>
+        </Point>
+      </Placemark>
+      <Placemark>
+        <name>Extruded placemark</name>
+        <visibility>0</visibility>
+        <description>Tethered to the ground by a customizable
+          &quot;tail&quot;</description>
+        <LookAt>
+          <longitude>-122.0845787421525</longitude>
+          <latitude>37.42215078737763</latitude>
+          <altitude>0</altitude>
+          <heading>-148.4126684946234</heading>
+          <tilt>40.55750733918048</tilt>
+          <range>365.2646606980322</range>
+        </LookAt>
+        <styleUrl>#globeIcon</styleUrl>
+        <Point>
+          <extrude>1</extrude>
+          <altitudeMode>relativeToGround</altitudeMode>
+          <coordinates>-122.0857667006183,37.42156927867553,50</coordinates>
+        </Point>
+      </Placemark>
+    </Folder>
+    <Folder>
+      <name>Styles and Markup</name>
+      <visibility>0</visibility>
+      <description>With KML it is easy to create rich, descriptive markup to
+        annotate and enrich your placemarks</description>
+      <LookAt>
+        <longitude>-122.0845787422371</longitude>
+        <latitude>37.42215078726837</latitude>
+        <altitude>0</altitude>
+        <heading>-148.4126777488172</heading>
+        <tilt>40.55750733930874</tilt>
+        <range>365.2646826292919</range>
+      </LookAt>
+      <styleUrl>#noDrivingDirections</styleUrl>
+      <Document>
+        <name>Highlighted Icon</name>
+        <visibility>0</visibility>
+        <description>Place your mouse over the icon to see it display the new
+          icon</description>
+        <LookAt>
+          <longitude>-122.0856552124024</longitude>
+          <latitude>37.4224281311035</latitude>
+          <altitude>0</altitude>
+          <heading>0</heading>
+          <tilt>0</tilt>
+          <range>265.8520424250024</range>
+        </LookAt>
+        <Style id="highlightPlacemark">
+          <IconStyle>
+            <Icon>
+              <href>http://maps.google.com/mapfiles/kml/paddle/red-stars.png</href>
+            </Icon>
+          </IconStyle>
+        </Style>
+        <Style id="normalPlacemark">
+          <IconStyle>
+            <Icon>
+              <href>http://maps.google.com/mapfiles/kml/paddle/wht-blank.png</href>
+            </Icon>
+          </IconStyle>
+        </Style>
+        <StyleMap id="exampleStyleMap">
+          <Pair>
+            <key>normal</key>
+            <styleUrl>#normalPlacemark</styleUrl>
+          </Pair>
+          <Pair>
+            <key>highlight</key>
+            <styleUrl>#highlightPlacemark</styleUrl>
+          </Pair>
+        </StyleMap>
+        <Placemark>
+          <name>Roll over this icon</name>
+          <visibility>0</visibility>
+          <styleUrl>#exampleStyleMap</styleUrl>
+          <Point>
+            <coordinates>-122.0856545755255,37.42243077405461,0</coordinates>
+          </Point>
+        </Placemark>
+      </Document>
+      <Placemark>
+        <name>Descriptive HTML</name>
+        <visibility>0</visibility>
+        <description><![CDATA[Click on the blue link!<br><br>
+Placemark descriptions can be enriched by using many standard HTML tags.<br>
+For example:
+<hr>
+Styles:<br>
+<i>Italics</i>,
+<b>Bold</b>,
+<u>Underlined</u>,
+<s>Strike Out</s>,
+subscript<sub>subscript</sub>,
+superscript<sup>superscript</sup>,
+<big>Big</big>,
+<small>Small</small>,
+<tt>Typewriter</tt>,
+<em>Emphasized</em>,
+<strong>Strong</strong>,
+<code>Code</code>
+<hr>
+Fonts:<br>
+<font color="red">red by name</font>,
+<font color="#408010">leaf green by hexadecimal RGB</font>
+<br>
+<font size=1>size 1</font>,
+<font size=2>size 2</font>,
+<font size=3>size 3</font>,
+<font size=4>size 4</font>,
+<font size=5>size 5</font>,
+<font size=6>size 6</font>,
+<font size=7>size 7</font>
+<br>
+<font face=times>Times</font>,
+<font face=verdana>Verdana</font>,
+<font face=arial>Arial</font><br>
+<hr>
+Links:
+<br>
+<a href="http://earth.google.com/">Google Earth!</a>
+<br>
+ or:  Check out our website at www.google.com
+<hr>
+Alignment:<br>
+<p align=left>left</p>
+<p align=center>center</p>
+<p align=right>right</p>
+<hr>
+Ordered Lists:<br>
+<ol><li>First</li><li>Second</li><li>Third</li></ol>
+<ol type="a"><li>First</li><li>Second</li><li>Third</li></ol>
+<ol type="A"><li>First</li><li>Second</li><li>Third</li></ol>
+<hr>
+Unordered Lists:<br>
+<ul><li>A</li><li>B</li><li>C</li></ul>
+<ul type="circle"><li>A</li><li>B</li><li>C</li></ul>
+<ul type="square"><li>A</li><li>B</li><li>C</li></ul>
+<hr>
+Definitions:<br>
+<dl>
+<dt>Google:</dt><dd>The best thing since sliced bread</dd>
+</dl>
+<hr>
+Centered:<br><center>
+Time present and time past<br>
+Are both perhaps present in time future,<br>
+And time future contained in time past.<br>
+If all time is eternally present<br>
+All time is unredeemable.<br>
+</center>
+<hr>
+Block Quote:
+<br>
+<blockquote>
+We shall not cease from exploration<br>
+And the end of all our exploring<br>
+Will be to arrive where we started<br>
+And know the place for the first time.<br>
+<i>-- T.S. Eliot</i>
+</blockquote>
+<br>
+<hr>
+Headings:<br>
+<h1>Header 1</h1>
+<h2>Header 2</h2>
+<h3>Header 3</h3>
+<h3>Header 4</h4>
+<h3>Header 5</h5>
+<hr>
+Images:<br>
+<i>Remote image</i><br>
+<img src="http://code.google.com/apis/kml/documentation/googleSample.png"><br>
+<i>Scaled image</i><br>
+<img src="http://code.google.com/apis/kml/documentation/googleSample.png" width=100><br>
+<hr>
+Simple Tables:<br>
+<table border="1" padding="1">
+<tr><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr>
+<tr><td>a</td><td>b</td><td>c</td><td>d</td><td>e</td></tr>
+</table>
+<br>
+[Did you notice that double-clicking on the placemark doesn't cause the viewer to take you anywhere? This is because it is possible to directly author a "placeless placemark". If you look at the code for this example, you will see that it has neither a point coordinate nor a LookAt element.]]]></description>
+      </Placemark>
+    </Folder>
+    <Folder>
+      <name>Ground Overlays</name>
+      <visibility>0</visibility>
+      <description>Examples of ground overlays</description>
+      <GroundOverlay>
+        <name>Large-scale overlay on terrain</name>
+        <visibility>0</visibility>
+        <description>Overlay shows Mount Etna erupting on July 13th, 2001.</description>
+        <LookAt>
+          <longitude>15.02468937557116</longitude>
+          <latitude>37.67395167941667</latitude>
+          <altitude>0</altitude>
+          <heading>-16.5581842842829</heading>
+          <tilt>58.31228652890705</tilt>
+          <range>30350.36838438907</range>
+        </LookAt>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/etna.jpg</href>
+        </Icon>
+        <LatLonBox>
+          <north>37.91904192681665</north>
+          <south>37.46543388598137</south>
+          <east>15.35832653742206</east>
+          <west>14.60128369746704</west>
+          <rotation>-0.1556640799496235</rotation>
+        </LatLonBox>
+      </GroundOverlay>
+    </Folder>
+    <Folder>
+      <name>Screen Overlays</name>
+      <visibility>0</visibility>
+      <description>Screen overlays have to be authored directly in KML. These
+        examples illustrate absolute and dynamic positioning in screen space.</description>
+      <ScreenOverlay>
+        <name>Simple crosshairs</name>
+        <visibility>0</visibility>
+        <description>This screen overlay uses fractional positioning to put the
+          image in the exact center of the screen</description>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/crosshairs.png</href>
+        </Icon>
+        <overlayXY x="0.5" y="0.5" xunits="fraction" yunits="fraction"/>
+        <screenXY x="0.5" y="0.5" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0.5" y="0.5" xunits="fraction" yunits="fraction"/>
+        <size x="0" y="0" xunits="pixels" yunits="pixels"/>
+      </ScreenOverlay>
+      <ScreenOverlay>
+        <name>Absolute Positioning: Top left</name>
+        <visibility>0</visibility>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/top_left.jpg</href>
+        </Icon>
+        <overlayXY x="0" y="1" xunits="fraction" yunits="fraction"/>
+        <screenXY x="0" y="1" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <size x="0" y="0" xunits="fraction" yunits="fraction"/>
+      </ScreenOverlay>
+      <ScreenOverlay>
+        <name>Absolute Positioning: Top right</name>
+        <visibility>0</visibility>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/top_right.jpg</href>
+        </Icon>
+        <overlayXY x="1" y="1" xunits="fraction" yunits="fraction"/>
+        <screenXY x="1" y="1" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <size x="0" y="0" xunits="fraction" yunits="fraction"/>
+      </ScreenOverlay>
+      <ScreenOverlay>
+        <name>Absolute Positioning: Bottom left</name>
+        <visibility>0</visibility>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/bottom_left.jpg</href>
+        </Icon>
+        <overlayXY x="0" y="-1" xunits="fraction" yunits="fraction"/>
+        <screenXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <size x="0" y="0" xunits="fraction" yunits="fraction"/>
+      </ScreenOverlay>
+      <ScreenOverlay>
+        <name>Absolute Positioning: Bottom right</name>
+        <visibility>0</visibility>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/bottom_right.jpg</href>
+        </Icon>
+        <overlayXY x="1" y="-1" xunits="fraction" yunits="fraction"/>
+        <screenXY x="1" y="0" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <size x="0" y="0" xunits="fraction" yunits="fraction"/>
+      </ScreenOverlay>
+      <ScreenOverlay>
+        <name>Dynamic Positioning: Top of screen</name>
+        <visibility>0</visibility>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/dynamic_screenoverlay.jpg</href>
+        </Icon>
+        <overlayXY x="0" y="1" xunits="fraction" yunits="fraction"/>
+        <screenXY x="0" y="1" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <size x="1" y="0.2" xunits="fraction" yunits="fraction"/>
+      </ScreenOverlay>
+      <ScreenOverlay>
+        <name>Dynamic Positioning: Right of screen</name>
+        <visibility>0</visibility>
+        <Icon>
+          <href>http://code.google.com/apis/kml/documentation/dynamic_right.jpg</href>
+        </Icon>
+        <overlayXY x="1" y="1" xunits="fraction" yunits="fraction"/>
+        <screenXY x="1" y="1" xunits="fraction" yunits="fraction"/>
+        <rotationXY x="0" y="0" xunits="fraction" yunits="fraction"/>
+        <size x="0" y="1" xunits="fraction" yunits="fraction"/>
+      </ScreenOverlay>
+    </Folder>
+    <Folder>
+      <name>Paths</name>
+      <visibility>0</visibility>
+      <description>Examples of paths. Note that the tessellate tag is by default
+        set to 0. If you want to create tessellated lines, they must be authored
+        (or edited) directly in KML.</description>
+      <Placemark>
+        <name>Tessellated</name>
+        <visibility>0</visibility>
+        <description><![CDATA[If the <tessellate> tag has a value of 1, the line will contour to the underlying terrain]]></description>
+        <LookAt>
+          <longitude>-112.0822680013139</longitude>
+          <latitude>36.09825589333556</latitude>
+          <altitude>0</altitude>
+          <heading>103.8120432044965</heading>
+          <tilt>62.04855796276328</tilt>
+          <range>2889.145007690472</range>
+        </LookAt>
+        <LineString>
+          <tessellate>1</tessellate>
+          <coordinates> -112.0814237830345,36.10677870477137,0
+            -112.0870267752693,36.0905099328766,0 </coordinates>
+        </LineString>
+      </Placemark>
+      <Placemark>
+        <name>Untessellated</name>
+        <visibility>0</visibility>
+        <description><![CDATA[If the <tessellate> tag has a value of 0, the line follow a simple straight-line path from point to point]]></description>
+        <LookAt>
+          <longitude>-112.0822680013139</longitude>
+          <latitude>36.09825589333556</latitude>
+          <altitude>0</altitude>
+          <heading>103.8120432044965</heading>
+          <tilt>62.04855796276328</tilt>
+          <range>2889.145007690472</range>
+        </LookAt>
+        <LineString>
+          <tessellate>0</tessellate>
+          <coordinates> -112.080622229595,36.10673460007995,0
+            -112.085242575315,36.09049598612422,0 </coordinates>
+        </LineString>
+      </Placemark>
+      <Placemark>
+        <name>Absolute</name>
+        <visibility>0</visibility>
+        <description>Transparent purple line</description>
+        <LookAt>
+          <longitude>-112.2719329043177</longitude>
+          <latitude>36.08890633450894</latitude>
+          <altitude>0</altitude>
+          <heading>-106.8161545998597</heading>
+          <tilt>44.60763714063257</tilt>
+          <range>2569.386744398339</range>
+        </LookAt>
+        <styleUrl>#transPurpleLineGreenPoly</styleUrl>
+        <LineString>
+          <tessellate>1</tessellate>
+          <altitudeMode>absolute</altitudeMode>
+          <coordinates> -112.265654928602,36.09447672602546,2357
+            -112.2660384528238,36.09342608838671,2357
+            -112.2668139013453,36.09251058776881,2357
+            -112.2677826834445,36.09189827357996,2357
+            -112.2688557510952,36.0913137941187,2357
+            -112.2694810717219,36.0903677207521,2357
+            -112.2695268555611,36.08932171487285,2357
+            -112.2690144567276,36.08850916060472,2357
+            -112.2681528815339,36.08753813597956,2357
+            -112.2670588176031,36.08682685262568,2357
+            -112.2657374587321,36.08646312301303,2357 </coordinates>
+        </LineString>
+      </Placemark>
+      <Placemark>
+        <name>Absolute Extruded</name>
+        <visibility>0</visibility>
+        <description>Transparent green wall with yellow outlines</description>
+        <LookAt>
+          <longitude>-112.2643334742529</longitude>
+          <latitude>36.08563154742419</latitude>
+          <altitude>0</altitude>
+          <heading>-125.7518698668815</heading>
+          <tilt>44.61038665812578</tilt>
+          <range>4451.842204068102</range>
+        </LookAt>
+        <styleUrl>#yellowLineGreenPoly</styleUrl>
+        <LineString>
+          <extrude>1</extrude>
+          <tessellate>1</tessellate>
+          <altitudeMode>absolute</altitudeMode>
+          <coordinates> -112.2550785337791,36.07954952145647,2357
+            -112.2549277039738,36.08117083492122,2357
+            -112.2552505069063,36.08260761307279,2357
+            -112.2564540158376,36.08395660588506,2357
+            -112.2580238976449,36.08511401044813,2357
+            -112.2595218489022,36.08584355239394,2357
+            -112.2608216347552,36.08612634548589,2357
+            -112.262073428656,36.08626019085147,2357
+            -112.2633204928495,36.08621519860091,2357
+            -112.2644963846444,36.08627897945274,2357
+            -112.2656969554589,36.08649599090644,2357 </coordinates>
+        </LineString>
+      </Placemark>
+      <Placemark>
+        <name>Relative</name>
+        <visibility>0</visibility>
+        <description>Black line (10 pixels wide), height tracks terrain</description>
+        <LookAt>
+          <longitude>-112.2580438551384</longitude>
+          <latitude>36.1072674824385</latitude>
+          <altitude>0</altitude>
+          <heading>4.947421249553717</heading>
+          <tilt>44.61324882043339</tilt>
+          <range>2927.61105910266</range>
+        </LookAt>
+        <styleUrl>#thickBlackLine</styleUrl>
+        <LineString>
+          <tessellate>1</tessellate>
+          <altitudeMode>relativeToGround</altitudeMode>
+          <coordinates> -112.2532845153347,36.09886943729116,645
+            -112.2540466121145,36.09919570465255,645
+            -112.254734666947,36.09984998366178,645
+            -112.255493345654,36.10051310621746,645
+            -112.2563157098468,36.10108441943419,645
+            -112.2568033076439,36.10159722088088,645
+            -112.257494011321,36.10204323542867,645
+            -112.2584106072308,36.10229131995655,645
+            -112.2596588987972,36.10240001286358,645
+            -112.2610581199487,36.10213176873407,645
+            -112.2626285262793,36.10157011437219,645 </coordinates>
+        </LineString>
+      </Placemark>
+      <Placemark>
+        <name>Relative Extruded</name>
+        <visibility>0</visibility>
+        <description>Opaque blue walls with red outline, height tracks terrain</description>
+        <LookAt>
+          <longitude>-112.2683594333433</longitude>
+          <latitude>36.09884362144909</latitude>
+          <altitude>0</altitude>
+          <heading>-72.24271551768405</heading>
+          <tilt>44.60855445139561</tilt>
+          <range>2184.193522571467</range>
+        </LookAt>
+        <styleUrl>#redLineBluePoly</styleUrl>
+        <LineString>
+          <extrude>1</extrude>
+          <tessellate>1</tessellate>
+          <altitudeMode>relativeToGround</altitudeMode>
+          <coordinates> -112.2656634181359,36.09445214722695,630
+            -112.2652238941097,36.09520916122063,630
+            -112.2645079986395,36.09580763864907,630
+            -112.2638827428817,36.09628572284063,630
+            -112.2635746835406,36.09679275951239,630
+            -112.2635711822407,36.09740038871899,630
+            -112.2640296531825,36.09804913435539,630
+            -112.264327720538,36.09880337400301,630
+            -112.2642436562271,36.09963644790288,630
+            -112.2639148687042,36.10055381117246,630
+            -112.2626894973474,36.10149062823369,630 </coordinates>
+        </LineString>
+      </Placemark>
+    </Folder>
+    <Folder>
+      <name>Polygons</name>
+      <visibility>0</visibility>
+      <description>Examples of polygon shapes</description>
+      <Folder>
+        <name>Google Campus</name>
+        <visibility>0</visibility>
+        <description>A collection showing how easy it is to create 3-dimensional
+          buildings</description>
+        <LookAt>
+          <longitude>-122.084120030116</longitude>
+          <latitude>37.42174011925477</latitude>
+          <altitude>0</altitude>
+          <heading>-34.82469740081282</heading>
+          <tilt>53.454348562403</tilt>
+          <range>276.7870053764046</range>
+        </LookAt>
+        <Placemark>
+          <name>Building 40</name>
+          <visibility>0</visibility>
+          <styleUrl>#transRedPoly</styleUrl>
+          <Polygon>
+            <extrude>1</extrude>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -122.0848938459612,37.42257124044786,17
+                  -122.0849580979198,37.42211922626856,17
+                  -122.0847469573047,37.42207183952619,17
+                  -122.0845725380962,37.42209006729676,17
+                  -122.0845954886723,37.42215932700895,17
+                  -122.0838521118269,37.42227278564371,17
+                  -122.083792243335,37.42203539112084,17
+                  -122.0835076656616,37.42209006957106,17
+                  -122.0834709464152,37.42200987395161,17
+                  -122.0831221085748,37.4221046494946,17
+                  -122.0829247374572,37.42226503990386,17
+                  -122.0829339169385,37.42231242843094,17
+                  -122.0833837359737,37.42225046087618,17
+                  -122.0833607854248,37.42234159228745,17
+                  -122.0834204551642,37.42237075460644,17
+                  -122.083659133885,37.42251292011001,17
+                  -122.0839758438952,37.42265873093781,17
+                  -122.0842374743331,37.42265143972521,17
+                  -122.0845036949503,37.4226514386435,17
+                  -122.0848020460801,37.42261133916315,17
+                  -122.0847882750515,37.42256395055121,17
+                  -122.0848938459612,37.42257124044786,17 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+        <Placemark>
+          <name>Building 41</name>
+          <visibility>0</visibility>
+          <styleUrl>#transBluePoly</styleUrl>
+          <Polygon>
+            <extrude>1</extrude>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -122.0857412771483,37.42227033155257,17
+                  -122.0858169768481,37.42231408832346,17
+                  -122.085852582875,37.42230337469744,17
+                  -122.0858799945639,37.42225686138789,17
+                  -122.0858860101409,37.4222311076138,17
+                  -122.0858069157288,37.42220250173855,17
+                  -122.0858379542653,37.42214027058678,17
+                  -122.0856732640519,37.42208690214408,17
+                  -122.0856022926407,37.42214885429042,17
+                  -122.0855902778436,37.422128290487,17
+                  -122.0855841672237,37.42208171967246,17
+                  -122.0854852065741,37.42210455874995,17
+                  -122.0855067264352,37.42214267949824,17
+                  -122.0854430712915,37.42212783846172,17
+                  -122.0850990714904,37.42251282407603,17
+                  -122.0856769818632,37.42281815323651,17
+                  -122.0860162273783,37.42244918858722,17
+                  -122.0857260327004,37.42229239604253,17
+                  -122.0857412771483,37.42227033155257,17 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+        <Placemark>
+          <name>Building 42</name>
+          <visibility>0</visibility>
+          <styleUrl>#transGreenPoly</styleUrl>
+          <Polygon>
+            <extrude>1</extrude>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -122.0857862287242,37.42136208886969,25
+                  -122.0857312990603,37.42136935989481,25
+                  -122.0857312992918,37.42140934910903,25
+                  -122.0856077073679,37.42138390166565,25
+                  -122.0855802426516,37.42137299550869,25
+                  -122.0852186221971,37.42137299504316,25
+                  -122.0852277765639,37.42161656508265,25
+                  -122.0852598189347,37.42160565894403,25
+                  -122.0852598185499,37.42168200156,25
+                  -122.0852369311478,37.42170017860346,25
+                  -122.0852643957828,37.42176197982575,25
+                  -122.0853239032746,37.42176198013907,25
+                  -122.0853559454324,37.421852864452,25
+                  -122.0854108752463,37.42188921823734,25
+                  -122.0854795379357,37.42189285337048,25
+                  -122.0855436229819,37.42188921797546,25
+                  -122.0856260178042,37.42186013499926,25
+                  -122.085937287963,37.42186013453605,25
+                  -122.0859428718666,37.42160898590042,25
+                  -122.0859655469861,37.42157992759144,25
+                  -122.0858640462341,37.42147115002957,25
+                  -122.0858548911215,37.42140571326184,25
+                  -122.0858091162768,37.4214057134039,25
+                  -122.0857862287242,37.42136208886969,25 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+        <Placemark>
+          <name>Building 43</name>
+          <visibility>0</visibility>
+          <styleUrl>#transYellowPoly</styleUrl>
+          <Polygon>
+            <extrude>1</extrude>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -122.0844371128284,37.42177253003091,19
+                  -122.0845118855746,37.42191111542896,19
+                  -122.0850470999805,37.42178755121535,19
+                  -122.0850719913391,37.42143663023161,19
+                  -122.084916406232,37.42137237822116,19
+                  -122.0842193868167,37.42137237801626,19
+                  -122.08421938659,37.42147617161496,19
+                  -122.0838086419991,37.4214613409357,19
+                  -122.0837899728564,37.42131306410796,19
+                  -122.0832796534698,37.42129328840593,19
+                  -122.0832609819207,37.42139213944298,19
+                  -122.0829373621737,37.42137236399876,19
+                  -122.0829062425667,37.42151569778871,19
+                  -122.0828502269665,37.42176282576465,19
+                  -122.0829435788635,37.42176776969635,19
+                  -122.083217411188,37.42179248552686,19
+                  -122.0835970430103,37.4217480074456,19
+                  -122.0839455556771,37.42169364237603,19
+                  -122.0840077894637,37.42176283815853,19
+                  -122.084113587521,37.42174801104392,19
+                  -122.0840762473784,37.42171341292375,19
+                  -122.0841447047739,37.42167881534569,19
+                  -122.084144704223,37.42181720660197,19
+                  -122.0842503333074,37.4218170700446,19
+                  -122.0844371128284,37.42177253003091,19 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+      </Folder>
+      <Folder>
+        <name>Extruded Polygon</name>
+        <description>A simple way to model a building</description>
+        <Placemark>
+          <name>The Pentagon</name>
+          <LookAt>
+            <longitude>-77.05580139178142</longitude>
+            <latitude>38.870832443487</latitude>
+            <heading>59.88865561738225</heading>
+            <tilt>48.09646074797388</tilt>
+            <range>742.0552506670548</range>
+          </LookAt>
+          <Polygon>
+            <extrude>1</extrude>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -77.05788457660967,38.87253259892824,100
+                  -77.05465973756702,38.87291016281703,100
+                  -77.05315536854791,38.87053267794386,100
+                  -77.05552622493516,38.868757801256,100
+                  -77.05844056290393,38.86996206506943,100
+                  -77.05788457660967,38.87253259892824,100 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+            <innerBoundaryIs>
+              <LinearRing>
+                <coordinates> -77.05668055019126,38.87154239798456,100
+                  -77.05542625960818,38.87167890344077,100
+                  -77.05485125901024,38.87076535397792,100
+                  -77.05577677433152,38.87008686581446,100
+                  -77.05691162017543,38.87054446963351,100
+                  -77.05668055019126,38.87154239798456,100 </coordinates>
+              </LinearRing>
+            </innerBoundaryIs>
+          </Polygon>
+        </Placemark>
+      </Folder>
+      <Folder>
+        <name>Absolute and Relative</name>
+        <visibility>0</visibility>
+        <description>Four structures whose roofs meet exactly. Turn on/off
+          terrain to see the difference between relative and absolute
+          positioning.</description>
+        <LookAt>
+          <longitude>-112.3348969157552</longitude>
+          <latitude>36.14845533214919</latitude>
+          <altitude>0</altitude>
+          <heading>-86.91235037566909</heading>
+          <tilt>49.30695423894192</tilt>
+          <range>990.6761201087104</range>
+        </LookAt>
+        <Placemark>
+          <name>Absolute</name>
+          <visibility>0</visibility>
+          <styleUrl>#transBluePoly</styleUrl>
+          <Polygon>
+            <tessellate>1</tessellate>
+            <altitudeMode>absolute</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -112.3372510731295,36.14888505105317,1784
+                  -112.3356128688403,36.14781540589019,1784
+                  -112.3368169371048,36.14658677734382,1784
+                  -112.3384408457543,36.14762778914076,1784
+                  -112.3372510731295,36.14888505105317,1784 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+        <Placemark>
+          <name>Absolute Extruded</name>
+          <visibility>0</visibility>
+          <styleUrl>#transRedPoly</styleUrl>
+          <Polygon>
+            <extrude>1</extrude>
+            <tessellate>1</tessellate>
+            <altitudeMode>absolute</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -112.3396586818843,36.14637618647505,1784
+                  -112.3380597654315,36.14531751871353,1784
+                  -112.3368254237788,36.14659596244607,1784
+                  -112.3384555043203,36.14762621763982,1784
+                  -112.3396586818843,36.14637618647505,1784 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+        <Placemark>
+          <name>Relative</name>
+          <visibility>0</visibility>
+          <LookAt>
+            <longitude>-112.3350152490417</longitude>
+            <latitude>36.14943123077423</latitude>
+            <altitude>0</altitude>
+            <heading>-118.9214100848499</heading>
+            <tilt>37.92486261093203</tilt>
+            <range>345.5169113679813</range>
+          </LookAt>
+          <styleUrl>#transGreenPoly</styleUrl>
+          <Polygon>
+            <tessellate>1</tessellate>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -112.3349463145932,36.14988705767721,100
+                  -112.3354019540677,36.14941108398372,100
+                  -112.3344428289146,36.14878490381308,100
+                  -112.3331289492913,36.14780840132443,100
+                  -112.3317019516947,36.14680755678357,100
+                  -112.331131440106,36.1474173426228,100
+                  -112.332616324338,36.14845453364654,100
+                  -112.3339876620524,36.14926570522069,100
+                  -112.3349463145932,36.14988705767721,100 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+        <Placemark>
+          <name>Relative Extruded</name>
+          <visibility>0</visibility>
+          <LookAt>
+            <longitude>-112.3351587892382</longitude>
+            <latitude>36.14979247129029</latitude>
+            <altitude>0</altitude>
+            <heading>-55.42811560891606</heading>
+            <tilt>56.10280503739589</tilt>
+            <range>401.0997279712519</range>
+          </LookAt>
+          <styleUrl>#transYellowPoly</styleUrl>
+          <Polygon>
+            <extrude>1</extrude>
+            <tessellate>1</tessellate>
+            <altitudeMode>relativeToGround</altitudeMode>
+            <outerBoundaryIs>
+              <LinearRing>
+                <coordinates> -112.3348783983763,36.1514008468736,100
+                  -112.3372535345629,36.14888517553886,100
+                  -112.3356068927954,36.14781612679284,100
+                  -112.3350034807972,36.14846469024177,100
+                  -112.3358353861232,36.1489624162954,100
+                  -112.3345888301373,36.15026229372507,100
+                  -112.3337937856278,36.14978096026463,100
+                  -112.3331798208424,36.1504472788618,100
+                  -112.3348783983763,36.1514008468736,100 </coordinates>
+              </LinearRing>
+            </outerBoundaryIs>
+          </Polygon>
+        </Placemark>
+      </Folder>
+    </Folder>
+      </Document>
+</kml>
\ No newline at end of file
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/output1.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/output1.xml	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,2 @@
+<?xml version='1.0' encoding='UTF-8'?><kml><Placemark xmlns="http://www.opengis.net/kml/2.2"><name>Simple placemark</name><visibility>1</visibility><open>0</open><description>Attached to the ground. Intelligently places itself
+       at the height of the underlying terrain.</description><Point><extrude>0</extrude><coordinates>-122.0822035425683,37.42228990140251,0.0</coordinates></Point></Placemark></kml>
\ No newline at end of file
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/output2.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/kml/output2.xml	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,115 @@
+<?xml version='1.0' encoding='UTF-8'?><kml><Document xmlns="http://www.opengis.net/kml/2.2"><name>KML Samples</name><visibility>1</visibility><open>1</open><description>Unleash your creativity with the help of these examples!</description><Style id="downArrowIcon"><IconStyle><color>ffffffff</color><colorMode>normal</colorMode><scale>1.0</scale><heading>0.0</heading><Icon><href>http://maps.google.com/mapfiles/kml/pal4/icon28.png</href></Icon><hotSpot x="4.5" y="9.0" xunits="fraction" yunits="pixels" /></IconStyle></Style><Style id="globeIcon"><IconStyle><color>ffffffff</color><colorMode>normal</colorMode><scale>1.0</scale><heading>0.0</heading><Icon><href>http://maps.google.com/mapfiles/kml/pal3/icon19.png</href></Icon></IconStyle><LineStyle><color>ffffffff</color><colorMode>normal</colorMode><width>2.0</width></LineStyle></Style><Style id="transPurpleLineGreenPoly"><LineStyle><color>7fff00ff</color><colorMode>normal</colorMode><width>4.0</width></LineStyle><PolyStyle><color>7f00ff00</color><colorMode>normal</colorMode><fill>1</fill><outline>1</outline></PolyStyle></Style><Style id="yellowLineGreenPoly"><LineStyle><color>7f00ffff</color><colorMode>normal</colorMode><width>4.0</width></LineStyle><PolyStyle><color>7f00ff00</color><colorMode>normal</colorMode><fill>1</fill><outline>1</outline></PolyStyle></Style><Style id="thickBlackLine"><LineStyle><color>87000000</color><colorMode>normal</colorMode><width>10.0</width></LineStyle></Style><Style id="redLineBluePoly"><LineStyle><color>ff0000ff</color><colorMode>normal</colorMode><width>1.0</width></LineStyle><PolyStyle><color>ffff0000</color><colorMode>normal</colorMode><fill>1</fill><outline>1</outline></PolyStyle></Style><Style id="blueLineRedPoly"><LineStyle><color>ffff0000</color><colorMode>normal</colorMode><width>1.0</width></LineStyle><PolyStyle><color>ff0000ff</color><colorMode>normal</colorMode><fill>1</fill><outline>1</outline></PolyStyle></Style><Style id="transRedPoly"><LineStyle><color>ffffffff</color><colorMode>normal</colorMode><width>1.5</width></LineStyle><PolyStyle><color>7d0000ff</color><colorMode>normal</colorMode><fill>1</fill><outline>1</outline></PolyStyle></Style><Style id="transBluePoly"><LineStyle><color>ffffffff</color><colorMode>normal</colorMode><width>1.5</width></LineStyle><PolyStyle><color>7dff0000</color><colorMode>normal</colorMode><fill>1</fill><outline>1</outline></PolyStyle></Style><Style id="transGreenPoly"><LineStyle><color>ffffffff</color><colorMode>normal</colorMode><width>1.5</width></LineStyle><PolyStyle><color>7d00ff00</color><colorMode>normal</colorMode><fill>1</fill><outline>1</outline></PolyStyle></Style><Style id="transYellowPoly"><LineStyle><color>ffffffff</color><colorMode>normal</colorMode><width>1.5</width></LineStyle><PolyStyle><color>7d00ffff</color><colorMode>normal</colorMode><fill>1</fill><outline>1</outline></PolyStyle></Style><Style id="noDrivingDirections"><BalloonStyle><bgColor>ffffffff</bgColor><textColor>ff000000</textColor><text>
+          &lt;b>$[name]&lt;/b>
+          &lt;br />&lt;br />
+          $[description]
+        </text><altitudeMode>default</altitudeMode></BalloonStyle><ListStyle><listItemType>check</listItemType><bgColor>ffffffff</bgColor><ItemIcon><state>open closed error fetching0 fetching1</state></ItemIcon><maxSnippetLines>2</maxSnippetLines></ListStyle></Style><Folder><name>Placemarks</name><visibility>1</visibility><open>0</open><description>These are just some of the different kinds of placemarks with
+        which you can mark your favorite places</description><LookAt><longitude>-122.0839597145766</longitude><latitude>37.42222904525232</latitude><altitude>0.0</altitude><heading>-148.4122922628044</heading><tilt>40.5575073395506</tilt><range>500.6566641072245</range></LookAt><Placemark><name>Simple placemark</name><visibility>1</visibility><open>0</open><description>Attached to the ground. Intelligently places itself at the
+          height of the underlying terrain.</description><Point><extrude>0</extrude><altitudeMode>clampToGround</altitudeMode><coordinates>-122.0822035425683,37.42228990140251,0.0</coordinates></Point></Placemark><Placemark><name>Floating placemark</name><visibility>0</visibility><open>0</open><description>Floats a defined distance above the ground.</description><LookAt><longitude>-122.0839597145766</longitude><latitude>37.42222904525232</latitude><altitude>0.0</altitude><heading>-148.4122922628044</heading><tilt>40.5575073395506</tilt><range>500.6566641072245</range></LookAt><styleUrl>#downArrowIcon</styleUrl><Point><extrude>0</extrude><altitudeMode>relativeToGround</altitudeMode><coordinates>-122.084075,37.4220033612141,50.0</coordinates></Point></Placemark><Placemark><name>Extruded placemark</name><visibility>0</visibility><open>0</open><description>Tethered to the ground by a customizable
+          "tail"</description><LookAt><longitude>-122.0845787421525</longitude><latitude>37.42215078737763</latitude><altitude>0.0</altitude><heading>-148.4126684946234</heading><tilt>40.55750733918048</tilt><range>365.2646606980322</range></LookAt><styleUrl>#globeIcon</styleUrl><Point><extrude>1</extrude><altitudeMode>relativeToGround</altitudeMode><coordinates>-122.0857667006183,37.42156927867553,50.0</coordinates></Point></Placemark></Folder><Folder><name>Styles and Markup</name><visibility>0</visibility><open>0</open><description>With KML it is easy to create rich, descriptive markup to
+        annotate and enrich your placemarks</description><LookAt><longitude>-122.0845787422371</longitude><latitude>37.42215078726837</latitude><altitude>0.0</altitude><heading>-148.4126777488172</heading><tilt>40.55750733930874</tilt><range>365.2646826292919</range></LookAt><styleUrl>#noDrivingDirections</styleUrl><Document><name>Highlighted Icon</name><visibility>0</visibility><open>0</open><description>Place your mouse over the icon to see it display the new
+          icon</description><LookAt><longitude>-122.0856552124024</longitude><latitude>37.4224281311035</latitude><altitude>0.0</altitude><heading>0.0</heading><tilt>0.0</tilt><range>265.8520424250024</range></LookAt><Style id="highlightPlacemark"><IconStyle><color>ffffffff</color><colorMode>normal</colorMode><scale>1.0</scale><heading>0.0</heading><Icon><href>http://maps.google.com/mapfiles/kml/paddle/red-stars.png</href></Icon></IconStyle></Style><Style id="normalPlacemark"><IconStyle><color>ffffffff</color><colorMode>normal</colorMode><scale>1.0</scale><heading>0.0</heading><Icon><href>http://maps.google.com/mapfiles/kml/paddle/wht-blank.png</href></Icon></IconStyle></Style><StyleMap id="exampleStyleMap"><Pair><key>normal</key><styleUrl>#normalPlacemark</styleUrl></Pair><Pair><key>highlight</key><styleUrl>#highlightPlacemark</styleUrl></Pair></StyleMap><Placemark><name>Roll over this icon</name><visibility>0</visibility><open>0</open><styleUrl>#exampleStyleMap</styleUrl><Point><extrude>0</extrude><altitudeMode>clampToGround</altitudeMode><coordinates>-122.0856545755255,37.42243077405461,0.0</coordinates></Point></Placemark></Document><Placemark><name>Descriptive HTML</name><visibility>0</visibility><open>0</open><description>Click on the blue link!&lt;br>&lt;br>
+Placemark descriptions can be enriched by using many standard HTML tags.&lt;br>
+For example:
+&lt;hr>
+Styles:&lt;br>
+&lt;i>Italics&lt;/i>,
+&lt;b>Bold&lt;/b>,
+&lt;u>Underlined&lt;/u>,
+&lt;s>Strike Out&lt;/s>,
+subscript&lt;sub>subscript&lt;/sub>,
+superscript&lt;sup>superscript&lt;/sup>,
+&lt;big>Big&lt;/big>,
+&lt;small>Small&lt;/small>,
+&lt;tt>Typewriter&lt;/tt>,
+&lt;em>Emphasized&lt;/em>,
+&lt;strong>Strong&lt;/strong>,
+&lt;code>Code&lt;/code>
+&lt;hr>
+Fonts:&lt;br>
+&lt;font color="red">red by name&lt;/font>,
+&lt;font color="#408010">leaf green by hexadecimal RGB&lt;/font>
+&lt;br>
+&lt;font size=1>size 1&lt;/font>,
+&lt;font size=2>size 2&lt;/font>,
+&lt;font size=3>size 3&lt;/font>,
+&lt;font size=4>size 4&lt;/font>,
+&lt;font size=5>size 5&lt;/font>,
+&lt;font size=6>size 6&lt;/font>,
+&lt;font size=7>size 7&lt;/font>
+&lt;br>
+&lt;font face=times>Times&lt;/font>,
+&lt;font face=verdana>Verdana&lt;/font>,
+&lt;font face=arial>Arial&lt;/font>&lt;br>
+&lt;hr>
+Links:
+&lt;br>
+&lt;a href="http://earth.google.com/">Google Earth!&lt;/a>
+&lt;br>
+ or:  Check out our website at www.google.com
+&lt;hr>
+Alignment:&lt;br>
+&lt;p align=left>left&lt;/p>
+&lt;p align=center>center&lt;/p>
+&lt;p align=right>right&lt;/p>
+&lt;hr>
+Ordered Lists:&lt;br>
+&lt;ol>&lt;li>First&lt;/li>&lt;li>Second&lt;/li>&lt;li>Third&lt;/li>&lt;/ol>
+&lt;ol type="a">&lt;li>First&lt;/li>&lt;li>Second&lt;/li>&lt;li>Third&lt;/li>&lt;/ol>
+&lt;ol type="A">&lt;li>First&lt;/li>&lt;li>Second&lt;/li>&lt;li>Third&lt;/li>&lt;/ol>
+&lt;hr>
+Unordered Lists:&lt;br>
+&lt;ul>&lt;li>A&lt;/li>&lt;li>B&lt;/li>&lt;li>C&lt;/li>&lt;/ul>
+&lt;ul type="circle">&lt;li>A&lt;/li>&lt;li>B&lt;/li>&lt;li>C&lt;/li>&lt;/ul>
+&lt;ul type="square">&lt;li>A&lt;/li>&lt;li>B&lt;/li>&lt;li>C&lt;/li>&lt;/ul>
+&lt;hr>
+Definitions:&lt;br>
+&lt;dl>
+&lt;dt>Google:&lt;/dt>&lt;dd>The best thing since sliced bread&lt;/dd>
+&lt;/dl>
+&lt;hr>
+Centered:&lt;br>&lt;center>
+Time present and time past&lt;br>
+Are both perhaps present in time future,&lt;br>
+And time future contained in time past.&lt;br>
+If all time is eternally present&lt;br>
+All time is unredeemable.&lt;br>
+&lt;/center>
+&lt;hr>
+Block Quote:
+&lt;br>
+&lt;blockquote>
+We shall not cease from exploration&lt;br>
+And the end of all our exploring&lt;br>
+Will be to arrive where we started&lt;br>
+And know the place for the first time.&lt;br>
+&lt;i>-- T.S. Eliot&lt;/i>
+&lt;/blockquote>
+&lt;br>
+&lt;hr>
+Headings:&lt;br>
+&lt;h1>Header 1&lt;/h1>
+&lt;h2>Header 2&lt;/h2>
+&lt;h3>Header 3&lt;/h3>
+&lt;h3>Header 4&lt;/h4>
+&lt;h3>Header 5&lt;/h5>
+&lt;hr>
+Images:&lt;br>
+&lt;i>Remote image&lt;/i>&lt;br>
+&lt;img src="http://code.google.com/apis/kml/documentation/googleSample.png">&lt;br>
+&lt;i>Scaled image&lt;/i>&lt;br>
+&lt;img src="http://code.google.com/apis/kml/documentation/googleSample.png" width=100>&lt;br>
+&lt;hr>
+Simple Tables:&lt;br>
+&lt;table border="1" padding="1">
+&lt;tr>&lt;td>1&lt;/td>&lt;td>2&lt;/td>&lt;td>3&lt;/td>&lt;td>4&lt;/td>&lt;td>5&lt;/td>&lt;/tr>
+&lt;tr>&lt;td>a&lt;/td>&lt;td>b&lt;/td>&lt;td>c&lt;/td>&lt;td>d&lt;/td>&lt;td>e&lt;/td>&lt;/tr>
+&lt;/table>
+&lt;br>
+[Did you notice that double-clicking on the placemark doesn't cause the viewer to take you anywhere? This is because it is possible to directly author a "placeless placemark". If you look at the code for this example, you will see that it has neither a point coordinate nor a LookAt element.]</description></Placemark></Folder><Folder><name>Ground Overlays</name><visibility>0</visibility><open>0</open><description>Examples of ground overlays</description><GroundOverlay><name>Large-scale overlay on terrain</name><visibility>0</visibility><open>0</open><description>Overlay shows Mount Etna erupting on July 13th, 2001.</description><LookAt><longitude>15.02468937557116</longitude><latitude>37.67395167941667</latitude><altitude>0.0</altitude><heading>-16.5581842842829</heading><tilt>58.31228652890705</tilt><range>30350.36838438907</range></LookAt><color>ffffffff</color><drawOrder>0.0</drawOrder><Icon><href>http://code.google.com/apis/kml/documentation/etna.jpg</href><refreshMode>onChange</refreshMode><refreshInterval>4.0</refreshInterval><viewRefreshMode>never</viewRefreshMode><viewRefreshTime>0.0</viewRefreshTime><viewBoundScale>1.0</viewBoundScale></Icon><altitude>0.0</altitude><altitudeMode>clampToGround</altitudeMode><LatLonBox><north>37.91904192681665</north><south>37.46543388598137</south><east>15.35832653742206</east><west>14.60128369746704</west><rotation>-0.1556640799496235</rotation></LatLonBox></GroundOverlay></Folder><Folder><name>Screen Overlays</name><visibility>0</visibility><open>0</open><description>Screen overlays have to be authored directly in KML. These
+        examples illustrate absolute and dynamic positioning in screen space.</description><ScreenOverlay><name>Simple crosshairs</name><visibility>0</visibility><open>0</open><description>This screen overlay uses fractional positioning to put the
+          image in the exact center of the screen</description><color>ffffffff</color><drawOrder>0.0</drawOrder><Icon><href>http://code.google.com/apis/kml/documentation/crosshairs.png</href><refreshMode>onChange</refreshMode><refreshInterval>4.0</refreshInterval><viewRefreshMode>never</viewRefreshMode><viewRefreshTime>0.0</viewRefreshTime><viewBoundScale>1.0</viewBoundScale></Icon><overlayXY x="0.5" y="0.5" xunits="fraction" yunits="fraction" /><screenXY x="0.5" y="0.5" xunits="fraction" yunits="fraction" /><rotationXY x="0.5" y="0.5" xunits="fraction" yunits="fraction" /><size x="0.0" y="0.0" xunits="pixels" yunits="pixels" /><rotation>0.0</rotation></ScreenOverlay><ScreenOverlay><name>Absolute Positioning: Top left</name><visibility>0</visibility><open>0</open><color>ffffffff</color><drawOrder>0.0</drawOrder><Icon><href>http://code.google.com/apis/kml/documentation/top_left.jpg</href><refreshMode>onChange</refreshMode><refreshInterval>4.0</refreshInterval><viewRefreshMode>never</viewRefreshMode><viewRefreshTime>0.0</viewRefreshTime><viewBoundScale>1.0</viewBoundScale></Icon><overlayXY x="0.0" y="1.0" xunits="fraction" yunits="fraction" /><screenXY x="0.0" y="1.0" xunits="fraction" yunits="fraction" /><rotationXY x="0.0" y="0.0" xunits="fraction" yunits="fraction" /><size x="0.0" y="0.0" xunits="fraction" yunits="fraction" /><rotation>0.0</rotation></ScreenOverlay><ScreenOverlay><name>Absolute Positioning: Top right</name><visibility>0</visibility><open>0</open><color>ffffffff</color><drawOrder>0.0</drawOrder><Icon><href>http://code.google.com/apis/kml/documentation/top_right.jpg</href><refreshMode>onChange</refreshMode><refreshInterval>4.0</refreshInterval><viewRefreshMode>never</viewRefreshMode><viewRefreshTime>0.0</viewRefreshTime><viewBoundScale>1.0</viewBoundScale></Icon><overlayXY x="1.0" y="1.0" xunits="fraction" yunits="fraction" /><screenXY x="1.0" y="1.0" xunits="fraction" yunits="fraction" /><rotationXY x="0.0" y="0.0" xunits="fraction" yunits="fraction" /><size x="0.0" y="0.0" xunits="fraction" yunits="fraction" /><rotation>0.0</rotation></ScreenOverlay><ScreenOverlay><name>Absolute Positioning: Bottom left</name><visibility>0</visibility><open>0</open><color>ffffffff</color><drawOrder>0.0</drawOrder><Icon><href>http://code.google.com/apis/kml/documentation/bottom_left.jpg</href><refreshMode>onChange</refreshMode><refreshInterval>4.0</refreshInterval><viewRefreshMode>never</viewRefreshMode><viewRefreshTime>0.0</viewRefreshTime><viewBoundScale>1.0</viewBoundScale></Icon><overlayXY x="0.0" y="-1.0" xunits="fraction" yunits="fraction" /><screenXY x="0.0" y="0.0" xunits="fraction" yunits="fraction" /><rotationXY x="0.0" y="0.0" xunits="fraction" yunits="fraction" /><size x="0.0" y="0.0" xunits="fraction" yunits="fraction" /><rotation>0.0</rotation></ScreenOverlay><ScreenOverlay><name>Absolute Positioning: Bottom right</name><visibility>0</visibility><open>0</open><color>ffffffff</color><drawOrder>0.0</drawOrder><Icon><href>http://code.google.com/apis/kml/documentation/bottom_right.jpg</href><refreshMode>onChange</refreshMode><refreshInterval>4.0</refreshInterval><viewRefreshMode>never</viewRefreshMode><viewRefreshTime>0.0</viewRefreshTime><viewBoundScale>1.0</viewBoundScale></Icon><overlayXY x="1.0" y="-1.0" xunits="fraction" yunits="fraction" /><screenXY x="1.0" y="0.0" xunits="fraction" yunits="fraction" /><rotationXY x="0.0" y="0.0" xunits="fraction" yunits="fraction" /><size x="0.0" y="0.0" xunits="fraction" yunits="fraction" /><rotation>0.0</rotation></ScreenOverlay><ScreenOverlay><name>Dynamic Positioning: Top of screen</name><visibility>0</visibility><open>0</open><color>ffffffff</color><drawOrder>0.0</drawOrder><Icon><href>http://code.google.com/apis/kml/documentation/dynamic_screenoverlay.jpg</href><refreshMode>onChange</refreshMode><refreshInterval>4.0</refreshInterval><viewRefreshMode>never</viewRefreshMode><viewRefreshTime>0.0</viewRefreshTime><viewBoundScale>1.0</viewBoundScale></Icon><overlayXY x="0.0" y="1.0" xunits="fraction" yunits="fraction" /><screenXY x="0.0" y="1.0" xunits="fraction" yunits="fraction" /><rotationXY x="0.0" y="0.0" xunits="fraction" yunits="fraction" /><size x="1.0" y="0.2" xunits="fraction" yunits="fraction" /><rotation>0.0</rotation></ScreenOverlay><ScreenOverlay><name>Dynamic Positioning: Right of screen</name><visibility>0</visibility><open>0</open><color>ffffffff</color><drawOrder>0.0</drawOrder><Icon><href>http://code.google.com/apis/kml/documentation/dynamic_right.jpg</href><refreshMode>onChange</refreshMode><refreshInterval>4.0</refreshInterval><viewRefreshMode>never</viewRefreshMode><viewRefreshTime>0.0</viewRefreshTime><viewBoundScale>1.0</viewBoundScale></Icon><overlayXY x="1.0" y="1.0" xunits="fraction" yunits="fraction" /><screenXY x="1.0" y="1.0" xunits="fraction" yunits="fraction" /><rotationXY x="0.0" y="0.0" xunits="fraction" yunits="fraction" /><size x="0.0" y="1.0" xunits="fraction" yunits="fraction" /><rotation>0.0</rotation></ScreenOverlay></Folder><Folder><name>Paths</name><visibility>0</visibility><open>0</open><description>Examples of paths. Note that the tessellate tag is by default
+        set to 0. If you want to create tessellated lines, they must be authored
+        (or edited) directly in KML.</description><Placemark><name>Tessellated</name><visibility>0</visibility><open>0</open><description>If the &lt;tessellate> tag has a value of 1, the line will contour to the underlying terrain</description><LookAt><longitude>-112.0822680013139</longitude><latitude>36.09825589333556</latitude><altitude>0.0</altitude><heading>103.8120432044965</heading><tilt>62.04855796276328</tilt><range>2889.145007690472</range></LookAt><LineString><extrude>0</extrude><tessellate>1</tessellate><altitudeMode>clampToGround</altitudeMode><coordinates>-112.0814237830345,36.10677870477137,0.0 -112.0870267752693,36.0905099328766,0.0</coordinates></LineString></Placemark><Placemark><name>Untessellated</name><visibility>0</visibility><open>0</open><description>If the &lt;tessellate> tag has a value of 0, the line follow a simple straight-line path from point to point</description><LookAt><longitude>-112.0822680013139</longitude><latitude>36.09825589333556</latitude><altitude>0.0</altitude><heading>103.8120432044965</heading><tilt>62.04855796276328</tilt><range>2889.145007690472</range></LookAt><LineString><extrude>0</extrude><tessellate>0</tessellate><altitudeMode>clampToGround</altitudeMode><coordinates>-112.080622229595,36.10673460007995,0.0 -112.085242575315,36.09049598612422,0.0</coordinates></LineString></Placemark><Placemark><name>Absolute</name><visibility>0</visibility><open>0</open><description>Transparent purple line</description><LookAt><longitude>-112.2719329043177</longitude><latitude>36.08890633450894</latitude><altitude>0.0</altitude><heading>-106.8161545998597</heading><tilt>44.60763714063257</tilt><range>2569.386744398339</range></LookAt><styleUrl>#transPurpleLineGreenPoly</styleUrl><LineString><extrude>0</extrude><tessellate>1</tessellate><altitudeMode>absolute</altitudeMode><coordinates>-112.265654928602,36.09447672602546,2357.0 -112.2660384528238,36.09342608838671,2357.0 -112.2668139013453,36.09251058776881,2357.0 -112.2677826834445,36.09189827357996,2357.0 -112.2688557510952,36.0913137941187,2357.0 -112.2694810717219,36.0903677207521,2357.0 -112.2695268555611,36.08932171487285,2357.0 -112.2690144567276,36.08850916060472,2357.0 -112.2681528815339,36.08753813597956,2357.0 -112.2670588176031,36.08682685262568,2357.0 -112.2657374587321,36.08646312301303,2357.0</coordinates></LineString></Placemark><Placemark><name>Absolute Extruded</name><visibility>0</visibility><open>0</open><description>Transparent green wall with yellow outlines</description><LookAt><longitude>-112.2643334742529</longitude><latitude>36.08563154742419</latitude><altitude>0.0</altitude><heading>-125.7518698668815</heading><tilt>44.61038665812578</tilt><range>4451.842204068102</range></LookAt><styleUrl>#yellowLineGreenPoly</styleUrl><LineString><extrude>1</extrude><tessellate>1</tessellate><altitudeMode>absolute</altitudeMode><coordinates>-112.2550785337791,36.07954952145647,2357.0 -112.2549277039738,36.08117083492122,2357.0 -112.2552505069063,36.08260761307279,2357.0 -112.2564540158376,36.08395660588506,2357.0 -112.2580238976449,36.08511401044813,2357.0 -112.2595218489022,36.08584355239394,2357.0 -112.2608216347552,36.08612634548589,2357.0 -112.262073428656,36.08626019085147,2357.0 -112.2633204928495,36.08621519860091,2357.0 -112.2644963846444,36.08627897945274,2357.0 -112.2656969554589,36.08649599090644,2357.0</coordinates></LineString></Placemark><Placemark><name>Relative</name><visibility>0</visibility><open>0</open><description>Black line (10 pixels wide), height tracks terrain</description><LookAt><longitude>-112.2580438551384</longitude><latitude>36.1072674824385</latitude><altitude>0.0</altitude><heading>4.947421249553717</heading><tilt>44.61324882043339</tilt><range>2927.61105910266</range></LookAt><styleUrl>#thickBlackLine</styleUrl><LineString><extrude>0</extrude><tessellate>1</tessellate><altitudeMode>relativeToGround</altitudeMode><coordinates>-112.2532845153347,36.09886943729116,645.0 -112.2540466121145,36.09919570465255,645.0 -112.254734666947,36.09984998366178,645.0 -112.255493345654,36.10051310621746,645.0 -112.2563157098468,36.10108441943419,645.0 -112.2568033076439,36.10159722088088,645.0 -112.257494011321,36.10204323542867,645.0 -112.2584106072308,36.10229131995655,645.0 -112.2596588987972,36.10240001286358,645.0 -112.2610581199487,36.10213176873407,645.0 -112.2626285262793,36.10157011437219,645.0</coordinates></LineString></Placemark><Placemark><name>Relative Extruded</name><visibility>0</visibility><open>0</open><description>Opaque blue walls with red outline, height tracks terrain</description><LookAt><longitude>-112.2683594333433</longitude><latitude>36.09884362144909</latitude><altitude>0.0</altitude><heading>-72.24271551768405</heading><tilt>44.60855445139561</tilt><range>2184.193522571467</range></LookAt><styleUrl>#redLineBluePoly</styleUrl><LineString><extrude>1</extrude><tessellate>1</tessellate><altitudeMode>relativeToGround</altitudeMode><coordinates>-112.2656634181359,36.09445214722695,630.0 -112.2652238941097,36.09520916122063,630.0 -112.2645079986395,36.09580763864907,630.0 -112.2638827428817,36.09628572284063,630.0 -112.2635746835406,36.09679275951239,630.0 -112.2635711822407,36.09740038871899,630.0 -112.2640296531825,36.09804913435539,630.0 -112.264327720538,36.09880337400301,630.0 -112.2642436562271,36.09963644790288,630.0 -112.2639148687042,36.10055381117246,630.0 -112.2626894973474,36.10149062823369,630.0</coordinates></LineString></Placemark></Folder><Folder><name>Polygons</name><visibility>0</visibility><open>0</open><description>Examples of polygon shapes</description><Folder><name>Google Campus</name><visibility>0</visibility><open>0</open><description>A collection showing how easy it is to create 3-dimensional
+          buildings</description><LookAt><longitude>-122.084120030116</longitude><latitude>37.42174011925477</latitude><altitude>0.0</altitude><heading>-34.82469740081282</heading><tilt>53.454348562403</tilt><range>276.7870053764046</range></LookAt><Placemark><name>Building 40</name><visibility>0</visibility><open>0</open><styleUrl>#transRedPoly</styleUrl><Polygon><extrude>1</extrude><tessellate>0</tessellate><altitudeMode>relativeToGround</altitudeMode><outerBoundaryIs><LinearRing><extrude>0</extrude><tessellate>0</tessellate><altitudeMode>clampToGround</altitudeMode><coordinates>-122.0848938459612,37.42257124044786,17.0 -122.0849580979198,37.42211922626856,17.0 -122.0847469573047,37.42207183952619,17.0 -122.0845725380962,37.42209006729676,17.0 -122.0845954886723,37.42215932700895,17.0 -122.0838521118269,37.42227278564371,17.0 -122.083792243335,37.42203539112084,17.0 -122.0835076656616,37.42209006957106,17.0 -122.0834709464152,37.42200987395161,17.0 -122.0831221085748,37.4221046494946,17.0 -122.0829247374572,37.42226503990386,17.0 -122.0829339169385,37.42231242843094,17.0 -122.0833837359737,37.42225046087618,17.0 -122.0833607854248,37.42234159228745,17.0 -122.0834204551642,37.42237075460644,17.0 -122.083659133885,37.42251292011001,17.0 -122.0839758438952,37.42265873093781,17.0 -122.0842374743331,37.42265143972521,17.0 -122.0845036949503,37.4226514386435,17.0 -122.0848020460801,37.42261133916315,17.0 -122.0847882750515,37.42256395055121,17.0 -122.0848938459612,37.42257124044786,17.0</coordinates></LinearRing></outerBoundaryIs></Polygon></Placemark><Placemark><name>Building 41</name><visibility>0</visibility><open>0</open><styleUrl>#transBluePoly</styleUrl><Polygon><extrude>1</extrude><tessellate>0</tessellate><altitudeMode>relativeToGround</altitudeMode><outerBoundaryIs><LinearRing><extrude>0</extrude><tessellate>0</tessellate><altitudeMode>clampToGround</altitudeMode><coordinates>-122.0857412771483,37.42227033155257,17.0 -122.0858169768481,37.42231408832346,17.0 -122.085852582875,37.42230337469744,17.0 -122.0858799945639,37.42225686138789,17.0 -122.0858860101409,37.4222311076138,17.0 -122.0858069157288,37.42220250173855,17.0 -122.0858379542653,37.42214027058678,17.0 -122.0856732640519,37.42208690214408,17.0 -122.0856022926407,37.42214885429042,17.0 -122.0855902778436,37.422128290487,17.0 -122.0855841672237,37.42208171967246,17.0 -122.0854852065741,37.42210455874995,17.0 -122.0855067264352,37.42214267949824,17.0 -122.0854430712915,37.42212783846172,17.0 -122.0850990714904,37.42251282407603,17.0 -122.0856769818632,37.42281815323651,17.0 -122.0860162273783,37.42244918858722,17.0 -122.0857260327004,37.42229239604253,17.0 -122.0857412771483,37.42227033155257,17.0</coordinates></LinearRing></outerBoundaryIs></Polygon></Placemark><Placemark><name>Building 42</name><visibility>0</visibility><open>0</open><styleUrl>#transGreenPoly</styleUrl><Polygon><extrude>1</extrude><tessellate>0</tessellate><altitudeMode>relativeToGround</altitudeMode><outerBoundaryIs><LinearRing><extrude>0</extrude><tessellate>0</tessellate><altitudeMode>clampToGround</altitudeMode><coordinates>-122.0857862287242,37.42136208886969,25.0 -122.0857312990603,37.42136935989481,25.0 -122.0857312992918,37.42140934910903,25.0 -122.0856077073679,37.42138390166565,25.0 -122.0855802426516,37.42137299550869,25.0 -122.0852186221971,37.42137299504316,25.0 -122.0852277765639,37.42161656508265,25.0 -122.0852598189347,37.42160565894403,25.0 -122.0852598185499,37.42168200156,25.0 -122.0852369311478,37.42170017860346,25.0 -122.0852643957828,37.42176197982575,25.0 -122.0853239032746,37.42176198013907,25.0 -122.0853559454324,37.421852864452,25.0 -122.0854108752463,37.42188921823734,25.0 -122.0854795379357,37.42189285337048,25.0 -122.0855436229819,37.42188921797546,25.0 -122.0856260178042,37.42186013499926,25.0 -122.085937287963,37.42186013453605,25.0 -122.0859428718666,37.42160898590042,25.0 -122.0859655469861,37.42157992759144,25.0 -122.0858640462341,37.42147115002957,25.0 -122.0858548911215,37.42140571326184,25.0 -122.0858091162768,37.4214057134039,25.0 -122.0857862287242,37.42136208886969,25.0</coordinates></LinearRing></outerBoundaryIs></Polygon></Placemark><Placemark><name>Building 43</name><visibility>0</visibility><open>0</open><styleUrl>#transYellowPoly</styleUrl><Polygon><extrude>1</extrude><tessellate>0</tessellate><altitudeMode>relativeToGround</altitudeMode><outerBoundaryIs><LinearRing><extrude>0</extrude><tessellate>0</tessellate><altitudeMode>clampToGround</altitudeMode><coordinates>-122.0844371128284,37.42177253003091,19.0 -122.0845118855746,37.42191111542896,19.0 -122.0850470999805,37.42178755121535,19.0 -122.0850719913391,37.42143663023161,19.0 -122.084916406232,37.42137237822116,19.0 -122.0842193868167,37.42137237801626,19.0 -122.08421938659,37.42147617161496,19.0 -122.0838086419991,37.4214613409357,19.0 -122.0837899728564,37.42131306410796,19.0 -122.0832796534698,37.42129328840593,19.0 -122.0832609819207,37.42139213944298,19.0 -122.0829373621737,37.42137236399876,19.0 -122.0829062425667,37.42151569778871,19.0 -122.0828502269665,37.42176282576465,19.0 -122.0829435788635,37.42176776969635,19.0 -122.083217411188,37.42179248552686,19.0 -122.0835970430103,37.4217480074456,19.0 -122.0839455556771,37.42169364237603,19.0 -122.0840077894637,37.42176283815853,19.0 -122.084113587521,37.42174801104392,19.0 -122.0840762473784,37.42171341292375,19.0 -122.0841447047739,37.42167881534569,19.0 -122.084144704223,37.42181720660197,19.0 -122.0842503333074,37.4218170700446,19.0 -122.0844371128284,37.42177253003091,19.0</coordinates></LinearRing></outerBoundaryIs></Polygon></Placemark></Folder><Folder><name>Extruded Polygon</name><visibility>1</visibility><open>0</open><description>A simple way to model a building</description><Placemark><name>The Pentagon</name><visibility>1</visibility><open>0</open><LookAt><longitude>-77.05580139178142</longitude><latitude>38.870832443487</latitude><altitude>0.0</altitude><heading>59.88865561738225</heading><tilt>48.09646074797388</tilt><range>742.0552506670548</range></LookAt><Polygon><extrude>1</extrude><tessellate>0</tessellate><altitudeMode>relativeToGround</altitudeMode><outerBoundaryIs><LinearRing><extrude>0</extrude><tessellate>0</tessellate><altitudeMode>clampToGround</altitudeMode><coordinates>-77.05788457660967,38.87253259892824,100.0 -77.05465973756702,38.87291016281703,100.0 -77.0531553685479,38.87053267794386,100.0 -77.05552622493516,38.868757801256,100.0 -77.05844056290393,38.86996206506943,100.0 -77.05788457660967,38.87253259892824,100.0</coordinates></LinearRing></outerBoundaryIs><innerBoundaryIs><LinearRing><extrude>0</extrude><tessellate>0</tessellate><altitudeMode>clampToGround</altitudeMode><coordinates>-77.05668055019126,38.87154239798456,100.0 -77.05542625960818,38.87167890344077,100.0 -77.05485125901023,38.87076535397792,100.0 -77.05577677433152,38.87008686581446,100.0 -77.05691162017543,38.87054446963351,100.0 -77.05668055019126,38.87154239798456,100.0</coordinates></LinearRing></innerBoundaryIs></Polygon></Placemark></Folder><Folder><name>Absolute and Relative</name><visibility>0</visibility><open>0</open><description>Four structures whose roofs meet exactly. Turn on/off
+          terrain to see the difference between relative and absolute
+          positioning.</description><LookAt><longitude>-112.3348969157552</longitude><latitude>36.14845533214919</latitude><altitude>0.0</altitude><heading>-86.91235037566909</heading><tilt>49.30695423894192</tilt><range>990.6761201087104</range></LookAt><Placemark><name>Absolute</name><visibility>0</visibility><open>0</open><styleUrl>#transBluePoly</styleUrl><Polygon><extrude>0</extrude><tessellate>1</tessellate><altitudeMode>absolute</altitudeMode><outerBoundaryIs><LinearRing><extrude>0</extrude><tessellate>0</tessellate><altitudeMode>clampToGround</altitudeMode><coordinates>-112.3372510731295,36.14888505105317,1784.0 -112.3356128688403,36.14781540589019,1784.0 -112.3368169371048,36.14658677734382,1784.0 -112.3384408457543,36.14762778914076,1784.0 -112.3372510731295,36.14888505105317,1784.0</coordinates></LinearRing></outerBoundaryIs></Polygon></Placemark><Placemark><name>Absolute Extruded</name><visibility>0</visibility><open>0</open><styleUrl>#transRedPoly</styleUrl><Polygon><extrude>1</extrude><tessellate>1</tessellate><altitudeMode>absolute</altitudeMode><outerBoundaryIs><LinearRing><extrude>0</extrude><tessellate>0</tessellate><altitudeMode>clampToGround</altitudeMode><coordinates>-112.3396586818843,36.14637618647505,1784.0 -112.3380597654315,36.14531751871353,1784.0 -112.3368254237788,36.14659596244607,1784.0 -112.3384555043203,36.14762621763982,1784.0 -112.3396586818843,36.14637618647505,1784.0</coordinates></LinearRing></outerBoundaryIs></Polygon></Placemark><Placemark><name>Relative</name><visibility>0</visibility><open>0</open><LookAt><longitude>-112.3350152490417</longitude><latitude>36.14943123077423</latitude><altitude>0.0</altitude><heading>-118.9214100848499</heading><tilt>37.92486261093203</tilt><range>345.5169113679813</range></LookAt><styleUrl>#transGreenPoly</styleUrl><Polygon><extrude>0</extrude><tessellate>1</tessellate><altitudeMode>relativeToGround</altitudeMode><outerBoundaryIs><LinearRing><extrude>0</extrude><tessellate>0</tessellate><altitudeMode>clampToGround</altitudeMode><coordinates>-112.3349463145932,36.14988705767721,100.0 -112.3354019540677,36.14941108398372,100.0 -112.3344428289146,36.14878490381308,100.0 -112.3331289492913,36.14780840132443,100.0 -112.3317019516947,36.14680755678357,100.0 -112.331131440106,36.1474173426228,100.0 -112.332616324338,36.14845453364654,100.0 -112.3339876620524,36.14926570522069,100.0 -112.3349463145932,36.14988705767721,100.0</coordinates></LinearRing></outerBoundaryIs></Polygon></Placemark><Placemark><name>Relative Extruded</name><visibility>0</visibility><open>0</open><LookAt><longitude>-112.3351587892382</longitude><latitude>36.14979247129029</latitude><altitude>0.0</altitude><heading>-55.42811560891606</heading><tilt>56.10280503739589</tilt><range>401.0997279712519</range></LookAt><styleUrl>#transYellowPoly</styleUrl><Polygon><extrude>1</extrude><tessellate>1</tessellate><altitudeMode>relativeToGround</altitudeMode><outerBoundaryIs><LinearRing><extrude>0</extrude><tessellate>0</tessellate><altitudeMode>clampToGround</altitudeMode><coordinates>-112.3348783983763,36.1514008468736,100.0 -112.3372535345629,36.14888517553886,100.0 -112.3356068927954,36.14781612679284,100.0 -112.3350034807972,36.14846469024177,100.0 -112.3358353861232,36.1489624162954,100.0 -112.3345888301373,36.15026229372507,100.0 -112.3337937856278,36.14978096026463,100.0 -112.3331798208424,36.1504472788618,100.0 -112.3348783983763,36.1514008468736,100.0</coordinates></LinearRing></outerBoundaryIs></Polygon></Placemark></Folder></Folder></Document></kml>
\ No newline at end of file
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/KmlFactory.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/KmlFactory.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,406 @@
+package org.geotoolkit.data.model;
+
+import java.util.List;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.kml.AbstractFeature;
+import org.geotoolkit.data.model.kml.AbstractGeometry;
+import org.geotoolkit.data.model.kml.AbstractObject;
+import org.geotoolkit.data.model.kml.AbstractStyleSelector;
+import org.geotoolkit.data.model.kml.AbstractTimePrimitive;
+import org.geotoolkit.data.model.kml.AbstractView;
+import org.geotoolkit.data.model.kml.Alias;
+import org.geotoolkit.data.model.kml.AltitudeMode;
+import org.geotoolkit.data.model.kml.Angle180;
+import org.geotoolkit.data.model.kml.Angle360;
+import org.geotoolkit.data.model.kml.Angle90;
+import org.geotoolkit.data.model.kml.Anglepos180;
+import org.geotoolkit.data.model.kml.BalloonStyle;
+import org.geotoolkit.data.model.kml.BasicLink;
+import org.geotoolkit.data.model.kml.Boundary;
+import org.geotoolkit.data.model.kml.Camera;
+import org.geotoolkit.data.model.kml.Color;
+import org.geotoolkit.data.model.kml.ColorMode;
+import org.geotoolkit.data.model.kml.Coordinate;
+import org.geotoolkit.data.model.kml.Coordinates;
+import org.geotoolkit.data.model.kml.Data;
+import org.geotoolkit.data.model.kml.DisplayMode;
+import org.geotoolkit.data.model.kml.Document;
+import org.geotoolkit.data.model.kml.ExtendedData;
+import org.geotoolkit.data.model.kml.Folder;
+import org.geotoolkit.data.model.kml.GroundOverlay;
+import org.geotoolkit.data.model.kml.IconStyle;
+import org.geotoolkit.data.model.kml.IdAttributes;
+import org.geotoolkit.data.model.kml.ImagePyramid;
+import org.geotoolkit.data.model.kml.ItemIcon;
+import org.geotoolkit.data.model.kml.ItemIconState;
+import org.geotoolkit.data.model.kml.Kml;
+import org.geotoolkit.data.model.kml.KmlException;
+import org.geotoolkit.data.model.kml.LabelStyle;
+import org.geotoolkit.data.model.kml.LatLonAltBox;
+import org.geotoolkit.data.model.kml.LatLonBox;
+import org.geotoolkit.data.model.kml.LineString;
+import org.geotoolkit.data.model.kml.LineStyle;
+import org.geotoolkit.data.model.kml.LinearRing;
+import org.geotoolkit.data.model.kml.Link;
+import org.geotoolkit.data.model.kml.ListItem;
+import org.geotoolkit.data.model.kml.ListStyle;
+import org.geotoolkit.data.model.kml.Location;
+import org.geotoolkit.data.model.kml.Lod;
+import org.geotoolkit.data.model.kml.LookAt;
+import org.geotoolkit.data.model.kml.Model;
+import org.geotoolkit.data.model.kml.MultiGeometry;
+import org.geotoolkit.data.model.kml.NetworkLinkControl;
+import org.geotoolkit.data.model.kml.Orientation;
+import org.geotoolkit.data.model.kml.Pair;
+import org.geotoolkit.data.model.kml.PhotoOverlay;
+import org.geotoolkit.data.model.kml.Placemark;
+import org.geotoolkit.data.model.kml.Point;
+import org.geotoolkit.data.model.kml.PolyStyle;
+import org.geotoolkit.data.model.kml.Polygon;
+import org.geotoolkit.data.model.kml.RefreshMode;
+import org.geotoolkit.data.model.kml.Region;
+import org.geotoolkit.data.model.kml.ResourceMap;
+import org.geotoolkit.data.model.kml.Scale;
+import org.geotoolkit.data.model.kml.Schema;
+import org.geotoolkit.data.model.kml.SchemaData;
+import org.geotoolkit.data.model.kml.ScreenOverlay;
+import org.geotoolkit.data.model.kml.Shape;
+import org.geotoolkit.data.model.kml.SimpleData;
+import org.geotoolkit.data.model.kml.SimpleField;
+import org.geotoolkit.data.model.kml.Style;
+import org.geotoolkit.data.model.kml.StyleMap;
+import org.geotoolkit.data.model.kml.StyleState;
+import org.geotoolkit.data.model.kml.TimeSpan;
+import org.geotoolkit.data.model.kml.TimeStamp;
+import org.geotoolkit.data.model.kml.Units;
+import org.geotoolkit.data.model.kml.Vec2;
+import org.geotoolkit.data.model.kml.ViewRefreshMode;
+import org.geotoolkit.data.model.kml.ViewVolume;
+import org.geotoolkit.data.model.xal.AddressDetails;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface KmlFactory {
+
+    public Kml createKml(NetworkLinkControl networkLinkControl,
+            AbstractFeature abstractFeature,
+            List<SimpleType> kmlSimpleExtension,
+            List<AbstractObject> kmlObjectExtensions);
+
+    public Alias createAlias(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            String targetHref, String sourceHref,
+            List<SimpleType> aliasSimpleExtensions, List<AbstractObject> aliasObjectExtensions);
+    
+    public Angle180 createAngle180(double angle) throws KmlException;
+    public Anglepos180 createAnglepos180(double angle) throws KmlException;
+    public Angle360 createAngle360(double angle) throws KmlException;
+    public Angle90 createAngle90(double angle) throws KmlException;
+
+    public AtomLink createAtomLinkDefault(String href, String rel, String type, String hreflang, String title, String length);
+
+    public AtomPersonConstruct createAtomPersonConstruct(List<String> names, List<String> uris, List<String> emails);
+
+    public BalloonStyle createBalloonStyle(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color bgColor, Color textColor, String text, DisplayMode displayMode,
+            List<SimpleType> balloonStyleSimpleExtensions, List<AbstractObject> balloonStyleObjectExtensions);
+
+    public BasicLink createBasicLink(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String href, List<SimpleType> basicLinkSimpleExtensions, List<AbstractObject> basicLinkObjectExtensions);
+
+    public Boundary createBoundary(LinearRing linearRing,
+            List<SimpleType> boundarySimpleExtensions, List<AbstractObject> boundaryObjectExtensions);
+
+    public Camera createCamera(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractViewSimpleExtensions, List<AbstractObject> abstractViewObjectExtensions,
+            Angle180 longitude, Angle90 latitude, double altitude,
+            Angle360 heading, Anglepos180 tilt, Angle180 roll,
+            List<SimpleType> cameraSimpleExtensions, List<AbstractObject> cameraObjectExtensions);
+
+    public Color createColor(String color) throws KmlException;
+
+    public Coordinate createCoordinate(String listCoordinates);
+    public Coordinate createCoordinate(double geodeticLongiude, double geodeticLatitude, double altitude);
+    public Coordinate createCoordinate(double geodeticLongiude, double geodeticLatitude);
+
+    public Coordinates createCoordinates(List<Coordinate> coordinates);
+
+    public Data createData(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String displayName, String value, List<Object> dataExtensions);
+
+    public Document createDocument(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            List<SimpleType> abstractContainerSimpleExtensions,
+            List<AbstractObject> abstractContainerObjectExtensions,
+            List<Schema> schemas, List<AbstractFeature> features,
+            List<SimpleType> documentSimpleExtensions,
+            List<AbstractObject> documentObjectExtensions);
+
+    public ExtendedData createExtendedData(List<Data> datas, List<SchemaData> schemaDatas, List<Object> anyOtherElements);
+
+    public Folder createFolder(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            List<SimpleType> abstractContainerSimpleExtensions,
+            List<AbstractObject> abstractContainerObjectExtensions,
+            List<AbstractFeature> features,
+            List<SimpleType> folderSimpleExtensions,
+            List<AbstractObject> folderObjectExtensions);
+
+    public GroundOverlay createGroundOverlay(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            Color color, int drawOrder, Link icon,
+            List<SimpleType> abstractOveraySimpleExtensions, List<AbstractObject> abstractOverlayObjectExtensions,
+            double altitude, AltitudeMode altitudeMode, LatLonBox latLonBox,
+            List<SimpleType> groundOverlaySimpleExtensions, List<AbstractObject> groundOverlayObjectExtensions);
+
+    public IconStyle createIconStyle(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color color, ColorMode colorMode,
+            List<SimpleType> colorStyleSimpleExtensions, List<AbstractObject> colorStyleObjectExtensions,
+            double scale, Angle360 heading, BasicLink icon, Vec2 hotSpot,
+            List<SimpleType> iconStyleSimpleExtensions, List<AbstractObject> iconStyleObjectExtensions);
+
+    public IdAttributes createIdAttributes(String id, String targetId);
+
+    public ItemIcon createItemIcon(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<ItemIconState> states, String href,
+            List<SimpleType> itemIconSimpleExtensions, List<AbstractObject> itemIconObjectExtensions);
+
+    public LabelStyle createLabelStyle(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color color, ColorMode colorMode,
+            List<SimpleType> colorStyleSimpleExtensions, List<AbstractObject> colorStyleObjectExtensions,
+            double scale,
+            List<SimpleType> labelStyleSimpleExtensions, List<AbstractObject> labelStyleObjectExtensions);
+
+    public LatLonBox createLatLonBox(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            Angle180 north, Angle180 south, Angle180 east, Angle180 west,
+            List<SimpleType> abstractLatLonBoxSimpleExtensions, List<AbstractObject> abstractLatLonBoxObjectExtensions,
+            Angle180 rotation, List<SimpleType> latLonBoxSimpleExtensions, List<AbstractObject> latLonBoxObjectExtensions);
+
+    public LatLonAltBox createLatLonAltBox(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            Angle180 north, Angle180 south, Angle180 east, Angle180 west,
+            List<SimpleType> abstractLatLonBoxSimpleExtensions, List<AbstractObject> abstractLatLonBoxObjectExtensions,
+            double minAltitude, double maxAltitude, AltitudeMode altitudeMode,
+            List<SimpleType> latLonAltBoxSimpleExtensions, List<AbstractObject> latLonAltBoxObjectExtensions);
+
+    public LinearRing createLinearRing(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            boolean extrude, boolean tessellate,
+            AltitudeMode altitudeMode,
+            Coordinates coordinates,
+            List<SimpleType> linearRingSimpleExtensions,
+            List<AbstractObject> linearRingObjectExtensions);
+
+    public LineString createLineString(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            boolean extrude, boolean tessellate,
+            AltitudeMode altitudeMode,
+            Coordinates coordinates,
+            List<SimpleType> lineStringSimpleExtensions,
+            List<AbstractObject> lineStringObjectExtensions);
+
+    public LineStyle createLineStyle(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color color, ColorMode colorMode,
+            List<SimpleType> colorStyleSimpleExtensions, List<AbstractObject> colorStyleObjectExtensions,
+            double width,
+            List<SimpleType> lineStyleSimpleExtensions, List<AbstractObject> lineStyleObjectExtensions);
+
+    public Link createLink(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String href, List<SimpleType> basicLinkSimpleExtensions, List<AbstractObject> basicLinkObjectExtensions,
+            RefreshMode refreshMode, double refreshInterval, ViewRefreshMode viewRefreshMode, double viewRefreshTime,
+            double viewBoundScale, String viewFormat, String httpQuery,
+            List<SimpleType> linkSimpleExtensions, List<AbstractObject> linkObjectExtensions);
+
+    public ListStyle createListStyle(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            ListItem listItem, Color bgColor, List<ItemIcon> itemIcons, int maxSnippetLines,
+            List<SimpleType> listStyleSimpleExtensions, List<AbstractObject> listStyleObjectExtensions);
+
+    public Location createLocation(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            Angle180 longitude, Angle90 latitude, double altitude,
+            List<SimpleType> locationSimpleExtensions, List<AbstractObject> locationObjectExtensions);
+
+    public Lod createLod(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            double minLodPixels, double maxLodPixels, double minFadeExtent, double maxFadeExtent,
+            List<SimpleType> lodSimpleExtentions, List<AbstractObject> lodObjectExtensions);
+
+    public LookAt createLookAt(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractViewSimpleExtensions, List<AbstractObject> abstractViewObjectExtensions,
+            Angle180 longitude, Angle90 latitude, double altitude,
+            Angle360 heading, Anglepos180 tilt, double range,
+            List<SimpleType> lookAtSimpleExtensions, List<AbstractObject> lookAtObjectExtensions);
+
+    public Model createModel(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            AltitudeMode altitudeMode, Location location, Orientation orientation, Scale scale, Link link, ResourceMap resourceMap,
+            List<SimpleType> modelSimpleExtensions, List<AbstractObject> modelObjectExtensions);
+
+    public MultiGeometry createMultiGeometry(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            List<AbstractGeometry> geometries,
+            List<SimpleType> multiGeometrySimpleExtensions,
+            List<AbstractObject> multiGeometryObjectExtensions);
+
+    public Orientation createOrientation(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            Angle360 heading, Anglepos180 tilt, Angle180 roll,
+            List<SimpleType> orientationSimpleExtensions,
+            List<AbstractObject> orientationObjectExtensions);
+
+    public Pair createPair(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            StyleState key, String styleUrl, AbstractStyleSelector styleSelector,
+            List<SimpleType> pairSimpleExtensions,
+            List<AbstractObject> pairObjectExtensions);
+
+    public PhotoOverlay createPhotoOverlay(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            Color color, int drawOrder, Link icon,
+            List<SimpleType> abstractOveraySimpleExtensions, List<AbstractObject> abstractOverlayObjectExtensions,
+            Angle180 rotation, ViewVolume viewVolume, ImagePyramid imagePyramid, Point point, Shape shape,
+            List<SimpleType> photoOverlaySimpleExtensions, List<AbstractObject> photoOverlayObjectExtensions);
+
+    public Placemark createPlacemark(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            String name,
+            boolean visibility,
+            boolean open,
+            AtomPersonConstruct author,
+            AtomLink link,
+            String address,
+            AddressDetails addressDetails,
+            String phoneNumber, String snippet,
+            String description, AbstractView view,
+            AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            AbstractGeometry abstractGeometry,
+            List<SimpleType> placemarkSimpleExtensions,
+            List<AbstractObject> placemarkObjectExtension);
+
+    public Point createPoint(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            boolean extrude,
+            AltitudeMode altitudeMode,
+            Coordinates coordinates,
+            List<SimpleType> pointSimpleExtensions,
+            List<AbstractObject> pointObjectExtensions);
+
+    public Polygon createPolygon(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            boolean extrude, boolean tessellate, AltitudeMode altitudeMode,
+            Boundary outerBoundaryIs, List<Boundary> innerBoundariesAre,
+            List<SimpleType> polygonSimpleExtensions, List<AbstractObject> polygonObjectExtensions);
+
+    public PolyStyle createPolyStyle(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color color, ColorMode colorMode,
+            List<SimpleType> colorStyleSimpleExtensions, List<AbstractObject> colorStyleObjectExtensions,
+            boolean fill, boolean outline,
+            List<SimpleType> polyStyleSimpleExtensions, List<AbstractObject> polyStyleObjectExtensions);
+
+    public Region createRegion(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            LatLonAltBox latLonAltBox, Lod lod, List<SimpleType> regionSimpleExtensions, List<AbstractObject> regionObjectExtentions);
+
+    public ResourceMap createResourceMap(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<Alias> aliases,
+            List<SimpleType> resourceMapSimpleExtensions, List<AbstractObject> resourceMapObjectExtensions);
+
+    public Scale createScale(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes, double x, double y, double z,
+            List<SimpleType> scaleSimpleExtensions, List<AbstractObject> scaleObjectExtensions);
+
+    public Schema createSchema(List<SimpleField> simpleFields,
+            String name, String id);
+
+    public SchemaData createSchemaData(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleData> simpleDatas, List<Object> schemaDataExtensions);
+
+    public ScreenOverlay createScreenOverlay(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            Color color, int drawOrder, Link icon,
+            List<SimpleType> abstractOveraySimpleExtensions, List<AbstractObject> abstractOverlayObjectExtensions,
+            Vec2 overlayXY, Vec2 screenXY, Vec2 rotationXY, Vec2 size, Angle180 rotation,
+            List<SimpleType> screenOverlaySimpleExtensions, List<AbstractObject> screenOverlayObjectExtensions);
+
+    public SimpleData createSimpleData(String name, String content);
+
+    public SimpleField createSimpleField(String displayName, String type, String name);
+
+    public Style createStyle(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractStyleSelectorSimpleExtensions,
+            List<AbstractObject> abstractStyleSelectorObjectExtensions,
+            IconStyle iconStyle, LabelStyle labelStyle, LineStyle lineStyle, PolyStyle polyStyle, BalloonStyle balloonStyle, ListStyle listStyle,
+            List<SimpleType> styleSimpleExtensions,
+            List<AbstractObject> styleObjectExtensions);
+
+    public StyleMap createStyleMap(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractStyleSelectorSimpleExtensions,
+            List<AbstractObject> abstractStyleSelectorObjectExtensions,
+            List<Pair> pairs, List<SimpleType> styleMapSimpleExtensions, List<AbstractObject> styleMapObjectExtensions);
+
+    public TimeSpan createTimeSpan(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractTimePrimitiveSimpleExtensions, List<AbstractObject> abstractTimePrimitiveObjectExtensions,
+            String begin, String end, List<SimpleType> timeSpanSimpleExtensions, List<AbstractObject> timeSpanObjectExtensions);
+
+    public TimeStamp createTimeStamp(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractTimePrimitiveSimpleExtensions, List<AbstractObject> abstractTimePrimitiveObjectExtensions,
+            String when, List<SimpleType> timeStampSimpleExtensions, List<AbstractObject> timeStampObjectExtensions);
+
+    public Vec2 createVec2(double x, double y, Units xUnit, Units yUnit);
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/KmlFactoryDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/KmlFactoryDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,758 @@
+package org.geotoolkit.data.model;
+
+import java.util.List;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.atom.AtomLinkDefault;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.atom.AtomPersonConstructDefault;
+import org.geotoolkit.data.model.kml.AbstractFeature;
+import org.geotoolkit.data.model.kml.AbstractGeometry;
+import org.geotoolkit.data.model.kml.AbstractObject;
+import org.geotoolkit.data.model.kml.AbstractStyleSelector;
+import org.geotoolkit.data.model.kml.AbstractTimePrimitive;
+import org.geotoolkit.data.model.kml.AbstractView;
+import org.geotoolkit.data.model.kml.Alias;
+import org.geotoolkit.data.model.kml.AliasDefault;
+import org.geotoolkit.data.model.kml.AltitudeMode;
+import org.geotoolkit.data.model.kml.Angle180;
+import org.geotoolkit.data.model.kml.Angle180Default;
+import org.geotoolkit.data.model.kml.Angle360;
+import org.geotoolkit.data.model.kml.Angle360Default;
+import org.geotoolkit.data.model.kml.Angle90;
+import org.geotoolkit.data.model.kml.Angle90Default;
+import org.geotoolkit.data.model.kml.Anglepos180;
+import org.geotoolkit.data.model.kml.Anglepos180Default;
+import org.geotoolkit.data.model.kml.BalloonStyle;
+import org.geotoolkit.data.model.kml.BalloonStyleDefault;
+import org.geotoolkit.data.model.kml.BasicLink;
+import org.geotoolkit.data.model.kml.BasicLinkDefault;
+import org.geotoolkit.data.model.kml.Boundary;
+import org.geotoolkit.data.model.kml.BoundaryDefault;
+import org.geotoolkit.data.model.kml.Camera;
+import org.geotoolkit.data.model.kml.CameraDefault;
+import org.geotoolkit.data.model.kml.Color;
+import org.geotoolkit.data.model.kml.ColorDefault;
+import org.geotoolkit.data.model.kml.ColorMode;
+import org.geotoolkit.data.model.kml.Coordinate;
+import org.geotoolkit.data.model.kml.CoordinateDefault;
+import org.geotoolkit.data.model.kml.Coordinates;
+import org.geotoolkit.data.model.kml.CoordinatesDefault;
+import org.geotoolkit.data.model.kml.Data;
+import org.geotoolkit.data.model.kml.DataDefault;
+import org.geotoolkit.data.model.kml.DisplayMode;
+import org.geotoolkit.data.model.kml.Document;
+import org.geotoolkit.data.model.kml.DocumentDefault;
+import org.geotoolkit.data.model.kml.ExtendedData;
+import org.geotoolkit.data.model.kml.ExtendedDataDefault;
+import org.geotoolkit.data.model.kml.Folder;
+import org.geotoolkit.data.model.kml.FolderDefault;
+import org.geotoolkit.data.model.kml.GroundOverlay;
+import org.geotoolkit.data.model.kml.GroundOverlayDefault;
+import org.geotoolkit.data.model.kml.IconStyle;
+import org.geotoolkit.data.model.kml.IconStyleDefault;
+import org.geotoolkit.data.model.kml.IdAttributes;
+import org.geotoolkit.data.model.kml.IdAttributesDefault;
+import org.geotoolkit.data.model.kml.ImagePyramid;
+import org.geotoolkit.data.model.kml.ItemIcon;
+import org.geotoolkit.data.model.kml.ItemIconDefault;
+import org.geotoolkit.data.model.kml.ItemIconState;
+import org.geotoolkit.data.model.kml.Kml;
+import org.geotoolkit.data.model.kml.KmlDefault;
+import org.geotoolkit.data.model.kml.KmlException;
+import org.geotoolkit.data.model.kml.LabelStyle;
+import org.geotoolkit.data.model.kml.LabelStyleDefault;
+import org.geotoolkit.data.model.kml.LatLonAltBox;
+import org.geotoolkit.data.model.kml.LatLonAltBoxDefault;
+import org.geotoolkit.data.model.kml.LatLonBox;
+import org.geotoolkit.data.model.kml.LatLonBoxDefault;
+import org.geotoolkit.data.model.kml.LineString;
+import org.geotoolkit.data.model.kml.LineStringDefault;
+import org.geotoolkit.data.model.kml.LineStyle;
+import org.geotoolkit.data.model.kml.LineStyleDefault;
+import org.geotoolkit.data.model.kml.LinearRing;
+import org.geotoolkit.data.model.kml.LinearRingDefault;
+import org.geotoolkit.data.model.kml.Link;
+import org.geotoolkit.data.model.kml.LinkDefault;
+import org.geotoolkit.data.model.kml.ListItem;
+import org.geotoolkit.data.model.kml.ListStyle;
+import org.geotoolkit.data.model.kml.ListStyleDefault;
+import org.geotoolkit.data.model.kml.Location;
+import org.geotoolkit.data.model.kml.LocationDefault;
+import org.geotoolkit.data.model.kml.Lod;
+import org.geotoolkit.data.model.kml.LodDefault;
+import org.geotoolkit.data.model.kml.LookAt;
+import org.geotoolkit.data.model.kml.LookAtDefault;
+import org.geotoolkit.data.model.kml.Model;
+import org.geotoolkit.data.model.kml.ModelDefault;
+import org.geotoolkit.data.model.kml.MultiGeometry;
+import org.geotoolkit.data.model.kml.MultiGeometryDefault;
+import org.geotoolkit.data.model.kml.NetworkLinkControl;
+import org.geotoolkit.data.model.kml.Orientation;
+import org.geotoolkit.data.model.kml.OrientationDefault;
+import org.geotoolkit.data.model.kml.Pair;
+import org.geotoolkit.data.model.kml.PairDefault;
+import org.geotoolkit.data.model.kml.PhotoOverlay;
+import org.geotoolkit.data.model.kml.PhotoOverlayDefault;
+import org.geotoolkit.data.model.kml.Placemark;
+import org.geotoolkit.data.model.kml.PlacemarkDefault;
+import org.geotoolkit.data.model.kml.Point;
+import org.geotoolkit.data.model.kml.PointDefault;
+import org.geotoolkit.data.model.kml.PolyStyle;
+import org.geotoolkit.data.model.kml.PolyStyleDefault;
+import org.geotoolkit.data.model.kml.Polygon;
+import org.geotoolkit.data.model.kml.PolygonDefault;
+import org.geotoolkit.data.model.kml.RefreshMode;
+import org.geotoolkit.data.model.kml.Region;
+import org.geotoolkit.data.model.kml.RegionDefault;
+import org.geotoolkit.data.model.kml.ResourceMap;
+import org.geotoolkit.data.model.kml.ResourceMapDefault;
+import org.geotoolkit.data.model.kml.Scale;
+import org.geotoolkit.data.model.kml.ScaleDefault;
+import org.geotoolkit.data.model.kml.Schema;
+import org.geotoolkit.data.model.kml.SchemaData;
+import org.geotoolkit.data.model.kml.SchemaDataDefault;
+import org.geotoolkit.data.model.kml.SchemaDefault;
+import org.geotoolkit.data.model.kml.ScreenOverlay;
+import org.geotoolkit.data.model.kml.ScreenOverlayDefault;
+import org.geotoolkit.data.model.kml.Shape;
+import org.geotoolkit.data.model.kml.SimpleData;
+import org.geotoolkit.data.model.kml.SimpleDataDefault;
+import org.geotoolkit.data.model.kml.SimpleField;
+import org.geotoolkit.data.model.kml.SimpleFieldDefault;
+import org.geotoolkit.data.model.kml.Style;
+import org.geotoolkit.data.model.kml.StyleDefault;
+import org.geotoolkit.data.model.kml.StyleMap;
+import org.geotoolkit.data.model.kml.StyleMapDefault;
+import org.geotoolkit.data.model.kml.StyleState;
+import org.geotoolkit.data.model.kml.TimeSpan;
+import org.geotoolkit.data.model.kml.TimeSpanDefault;
+import org.geotoolkit.data.model.kml.TimeStamp;
+import org.geotoolkit.data.model.kml.TimeStampDefault;
+import org.geotoolkit.data.model.kml.Units;
+import org.geotoolkit.data.model.kml.Vec2;
+import org.geotoolkit.data.model.kml.Vec2Default;
+import org.geotoolkit.data.model.kml.ViewRefreshMode;
+import org.geotoolkit.data.model.kml.ViewVolume;
+import org.geotoolkit.data.model.xal.AddressDetails;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class KmlFactoryDefault implements KmlFactory{
+
+    @Override
+    public Kml createKml(NetworkLinkControl networkLinkControl,
+            AbstractFeature abstractFeature,
+            List<SimpleType> kmlSimpleExtensions,
+            List<AbstractObject> kmlObjectExtensions){
+        return new KmlDefault(networkLinkControl, abstractFeature, 
+                kmlSimpleExtensions, kmlObjectExtensions);
+    }
+
+    @Override
+    public Alias createAlias(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            String targetHref, String sourceHref,
+            List<SimpleType> aliasSimpleExtensions, List<AbstractObject> aliasObjectExtensions){
+        return new AliasDefault(objectSimpleExtensions, idAttributes,
+                targetHref, sourceHref, aliasSimpleExtensions, aliasObjectExtensions);
+    }
+
+    @Override
+    public Angle180 createAngle180(double angle) throws KmlException{
+        return new Angle180Default(angle);
+    }
+
+    @Override
+    public Anglepos180 createAnglepos180(double angle) throws KmlException{
+        return new Anglepos180Default(angle);
+    }
+
+    @Override
+    public Angle360 createAngle360(double angle) throws KmlException{
+        return new Angle360Default(angle);
+    }
+
+    @Override
+    public Angle90 createAngle90(double angle) throws KmlException{
+        return new Angle90Default(angle);
+    }
+
+    @Override
+    public AtomLink createAtomLinkDefault(String href, String rel, String type, String hreflang, String title, String length){
+        return new AtomLinkDefault(href, rel, type, hreflang, title, length);
+    }
+
+    @Override
+    public AtomPersonConstruct createAtomPersonConstruct(List<String> names, List<String> uris, List<String> emails){
+        return new AtomPersonConstructDefault(names, uris, emails);
+    }
+
+    @Override
+    public BalloonStyle createBalloonStyle(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color bgColor, Color textColor, String text, DisplayMode displayMode,
+            List<SimpleType> balloonStyleSimpleExtensions, List<AbstractObject> balloonStyleObjectExtensions){
+        return new BalloonStyleDefault(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                bgColor, textColor, text, displayMode,
+                balloonStyleSimpleExtensions, balloonStyleObjectExtensions);
+    }
+
+    @Override
+    public BasicLink createBasicLink(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String href, List<SimpleType> basicLinkSimpleExtensions, List<AbstractObject> basicLinkObjectExtensions){
+        return new BasicLinkDefault(objectSimpleExtensions, idAttributes, href, basicLinkSimpleExtensions, basicLinkObjectExtensions);
+    }
+
+    @Override
+    public Boundary createBoundary(LinearRing linearRing,
+            List<SimpleType> boundarySimpleExtensions, List<AbstractObject> boundaryObjectExtensions){
+        return new BoundaryDefault(linearRing, boundarySimpleExtensions, boundaryObjectExtensions);
+    }
+
+    @Override
+    public Camera createCamera(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractViewSimpleExtensions, List<AbstractObject> abstractViewObjectExtensions,
+            Angle180 longitude, Angle90 latitude, double altitude,
+            Angle360 heading, Anglepos180 tilt, Angle180 roll,
+            List<SimpleType> cameraSimpleExtensions, List<AbstractObject> cameraObjectExtensions){
+        return new CameraDefault(objectSimpleExtensions, idAttributes,
+                abstractViewSimpleExtensions, abstractViewObjectExtensions,
+                longitude, latitude, altitude, heading, tilt, roll,
+                cameraSimpleExtensions, cameraObjectExtensions);
+    }
+
+    @Override
+    public Color createColor(String color) throws KmlException{
+        return new ColorDefault(color);
+    }
+
+    @Override
+    public Coordinate createCoordinate(String listCoordinates) {
+        return new CoordinateDefault(listCoordinates);
+    }
+
+    @Override
+    public Coordinate createCoordinate(double geodeticLongiude, double geodeticLatitude, double altitude) {
+        return new CoordinateDefault(geodeticLongiude, geodeticLatitude, altitude);
+    }
+
+    @Override
+    public Coordinate createCoordinate(double geodeticLongiude, double geodeticLatitude) {
+        return new CoordinateDefault(geodeticLongiude, geodeticLatitude);
+    }
+
+    @Override
+    public Coordinates createCoordinates(List<Coordinate> coordinates) {
+        return new CoordinatesDefault(coordinates);
+    }
+
+    @Override
+    public Data createData(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String displayName, String value, List<Object> dataExtensions){
+        return new DataDefault(objectSimpleExtensions, idAttributes,
+                displayName, value, dataExtensions);
+    }
+
+    @Override
+    public Document createDocument(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            List<SimpleType> abstractContainerSimpleExtensions,
+            List<AbstractObject> abstractContainerObjectExtensions,
+            List<Schema> schemas, List<AbstractFeature> features,
+            List<SimpleType> documentSimpleExtensions,
+            List<AbstractObject> documentObjectExtensions){
+        return new DocumentDefault(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link, address, addressDetails, phoneNumber,
+                snippet, description, view, timePrimitive, styleUrl, styleSelector,
+                region, extendedData,
+                abstractFeatureSimpleExtensions, abstractFeatureObjectExtensions,
+                abstractContainerSimpleExtensions, abstractContainerObjectExtensions,
+                schemas, features, documentSimpleExtensions, documentObjectExtensions);
+    }
+
+    @Override
+    public ExtendedData createExtendedData(List<Data> datas, List<SchemaData> schemaDatas, List<Object> anyOtherElements){
+        return new ExtendedDataDefault(datas, schemaDatas, anyOtherElements);
+    }
+
+    @Override
+    public Folder createFolder(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            List<SimpleType> abstractContainerSimpleExtensions,
+            List<AbstractObject> abstractContainerObjectExtensions,
+            List<AbstractFeature> features,
+            List<SimpleType> folderSimpleExtensions,
+            List<AbstractObject> folderObjectExtensions){
+        return new FolderDefault(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link, address, addressDetails, phoneNumber,
+                snippet, description, view, timePrimitive, styleUrl, styleSelector,
+                region, extendedData,
+                abstractFeatureSimpleExtensions, abstractFeatureObjectExtensions,
+                abstractContainerSimpleExtensions, abstractContainerObjectExtensions,
+                features, folderSimpleExtensions, folderObjectExtensions);
+    }
+
+    @Override
+    public GroundOverlay createGroundOverlay(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            Color color, int drawOrder, Link icon,
+            List<SimpleType> abstractOveraySimpleExtensions, List<AbstractObject> abstractOverlayObjectExtensions,
+            double altitude, AltitudeMode altitudeMode, LatLonBox latLonBox,
+            List<SimpleType> groundOverlaySimpleExtensions, List<AbstractObject> groundOverlayObjectExtensions){
+        return new GroundOverlayDefault(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link,
+                address, addressDetails, phoneNumber, snippet,
+                description, view, timePrimitive,
+                styleUrl, styleSelector,
+                region, extendedData,
+                abstractFeatureSimpleExtensions, abstractFeatureObjectExtensions,
+                color, drawOrder, icon,
+                abstractOveraySimpleExtensions, abstractOverlayObjectExtensions,
+                altitude, altitudeMode, latLonBox,
+                groundOverlaySimpleExtensions, groundOverlayObjectExtensions);
+    }
+
+    @Override
+    public IconStyle createIconStyle(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color color, ColorMode colorMode,
+            List<SimpleType> colorStyleSimpleExtensions, List<AbstractObject> colorStyleObjectExtensions,
+            double scale, Angle360 heading, BasicLink icon, Vec2 hotSpot,
+            List<SimpleType> iconStyleSimpleExtensions, List<AbstractObject> iconStyleObjectExtensions){
+        return new IconStyleDefault(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                color, colorMode,
+                colorStyleSimpleExtensions, colorStyleObjectExtensions,
+                scale, heading, icon, hotSpot,
+                iconStyleSimpleExtensions, iconStyleObjectExtensions);
+    }
+    
+    @Override
+    public IdAttributes createIdAttributes(String id, String targetId){
+        return new IdAttributesDefault(id, targetId);
+    }
+
+    @Override
+    public ItemIcon createItemIcon(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<ItemIconState> states, String href,
+            List<SimpleType> itemIconSimpleExtensions, List<AbstractObject> itemIconObjectExtensions){
+        return new ItemIconDefault(objectSimpleExtensions, idAttributes,
+                states, href, itemIconSimpleExtensions, itemIconObjectExtensions);
+    }
+
+    @Override
+    public LabelStyle createLabelStyle(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color color, ColorMode colorMode,
+            List<SimpleType> colorStyleSimpleExtensions, List<AbstractObject> colorStyleObjectExtensions,
+            double scale,
+            List<SimpleType> labelStyleSimpleExtensions, List<AbstractObject> labelStyleObjectExtensions){
+        return new LabelStyleDefault(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                color, colorMode, colorStyleSimpleExtensions, colorStyleObjectExtensions,
+                scale, labelStyleSimpleExtensions, labelStyleObjectExtensions);
+    }
+
+    @Override
+    public LatLonBox createLatLonBox(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            Angle180 north, Angle180 south, Angle180 east, Angle180 west,
+            List<SimpleType> abstractLatLonBoxSimpleExtensions, List<AbstractObject> abstractLatLonBoxObjectExtensions,
+            Angle180 rotation, List<SimpleType> latLonBoxSimpleExtensions, List<AbstractObject> latLonBoxObjectExtensions){
+        return new LatLonBoxDefault(objectSimpleExtensions, idAttributes,
+                north, south, east, west, abstractLatLonBoxSimpleExtensions, abstractLatLonBoxObjectExtensions,
+                rotation, latLonBoxSimpleExtensions, latLonBoxObjectExtensions);
+    }
+
+    @Override
+    public LatLonAltBox createLatLonAltBox(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            Angle180 north, Angle180 south, Angle180 east, Angle180 west,
+            List<SimpleType> abstractLatLonBoxSimpleExtensions, List<AbstractObject> abstractLatLonBoxObjectExtensions,
+            double minAltitude, double maxAltitude, AltitudeMode altitudeMode,
+            List<SimpleType> latLonAltBoxSimpleExtensions, List<AbstractObject> latLonAltBoxObjectExtensions){
+        return new LatLonAltBoxDefault(objectSimpleExtensions, idAttributes,
+                north, south, east, west, abstractLatLonBoxSimpleExtensions, abstractLatLonBoxObjectExtensions,
+                minAltitude, maxAltitude, altitudeMode, latLonAltBoxSimpleExtensions, latLonAltBoxObjectExtensions);
+    }
+
+    @Override
+    public LinearRing createLinearRing(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            boolean extrude, boolean tessellate,
+            AltitudeMode altitudeMode,
+            Coordinates coordinates,
+            List<SimpleType> linearRingSimpleExtensions,
+            List<AbstractObject> linearRingObjectExtensions){
+        return new LinearRingDefault(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions,
+                extrude, tessellate,
+                altitudeMode, coordinates,
+                linearRingSimpleExtensions, linearRingObjectExtensions);
+    }
+
+    @Override
+    public LineString createLineString(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            boolean extrude, boolean tessellate,
+            AltitudeMode altitudeMode,
+            Coordinates coordinates,
+            List<SimpleType> lineStringSimpleExtensions,
+            List<AbstractObject> lineStringObjectExtensions){
+        return new LineStringDefault(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions,
+                extrude, tessellate, altitudeMode, coordinates,
+                lineStringSimpleExtensions, lineStringObjectExtensions);
+    }
+
+    @Override
+    public LineStyle createLineStyle(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color color, ColorMode colorMode,
+            List<SimpleType> colorStyleSimpleExtensions, List<AbstractObject> colorStyleObjectExtensions,
+            double width,
+            List<SimpleType> lineStyleSimpleExtensions, List<AbstractObject> lineStyleObjectExtensions){
+        return new LineStyleDefault(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                color, colorMode, colorStyleSimpleExtensions, colorStyleObjectExtensions,
+                width, lineStyleSimpleExtensions, lineStyleObjectExtensions);
+    }
+    
+    @Override
+    public Link createLink(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String href, List<SimpleType> basicLinkSimpleExtensions, List<AbstractObject> basicLinkObjectExtensions,
+            RefreshMode refreshMode, double refreshInterval, ViewRefreshMode viewRefreshMode, double viewRefreshTime,
+            double viewBoundScale, String viewFormat, String httpQuery,
+            List<SimpleType> linkSimpleExtensions, List<AbstractObject> linkObjectExtensions){
+        return new LinkDefault(objectSimpleExtensions, idAttributes,
+                href, basicLinkSimpleExtensions, basicLinkObjectExtensions, refreshMode, refreshInterval, viewRefreshMode, viewRefreshTime, viewBoundScale, viewFormat, httpQuery, linkSimpleExtensions, linkObjectExtensions);
+    }
+
+    @Override
+    public ListStyle createListStyle(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            ListItem listItem, Color bgColor, List<ItemIcon> itemIcons, int maxSnippetLines,
+            List<SimpleType> listStyleSimpleExtensions, List<AbstractObject> listStyleObjectExtensions){
+        return new ListStyleDefault(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                listItem, bgColor, itemIcons, maxSnippetLines,
+                listStyleSimpleExtensions, listStyleObjectExtensions);
+    }
+
+    @Override
+    public Location createLocation(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            Angle180 longitude, Angle90 latitude, double altitude,
+            List<SimpleType> locationSimpleExtensions, List<AbstractObject> locationObjectExtensions){
+        return new LocationDefault(objectSimpleExtensions, idAttributes,
+                longitude, latitude, altitude,
+                locationSimpleExtensions, locationObjectExtensions);
+    }
+
+    @Override
+    public Lod createLod(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            double minLodPixels, double maxLodPixels, double minFadeExtent, double maxFadeExtent,
+            List<SimpleType> lodSimpleExtentions, List<AbstractObject> lodObjectExtensions){
+        return new LodDefault(objectSimpleExtensions, idAttributes,
+                minLodPixels, maxLodPixels, minFadeExtent, maxFadeExtent,
+                lodSimpleExtentions, lodObjectExtensions);
+    }
+
+    @Override
+    public LookAt createLookAt(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractViewSimpleExtensions, List<AbstractObject> abstractViewObjectExtensions,
+            Angle180 longitude, Angle90 latitude, double altitude,
+            Angle360 heading, Anglepos180 tilt, double range,
+            List<SimpleType> lookAtSimpleExtensions, List<AbstractObject> lookAtObjectExtensions){
+        return new LookAtDefault(objectSimpleExtensions, idAttributes,
+                abstractViewSimpleExtensions, abstractViewObjectExtensions,
+                longitude, latitude, altitude, heading, tilt, range,
+                lookAtSimpleExtensions, lookAtObjectExtensions);
+    }
+
+    @Override
+    public Model createModel(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            AltitudeMode altitudeMode, Location location, Orientation orientation, Scale scale, Link link, ResourceMap resourceMap,
+            List<SimpleType> modelSimpleExtensions, List<AbstractObject> modelObjectExtensions){
+        return new ModelDefault(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions,
+                altitudeMode, location, orientation, scale, link, resourceMap,
+                modelSimpleExtensions, modelObjectExtensions);
+    }
+
+    @Override
+    public MultiGeometry createMultiGeometry(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            List<AbstractGeometry> geometries,
+            List<SimpleType> multiGeometrySimpleExtensions,
+            List<AbstractObject> multiGeometryObjectExtensions){
+        return new MultiGeometryDefault(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions,
+                geometries, multiGeometrySimpleExtensions, multiGeometryObjectExtensions);
+    }
+
+    @Override
+    public Orientation createOrientation(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            Angle360 heading, Anglepos180 tilt, Angle180 roll,
+            List<SimpleType> orientationSimpleExtensions,
+            List<AbstractObject> orientationObjectExtensions){
+        return new OrientationDefault(objectSimpleExtensions, idAttributes,
+                heading, tilt, roll,
+                orientationSimpleExtensions, orientationObjectExtensions);
+    }
+
+    @Override
+    public Pair createPair(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            StyleState key, String styleUrl, AbstractStyleSelector styleSelector,
+            List<SimpleType> pairSimpleExtensions,
+            List<AbstractObject> pairObjectExtensions){
+        return new PairDefault(objectSimpleExtensions, idAttributes,
+                key, styleUrl, styleSelector,
+                pairSimpleExtensions, pairObjectExtensions);
+    }
+
+    @Override
+    public PhotoOverlay createPhotoOverlay(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            Color color, int drawOrder, Link icon,
+            List<SimpleType> abstractOveraySimpleExtensions, List<AbstractObject> abstractOverlayObjectExtensions,
+            Angle180 rotation, ViewVolume viewVolume, ImagePyramid imagePyramid, Point point, Shape shape,
+            List<SimpleType> photoOverlaySimpleExtensions, List<AbstractObject> photoOverlayObjectExtensions){
+        return new PhotoOverlayDefault(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link, address,
+                addressDetails, phoneNumber, snippet, description,
+                view, timePrimitive, styleUrl, styleSelector, region, extendedData,
+                abstractFeatureSimpleExtensions, abstractFeatureObjectExtensions,
+                color, drawOrder, icon,
+                abstractOveraySimpleExtensions, abstractOverlayObjectExtensions,
+                rotation, viewVolume, imagePyramid, point, shape,
+                photoOverlaySimpleExtensions, photoOverlayObjectExtensions);
+    }
+
+    @Override
+    public Placemark createPlacemark(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            String name,
+            boolean visibility,
+            boolean open,
+            AtomPersonConstruct author,
+            AtomLink link,
+            String address,
+            AddressDetails addressDetails,
+            String phoneNumber, String snippet,
+            String description, AbstractView view,
+            AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            AbstractGeometry abstractGeometry,
+            List<SimpleType> placemarkSimpleExtensions,
+            List<AbstractObject> placemarkObjectExtension){
+        return new PlacemarkDefault(objectSimpleExtensions, idAttributes, name, visibility,
+                open, author, link, address, addressDetails, phoneNumber, snippet, description, view, timePrimitive,
+                styleUrl, styleSelector, region, extendedData,
+                abstractFeatureSimpleExtensions,
+                abstractFeatureObjectExtensions,
+                abstractGeometry,
+                placemarkSimpleExtensions, placemarkObjectExtension);
+    }
+
+    @Override
+    public Point createPoint(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            boolean extrude,
+            AltitudeMode altitudeMode,
+            Coordinates coordinates,
+            List<SimpleType> pointSimpleExtensions,
+            List<AbstractObject> pointObjectExtensions){
+        return new PointDefault(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions,
+                extrude, altitudeMode, coordinates, pointSimpleExtensions, pointObjectExtensions);
+    }
+
+    @Override
+    public Polygon createPolygon(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            boolean extrude, boolean tessellate, AltitudeMode altitudeMode,
+            Boundary outerBoundaryIs, List<Boundary> innerBoundariesAre,
+            List<SimpleType> polygonSimpleExtensions, List<AbstractObject> polygonObjectExtensions){
+        return new PolygonDefault(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions,
+                extrude, tessellate, altitudeMode, outerBoundaryIs, innerBoundariesAre,
+                polygonSimpleExtensions, polygonObjectExtensions);
+    }
+
+    @Override
+    public PolyStyle createPolyStyle(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color color, ColorMode colorMode,
+            List<SimpleType> colorStyleSimpleExtensions, List<AbstractObject> colorStyleObjectExtensions,
+            boolean fill, boolean outline,
+            List<SimpleType> polyStyleSimpleExtensions, List<AbstractObject> polyStyleObjectExtensions){
+        return new PolyStyleDefault(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                color, colorMode, colorStyleSimpleExtensions, colorStyleObjectExtensions,
+                fill, outline, polyStyleSimpleExtensions, polyStyleObjectExtensions);
+    }
+
+    @Override
+    public Region createRegion(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            LatLonAltBox latLonAltBox, Lod lod, List<SimpleType> regionSimpleExtensions, List<AbstractObject> regionObjectExtentions){
+        return new RegionDefault(objectSimpleExtensions, idAttributes,
+                latLonAltBox, lod, regionSimpleExtensions, regionObjectExtentions);
+    }
+
+    @Override
+    public ResourceMap createResourceMap(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<Alias> aliases,
+            List<SimpleType> resourceMapSimpleExtensions, List<AbstractObject> resourceMapObjectExtensions){
+        return new ResourceMapDefault(objectSimpleExtensions, idAttributes,
+                aliases, resourceMapSimpleExtensions, resourceMapObjectExtensions);
+    }
+
+    @Override
+    public Scale createScale(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes, double x, double y, double z,
+            List<SimpleType> scaleSimpleExtensions, List<AbstractObject> scaleObjectExtensions){
+        return new ScaleDefault(objectSimpleExtensions, idAttributes, x, y, z, scaleSimpleExtensions, scaleObjectExtensions);
+    }
+
+    @Override
+    public Schema createSchema(List<SimpleField> simpleFields,
+            String name, String id){
+        return new SchemaDefault(simpleFields, name, id);
+    }
+
+    @Override
+    public SchemaData createSchemaData(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleData> simpleDatas, List<Object> schemaDataExtensions){
+        return new SchemaDataDefault(objectSimpleExtensions, idAttributes,
+                simpleDatas, schemaDataExtensions);
+    }
+
+    @Override
+    public ScreenOverlay createScreenOverlay(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            Color color, int drawOrder, Link icon,
+            List<SimpleType> abstractOveraySimpleExtensions, List<AbstractObject> abstractOverlayObjectExtensions,
+            Vec2 overlayXY, Vec2 screenXY, Vec2 rotationXY, Vec2 size, Angle180 rotation,
+            List<SimpleType> screenOverlaySimpleExtensions, List<AbstractObject> screenOverlayObjectExtensions){
+        return new ScreenOverlayDefault(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link, address,
+                addressDetails, phoneNumber, snippet,
+                description, view, timePrimitive, styleUrl,
+                styleSelector, region, extendedData,
+                abstractFeatureSimpleExtensions, abstractFeatureObjectExtensions,
+                color, drawOrder, icon,
+                abstractOveraySimpleExtensions, abstractOverlayObjectExtensions,
+                overlayXY, screenXY, rotationXY, size, rotation,
+                screenOverlaySimpleExtensions, screenOverlayObjectExtensions);
+    }
+
+    @Override
+    public SimpleData createSimpleData(String name, String content){
+        return new SimpleDataDefault(name, content);
+    }
+
+    @Override
+    public SimpleField createSimpleField(String displayName, String type, String name){
+        return new SimpleFieldDefault(displayName, type, name);
+    }
+
+    @Override
+    public Style createStyle(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractStyleSelectorSimpleExtensions,
+            List<AbstractObject> abstractStyleSelectorObjectExtensions,
+            IconStyle iconStyle, LabelStyle labelStyle, LineStyle lineStyle, PolyStyle polyStyle, BalloonStyle balloonStyle, ListStyle listStyle,
+            List<SimpleType> styleSimpleExtensions,
+            List<AbstractObject> styleObjectExtensions){
+        return new StyleDefault(objectSimpleExtensions, idAttributes,
+                abstractStyleSelectorSimpleExtensions, abstractStyleSelectorObjectExtensions,
+                iconStyle, labelStyle, lineStyle, polyStyle, balloonStyle, listStyle,
+                styleSimpleExtensions, styleObjectExtensions);
+    }
+
+    @Override
+    public StyleMap createStyleMap(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractStyleSelectorSimpleExtensions,
+            List<AbstractObject> abstractStyleSelectorObjectExtensions,
+            List<Pair> pairs, List<SimpleType> styleMapSimpleExtensions, List<AbstractObject> styleMapObjectExtensions){
+        return new StyleMapDefault(objectSimpleExtensions, idAttributes,
+                abstractStyleSelectorSimpleExtensions, abstractStyleSelectorObjectExtensions,
+                pairs, styleMapSimpleExtensions, styleMapObjectExtensions);
+    }
+
+    @Override
+    public TimeSpan createTimeSpan(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractTimePrimitiveSimpleExtensions, List<AbstractObject> abstractTimePrimitiveObjectExtensions,
+            String begin, String end, List<SimpleType> timeSpanSimpleExtensions, List<AbstractObject> timeSpanObjectExtensions){
+        return new TimeSpanDefault(objectSimpleExtensions, idAttributes,
+                abstractTimePrimitiveSimpleExtensions, abstractTimePrimitiveObjectExtensions,
+                begin, end, timeSpanSimpleExtensions, timeSpanObjectExtensions);
+    }
+
+    @Override
+    public TimeStamp createTimeStamp(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractTimePrimitiveSimpleExtensions, List<AbstractObject> abstractTimePrimitiveObjectExtensions,
+            String when, List<SimpleType> timeStampSimpleExtensions, List<AbstractObject> timeStampObjectExtensions){
+        return new TimeStampDefault(objectSimpleExtensions, idAttributes,
+                abstractTimePrimitiveSimpleExtensions, abstractTimePrimitiveObjectExtensions,
+                when, timeStampSimpleExtensions, timeStampObjectExtensions);
+    }
+
+    @Override
+    public Vec2 createVec2(double x, double y, Units xUnit, Units yUnit){
+        return new Vec2Default(x, y, xUnit, yUnit);
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/ModelConstants.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/ModelConstants.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,179 @@
+package org.geotoolkit.data.model;
+
+import org.geotoolkit.data.model.kml.Angle360;
+import org.geotoolkit.data.model.kml.ColorMode;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public final class ModelConstants {
+
+    // NAMESPACES
+    public static final String URI_KML = "http://www.opengis.net/kml/2.2";
+    public static final String URI_XAL = "urn:oasis:names:tc:ciq:xsdschema:xAL:2.0";
+    public static final String URI_ATOM = "http://www.w3.org/2005/Atom";
+    public static final String URI_XSI = "http://www.w3.org/2001/XMLSchema-instance";
+    public static final String PREFIX_XAL = "xal";
+    public static final String PREFIX_ATOM = "atom";
+    public static final String PREFIX_XSI = "xsi";
+
+    public static final String TAG_KML = "kml";
+
+    // TAGS NETWORK LINK CONTROL
+    public static final String TAG_NETWORK_LINK_CONTROL = "NetworkLinkControl";
+
+    // TAGS ABSTRACT FEATURE
+    public static final String TAG_NETWORK_LINK = "NetworkLink";
+    public static final String TAG_PLACEMARK = "Placemark";
+
+    // TAGS ABSTRACT CONTAINER
+    public static final String TAG_FOLDER = "Folder";
+    public static final String TAG_DOCUMENT = "Document";
+
+    // TAGS ABSTRACT OVERLAY
+    public static final String TAG_GROUND_OVERLAY = "GroundOverlay";
+    public static final String TAG_PHOTO_OVERLAY = "PhotoOverlay";
+    public static final String TAG_SCREEN_OVERLAY = "ScreenOverlay";
+
+    // TAGS ABSTRACT VIEW
+    public static final String TAG_LOOK_AT = "LookAt";
+    public static final String TAG_CAMERA = "Camera";
+
+    // TAGS ABSTRACT TIME PRIMITIVE
+    public static final String TAG_TIME_STAMP = "TimeStamp";
+    public static final String TAG_TIME_SPAN = "TimeSpan";
+
+    // TAGS ABSTRACT STYLE SELECTOR
+    public static final String TAG_STYLE = "Style";
+    public static final String TAG_STYLE_MAP = "StyleMap";
+
+    // TAGS ABSTRACT GEOMETRY
+    public static final String TAG_MULTI_GEOMETRY = "MultiGeometry";
+    public static final String TAG_LINE_STRING = "LineString";
+    public static final String TAG_POLYGON = "Polygon";
+    public static final String TAG_POINT = "Point";
+    public static final String TAG_LINEAR_RING = "LinearRing";
+    public static final String TAG_MODEL = "Model";
+
+    // TAGS ABSTRACT COLOR STYLE
+    public static final String TAG_BALLOON_STYLE = "BalloonStyle";
+    public static final String TAG_COLOR_MODE = "colorMode";
+    public static final String TAG_DISPLAY_MODE = "displayMode";
+    public static final String TAG_ICON_STYLE = "IconStyle";
+    public static final String TAG_LABEL_STYLE = "LabelStyle";
+    public static final String TAG_LINE_STYLE = "LineStyle";
+    public static final String TAG_LIST_STYLE = "ListStyle";
+    public static final String TAG_POLY_STYLE = "PolyStyle";
+
+    // ELEMENTARY TAGS -- KML
+    public static final String TAG_ADDRESS = "address";
+    public static final String TAG_ALIAS = "Alias";
+    public static final String TAG_ALTITUDE = "altitude";
+    public static final String TAG_ALTITUDE_MODE = "altitudeMode";
+    public static final String TAG_BEGIN = "begin";
+    public static final String TAG_BG_COLOR = "bgColor";
+    public static final String TAG_COLOR = "color";
+    public static final String TAG_COORDINATES = "coordinates";
+    public static final String TAG_DATA = "Data";
+    public static final String TAG_DESCRIPTION = "description";
+    public static final String TAG_DISPLAY_NAME = "displayName";
+    public static final String TAG_DRAW_ORDER = "drawOrder";
+    public static final String TAG_EAST = "east";
+    public static final String TAG_END = "end";
+    public static final String TAG_EXTENDED_DATA = "ExtendedData";
+    public static final String TAG_EXTRUDE = "extrude";
+    public static final String TAG_FILL = "fill";
+    public static final String TAG_HEADING = "heading";
+    public static final String TAG_HOT_SPOT = "hotSpot";
+    public static final String TAG_HREF = "href";
+    public static final String TAG_HTTP_QUERY = "httpQuery";
+    public static final String TAG_ICON = "Icon";
+    public static final String TAG_INNER_BOUNDARY_IS = "innerBoundaryIs";
+    public static final String TAG_ITEM_ICON = "ItemIcon";
+    public static final String TAG_KEY = "key";
+    public static final String TAG_LATITUDE = "latitude";
+    public static final String TAG_LAT_LON_BOX = "LatLonBox";
+    public static final String TAG_LAT_LON_ALT_BOX = "LatLonAltBox";
+    public static final String TAG_LINK = "Link";
+    public static final String TAG_LIST_ITEM = "listItemType";
+    public static final String TAG_LOCATION = "Location";
+    public static final String TAG_LOD = "Lod";
+    public static final String TAG_LONGITUDE = "longitude";
+    public static final String TAG_MAX_ALTITUDE = "maxAltitude";
+    public static final String TAG_MAX_FADE_EXTENT = "maxFadeExtent";
+    public static final String TAG_MAX_LOD_PIXELS = "maxLodPixels";
+    public static final String TAG_MAX_SNIPPET_LINES = "maxSnippetLines";
+    public static final String TAG_MIN_ALTITUDE = "minAltitude";
+    public static final String TAG_MIN_FADE_EXTENT = "minFadeExtent";
+    public static final String TAG_MIN_LOD_PIXELS = "minLodPixels";
+    public static final String TAG_NAME = "name";
+    public static final String TAG_NORTH = "north";
+    public static final String TAG_OPEN = "open";
+    public static final String TAG_ORIENTATION = "Orientation";
+    public static final String TAG_OUTER_BOUNDARY_IS = "outerBoundaryIs";
+    public static final String TAG_OUTLINE = "outline";
+    public static final String TAG_OVERLAY_XY = "overlayXY";
+    public static final String TAG_PAIR = "Pair";
+    public static final String TAG_PHONE_NUMBER = "phoneNumber";
+    public static final String TAG_RANGE = "range";
+    public static final String TAG_REFRESH_INTERVAL = "refreshInterval";
+    public static final String TAG_REFRESH_MODE = "refreshMode";
+    public static final String TAG_REGION = "Region";
+    public static final String TAG_RESOURCE_MAP = "ResourceMap";
+    public static final String TAG_ROLL = "roll";
+    public static final String TAG_ROTATION = "rotation";
+    public static final String TAG_ROTATION_XY = "rotationXY";
+    public static final String TAG_SCALE = "scale";
+    public static final String TAG_SCALE_BIG = "Scale";
+    public static final String TAG_SCHEMA = "Schema";
+    public static final String TAG_SCREEN_XY = "screenXY";
+    public static final String TAG_SIMPLE_FIELD = "SimpleField";
+    public static final String TAG_SIZE = "size";
+    public static final String TAG_SCHEMA_DATA = "SchemaData";
+    public static final String TAG_SIMPLE_DATA = "SimpleData";
+    public static final String TAG_SNIPPET = "snippet";
+    public static final String TAG_SOURCE_HREF = "sourceHref";
+    public static final String TAG_SOUTH = "south";
+    public static final String TAG_STATE = "state";
+    public static final String TAG_STYLE_URL = "styleUrl";
+    public static final String TAG_TARGET_HREF = "targetHref";
+    public static final String TAG_TESSELLATE = "tessellate";
+    public static final String TAG_TEXT = "text";
+    public static final String TAG_TEXT_COLOR = "textColor";
+    public static final String TAG_TILT = "tilt";
+    public static final String TAG_VALUE = "value";
+    public static final String TAG_VIEW_FORMAT = "viewFormat";
+    public static final String TAG_VIEW_BOUND_SCALE = "viewBoundScale";
+    public static final String TAG_VIEW_REFRESH_MODE = "viewRefreshMode";
+    public static final String TAG_VIEW_REFRESH_TIME = "viewRefreshTime";
+    public static final String TAG_VISIBILITY = "visibility";
+    public static final String TAG_WHEN = "when";
+    public static final String TAG_WEST = "west";
+    public static final String TAG_WIDTH = "width";
+    public static final String TAG_X = "x";
+    public static final String TAG_Y = "y";
+    public static final String TAG_Z = "z";
+
+    // ELEMENTARY TAGS -- ATOM
+    public static final String TAG_ATOM_LINK = "link";
+    public static final String TAG_ATOM_PERSON_CONSTRUCT = "atomPersonConstruct";
+    public static final String TAG_ATOM_NAME = "name";
+    public static final String TAG_ATOM_URI = "uri";
+    public static final String TAG_ATOM_EMAIL = "email";
+
+    // ELEMENTARY TAGS -- ATOM
+    public static final String TAG_XAL_ADDRESS_DETAILS = "AddressDetails";
+
+    // ATTRIBUTES
+    public static final String ATT_ID = "id";
+    public static final String ATT_NAME = "name";
+    public static final String ATT_TARGET_ID = "targetId";
+    public static final String ATT_TYPE = "type";
+
+    // ATTRIBUTES VEC2
+    public static final String ATT_X = "x";
+    public static final String ATT_Y = "y";
+    public static final String ATT_XUNITS = "xunits";
+    public static final String ATT_YUNITS = "yunits";
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/atom/AtomLink.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/atom/AtomLink.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,15 @@
+package org.geotoolkit.data.model.atom;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AtomLink {
+
+    public String getHref();
+    public String getRel();
+    public String getType();
+    public String getHreflang();
+    public String getTitle();
+    public String getLength();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/atom/AtomLinkDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/atom/AtomLinkDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,44 @@
+package org.geotoolkit.data.model.atom;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class AtomLinkDefault implements AtomLink{
+
+    private String href;
+    private String rel;
+    private String type;
+    private String hreflang;
+    private String title;
+    private String length;
+
+    public AtomLinkDefault(String href, String rel, String type, String hreflang, String title, String length){
+        this.href = href;
+        this.rel = rel;
+        this.type = type;
+        this.hreflang = hreflang;
+        this.title = title;
+        this.length = length;
+    }
+            
+
+    @Override
+    public String getHref() {return this.href;}
+
+    @Override
+    public String getRel() {return this.rel;}
+
+    @Override
+    public String getType() {return this.type;}
+
+    @Override
+    public String getHreflang() {return this.hreflang;}
+
+    @Override
+    public String getTitle() {return this.title;}
+
+    @Override
+    public String getLength() {return this.length;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/atom/AtomPersonConstruct.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/atom/AtomPersonConstruct.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,14 @@
+package org.geotoolkit.data.model.atom;
+
+import java.util.List;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AtomPersonConstruct {
+
+    public List<String> getNames();
+    public List<String> getUris();
+    public List<String> getEmails();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/atom/AtomPersonConstructDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/atom/AtomPersonConstructDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,30 @@
+package org.geotoolkit.data.model.atom;
+
+import java.util.List;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class AtomPersonConstructDefault implements AtomPersonConstruct{
+
+    private List<String> names;
+    private List<String> uris;
+    private List<String> emails;
+
+    public AtomPersonConstructDefault(List<String> names, List<String> uris, List<String> emails){
+        this.names = names;
+        this.uris = uris;
+        this.emails = emails;
+    }
+
+    @Override
+    public List<String> getNames() {return this.names;}
+
+    @Override
+    public List<String> getUris() {return this.uris;}
+
+    @Override
+    public List<String> getEmails() {return this.emails;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractColorStyle.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractColorStyle.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,16 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AbstractColorStyle extends AbstractSubStyle {
+
+    public Color getColor();
+    public ColorMode getColorMode();
+    public List<SimpleType> getColorStyleSimpleExtensions();
+    public List<AbstractObject> getColorStyleObjectExtensions();
+}
\ No newline at end of file
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractColorStyleDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractColorStyleDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,49 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public abstract class AbstractColorStyleDefault extends AbstractSubStyleDefault implements AbstractColorStyle {
+
+    protected Color color;
+    protected ColorMode colorMode;
+    protected List<SimpleType> colorStyleSimpleExtensions;
+    protected List<AbstractObject> colorStyleObjectExtensions;
+
+    protected AbstractColorStyleDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color color, ColorMode colorMode,
+            List<SimpleType> colorStyleSimpleExtensions, List<AbstractObject> colorStyleObjectExtensions){
+        super(objectSimpleExtensions, idAttributes, subStyleSimpleExtensions, subStyleObjectExtensions);
+        this.color = color;
+        this.colorMode = colorMode;
+        this.colorStyleSimpleExtensions = colorStyleSimpleExtensions;
+        this.colorStyleObjectExtensions = colorStyleObjectExtensions;
+    }
+
+    @Override
+    public Color getColor() {return this.color;}
+
+    @Override
+    public ColorMode getColorMode() {return this.colorMode;}
+
+    @Override
+    public List<SimpleType> getColorStyleSimpleExtensions() {return this.colorStyleSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getColorStyleObjectExtensions() {return this.colorStyleObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tAbstractColorStyleDefault : "+
+                "\n\tcolor : "+this.color+
+                "\n\tcolorMode : "+this.colorMode;
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractContainer.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractContainer.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,15 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AbstractContainer extends AbstractFeature {
+
+    public List<SimpleType> getAbstractContainerSimpleExtensions();
+    public List<AbstractObject> getAbstractContainerObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractContainerDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractContainerDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,51 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.xal.AddressDetails;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class AbstractContainerDefault extends AbstractFeatureDefault implements AbstractContainer {
+
+    protected List<SimpleType> containerSimpleExtensions;
+    protected List<AbstractObject> containerObjectExtensions;
+
+    protected AbstractContainerDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            List<SimpleType> abstractContainerSimpleExtensions,
+            List<AbstractObject> abstractContainerObjectExtensions){
+
+        super(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link, address, addressDetails,
+                phoneNumber, snippet, description, view, timePrimitive, styleUrl, styleSelector, region, extendedData,
+                abstractFeatureSimpleExtensions, abstractFeatureObjectExtensions);
+
+        this.containerSimpleExtensions = abstractContainerSimpleExtensions;
+        this.containerObjectExtensions = abstractContainerObjectExtensions;
+    }
+
+    @Override
+    public List<SimpleType> getAbstractContainerSimpleExtensions() {return this.containerSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getAbstractContainerObjectExtensions() {return this.featureObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tAbstractContainerDefault : ";
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractContainerStructure.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractContainerStructure.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,14 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class AbstractContainerStructure {
+
+    public List<SimpleType> containerSimpleExtensions;
+    public List<AbstractObject> containerObjectExtensions;
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractFeature.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractFeature.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,34 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.xal.AddressDetails;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AbstractFeature extends AbstractObject {
+
+    public String getName();
+    public boolean getVisibility();
+    public boolean getOpen();
+    public AtomPersonConstruct getAuthor();
+    public AtomLink getAtomLink();
+    public String getAddress();
+    public AddressDetails getAddressDetails();
+    public String getPhoneNumber();
+    public String getSnippet();
+    public String getDescription();
+    public AbstractView getView();
+    public AbstractTimePrimitive getTimePrimitive();
+    public String getStyleUrl();
+    public List<AbstractStyleSelector> getStyleSelectors();
+    public Region getRegion();
+    public ExtendedData getExtendedData();
+    public List<SimpleType> getAbstractFeatureSimpleExtensions();
+    public List<AbstractObject> getAbstractFeatureObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractFeatureDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractFeatureDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,143 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.xal.AddressDetails;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public abstract class AbstractFeatureDefault extends AbstractObjectDefault implements AbstractFeature {
+
+    protected String name;
+    protected boolean visibility;
+    protected boolean open;
+    protected AtomPersonConstruct author;
+    protected AtomLink link;
+    protected String address;
+    protected AddressDetails addressDetails;
+    protected String phoneNumber;
+    protected String snippet;
+    protected String description;
+    protected AbstractView view;
+    protected AbstractTimePrimitive timePrimitive;
+    protected String styleUrl;
+    protected List<AbstractStyleSelector> styleSelector;
+    protected Region region;
+    protected ExtendedData extendedData;
+    protected List<SimpleType> featureSimpleExtensions;
+    protected List<AbstractObject> featureObjectExtensions;
+
+    protected AbstractFeatureDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions){
+
+        super(objectSimpleExtensions, idAttributes);
+        this.name = name;
+        this.visibility = visibility;
+        this.open = open;
+        this.author = author;
+        this.link = link;
+        this.address = address;
+        this.addressDetails = addressDetails;
+        this.phoneNumber = phoneNumber;
+        this.snippet = snippet;
+        this.description = description;
+        this.view = view;
+        this.timePrimitive = timePrimitive;
+        this.styleUrl = styleUrl;
+        this.styleSelector = styleSelector;
+        this.region = region;
+        this.extendedData = extendedData;
+        this.featureSimpleExtensions = abstractFeatureSimpleExtensions;
+        this.featureObjectExtensions = abstractFeatureObjectExtensions;
+    }
+
+    @Override
+    public String getName() {return this.name;}
+
+    @Override
+    public boolean getVisibility() {return this.visibility;}
+
+    @Override
+    public boolean getOpen() {return this.open;}
+
+    @Override
+    public AtomPersonConstruct getAuthor() {return this.author;}
+
+    @Override
+    public AtomLink getAtomLink() {return this.link;}
+
+    @Override
+    public String getAddress() {return this.address;}
+
+    @Override
+    public AddressDetails getAddressDetails() {return this.addressDetails;}
+
+    @Override
+    public String getPhoneNumber() {return this.phoneNumber;}
+
+    @Override
+    public String getSnippet() {return this.snippet;}
+
+    @Override
+    public String getDescription() {return this.description;}
+
+    @Override
+    public AbstractView getView() {return this.view;}
+
+    @Override
+    public AbstractTimePrimitive getTimePrimitive() {return this.timePrimitive;}
+
+    @Override
+    public String getStyleUrl() {return this.styleUrl;}
+
+    @Override
+    public List<AbstractStyleSelector> getStyleSelectors() {return this.styleSelector;}
+
+    @Override
+    public Region getRegion(){return this.region;}
+
+    @Override
+    public ExtendedData getExtendedData(){return this.extendedData;}
+
+    @Override
+    public List<SimpleType> getAbstractFeatureSimpleExtensions() {return this.featureSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getAbstractFeatureObjectExtensions() {return this.featureObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = "AbstractFeatureDefault : "+
+                "\n\tname : "+this.name+
+                "\n\tvisibility : "+this.visibility+
+                "\n\topen : "+this.open+
+                "\n\tauthor : "+this.author+
+                "\n\tlink : "+this.link+
+                "\n\taddress : "+this.address+
+                "\n\taddressDetails : "+this.addressDetails+
+                "\n\tphoneNumber : "+this.phoneNumber+
+                "\n\tsnippet : "+this.snippet+
+                "\n\tdescription : "+this.description+
+                "\n\tview : "+this.view+
+                "\n\ttimePrimitive : "+this.timePrimitive+
+                "\n\tstyleUrl : "+this.styleUrl+
+                "\n\tstyleSelectors : "+this.styleSelector.size();
+                for (AbstractStyleSelector s : this.styleSelector){
+                        resultat += "\n\tstyleSelector : "+s;
+                }
+                resultat += "\n\tregion : "+this.region+
+                "\n\textendedData : "+this.extendedData;
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractFeatureStructure.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractFeatureStructure.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,33 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.xal.AddressDetails;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class AbstractFeatureStructure {
+
+    public String name;
+    public boolean visibility;
+    public boolean open;
+    public AtomPersonConstruct author;
+    public AtomLink link;
+    public String address;
+    public AddressDetails addressDetails;
+    public String phoneNumber;
+    public String snippet;
+    public String description;
+    public AbstractView view;
+    public AbstractTimePrimitive timePrimitive;
+    public String styleUrl;
+    public List<AbstractStyleSelector> styleSelector;
+    public Region region;
+    public ExtendedData extendedData;
+    public List<SimpleType> featureSimpleExtensions;
+    public List<AbstractObject> featureObjectExtensions;
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractGeometry.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractGeometry.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,14 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AbstractGeometry extends AbstractObject{
+
+    public List<SimpleType> getAbstractGeometrySimpleExtensions();
+    public List<AbstractObject> getAbstractGeometryObjectExtensions();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractGeometryDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractGeometryDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,35 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public abstract class AbstractGeometryDefault extends AbstractObjectDefault implements AbstractGeometry {
+
+    protected List<SimpleType> geometrySimpleExtensions;
+    protected List<AbstractObject> geometryObjectExtensions;
+
+    protected AbstractGeometryDefault(List<SimpleType> objectSimpleExtensions, 
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.geometrySimpleExtensions = abstractGeometrySimpleExtensions;
+        this.geometryObjectExtensions = abstractGeometryObjectExtensions;
+    }
+
+    @Override
+    public List<SimpleType> getAbstractGeometrySimpleExtensions(){return this.geometrySimpleExtensions;}
+    @Override
+    public List<AbstractObject> getAbstractGeometryObjectExtensions(){return this.geometryObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString();
+        resultat += "Abstract Geometry : ";
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractLatLonBox.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractLatLonBox.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,19 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AbstractLatLonBox extends AbstractObject {
+
+    public Angle180 getNorth();
+    public Angle180 getSouth();
+    public Angle180 getEast();
+    public Angle180 getWest();
+    public List<SimpleType> getAbstractLatLonBoxSimpleExtensions();
+    public List<AbstractObject> getAbstractLatLonBoxObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractLatLonBoxDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractLatLonBoxDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,49 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public abstract class AbstractLatLonBoxDefault extends AbstractObjectDefault implements AbstractLatLonBox {
+
+    protected Angle180 north;
+    protected Angle180 south;
+    protected Angle180 east;
+    protected Angle180 west;
+    protected List<SimpleType> abstractLatLonBoxSimpleExtensions;
+    protected List<AbstractObject> abstractLatLonBoxObjectExtensions;
+
+    protected AbstractLatLonBoxDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            Angle180 north, Angle180 south, Angle180 east, Angle180 west,
+            List<SimpleType> abstractLatLonBoxSimpleExtensions, List<AbstractObject> abstractLatLonBoxObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.north = north;
+        this.south = south;
+        this.east = east;
+        this.west = west;
+        this.abstractLatLonBoxSimpleExtensions = abstractLatLonBoxSimpleExtensions;
+        this.abstractLatLonBoxObjectExtensions = abstractLatLonBoxObjectExtensions;
+    }
+
+    @Override
+    public Angle180 getNorth() {return this.north;}
+
+    @Override
+    public Angle180 getSouth() {return this.south;}
+
+    @Override
+    public Angle180 getEast() {return this.east;}
+
+    @Override
+    public Angle180 getWest() {return this.west;}
+
+    @Override
+    public List<SimpleType> getAbstractLatLonBoxSimpleExtensions() {return this.abstractLatLonBoxSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getAbstractLatLonBoxObjectExtensions() {return this.abstractLatLonBoxObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractObject.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractObject.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,14 @@
+package org.geotoolkit.data.model.kml;
+
+import org.geotoolkit.data.model.xsd.SimpleType;
+import java.util.List;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AbstractObject {
+
+    public List<SimpleType> getObjectSimpleExtensions();
+    public IdAttributes getIdAttributes();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractObjectDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractObjectDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,37 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public abstract class AbstractObjectDefault implements AbstractObject {
+
+    protected List<SimpleType> objectSimpleExtensions;
+    protected IdAttributes idAttributes;
+
+    protected AbstractObjectDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes){
+
+        this.objectSimpleExtensions = objectSimpleExtensions;
+        this.idAttributes = idAttributes;
+    }
+
+    @Override
+    public List<SimpleType> getObjectSimpleExtensions() {
+        return this.objectSimpleExtensions;
+    }
+
+    @Override
+    public IdAttributes getIdAttributes() {
+        return this.idAttributes;
+    }
+
+    @Override
+    public String toString(){
+        String resultat = "Abstract Object : ";
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractObjectStructure.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractObjectStructure.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,13 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class AbstractObjectStructure {
+    public List<SimpleType> objectSimpleExtensions;
+    public IdAttributes idAttributes;
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractOverlay.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractOverlay.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,17 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AbstractOverlay extends AbstractFeature{
+
+    public Color getColor();
+    public int getDrawOrder();
+    public Link getIcon();
+    public List<SimpleType> getAbstractOverlaySimpleExtensions();
+    public List<AbstractObject> getAbstractOverlayObjectExtensions();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractOverlayDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractOverlayDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,62 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.xal.AddressDetails;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public abstract class AbstractOverlayDefault extends AbstractFeatureDefault implements AbstractOverlay {
+
+    protected Color color;
+    protected int drawOrder;
+    protected Link icon;
+    protected List<SimpleType> abstractOveraySimpleExtensions;
+    protected List<AbstractObject> abstractOverlayObjectExtensions;
+
+    protected AbstractOverlayDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            Color color, int drawOrder, Link icon,
+            List<SimpleType> abstractOveraySimpleExtensions, List<AbstractObject> abstractOverlayObjectExtensions){
+       super(objectSimpleExtensions, idAttributes,
+            name, visibility, open, author, link,
+            address, addressDetails, phoneNumber, snippet,
+            description, view, timePrimitive,
+            styleUrl, styleSelector,
+            region, extendedData,
+            abstractFeatureSimpleExtensions,
+            abstractFeatureObjectExtensions);
+       this.color = color;
+       this.drawOrder = drawOrder;
+       this.icon = icon;
+       this.abstractOveraySimpleExtensions = abstractOveraySimpleExtensions;
+       this.abstractOverlayObjectExtensions = abstractOverlayObjectExtensions;
+        
+    }
+
+    @Override
+    public Color getColor() {return this.color;}
+
+    @Override
+    public int getDrawOrder() {return this.drawOrder;}
+
+    @Override
+    public Link getIcon() {return this.icon;}
+
+    @Override
+    public List<SimpleType> getAbstractOverlaySimpleExtensions() {return this.abstractOveraySimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getAbstractOverlayObjectExtensions() {return this.abstractOverlayObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractStyleSelector.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractStyleSelector.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,15 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AbstractStyleSelector extends AbstractObject {
+
+    public List<SimpleType> getAbstractStyleSelectorSimpleExtensions();
+    public List<AbstractObject> getAbstractStyleSelectorObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractStyleSelectorDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractStyleSelectorDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,41 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public abstract class AbstractStyleSelectorDefault extends AbstractObjectDefault implements AbstractStyleSelector {
+
+    protected List<SimpleType> styleSelectorSimpleExtensions;
+    protected List<AbstractObject> styleSelectorObjectExtensions;
+
+    protected AbstractStyleSelectorDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractStyleSelectorSimpleExtensions,
+            List<AbstractObject> abstractStyleSelectorObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.styleSelectorSimpleExtensions = abstractStyleSelectorSimpleExtensions;
+        this.styleSelectorObjectExtensions = abstractStyleSelectorObjectExtensions;
+    }
+
+    @Override
+    public List<SimpleType> getAbstractStyleSelectorSimpleExtensions() {
+        return this.styleSelectorSimpleExtensions;
+    }
+
+    @Override
+    public List<AbstractObject> getAbstractStyleSelectorObjectExtensions() {
+        return this.styleSelectorObjectExtensions;
+    }
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tAbstractStyleSelectorDefault : ";
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractSubStyle.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractSubStyle.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,14 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AbstractSubStyle extends AbstractObject {
+
+    public List<SimpleType> getSubStyleSimpleExtensions();
+    public List<AbstractObject> getSubStyleObjectExtensions();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractSubStyleDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractSubStyleDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,34 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public abstract class AbstractSubStyleDefault extends AbstractObjectDefault implements AbstractSubStyle {
+
+    protected List<SimpleType> subStyleSimpleExtensions;
+    protected List<AbstractObject> subStyleObjectExtensions;
+
+    protected AbstractSubStyleDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.subStyleSimpleExtensions = subStyleSimpleExtensions;
+        this.subStyleObjectExtensions = subStyleObjectExtensions;
+    }
+
+    @Override
+    public List<SimpleType> getSubStyleSimpleExtensions() {return this.subStyleSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getSubStyleObjectExtensions() {return this.subStyleObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tAbstractSubStyleDefault : ";
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractTimePrimitive.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractTimePrimitive.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,15 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AbstractTimePrimitive extends AbstractObject {
+
+    public List<SimpleType> getAbstractTimePrimitiveSimpleExtensions();
+    public List<AbstractObject> getAbstractTimePrimitiveObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractTimePrimitiveDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractTimePrimitiveDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,28 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class AbstractTimePrimitiveDefault extends AbstractObjectDefault implements AbstractTimePrimitive {
+
+    private List<SimpleType> abstractTimePrimitiveSimpleExtensions;
+    private List<AbstractObject> abstractTimePrimitiveObjectExtensions;
+
+    protected AbstractTimePrimitiveDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractTimePrimitiveSimpleExtensions, List<AbstractObject> abstractTimePrimitiveObjectExtensions){
+            super(objectSimpleExtensions, idAttributes);
+            this.abstractTimePrimitiveSimpleExtensions = abstractTimePrimitiveSimpleExtensions;
+            this.abstractTimePrimitiveObjectExtensions = abstractTimePrimitiveObjectExtensions;
+    }
+
+    @Override
+    public List<SimpleType> getAbstractTimePrimitiveSimpleExtensions() {return this.abstractTimePrimitiveSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getAbstractTimePrimitiveObjectExtensions() {return this.abstractTimePrimitiveObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractView.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractView.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,15 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AbstractView extends AbstractObject{
+
+    public List<SimpleType> getAbstractViewSimpleExtensions();
+    public List<AbstractObject> getAbstractViewObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractViewDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AbstractViewDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,28 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public abstract class AbstractViewDefault extends AbstractObjectDefault implements AbstractView {
+
+    protected List<SimpleType> abstractViewSimpleExtensions;
+    protected List<AbstractObject> abstractViewObjectExtensions;
+
+    protected AbstractViewDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractViewSimpleExtensions, List<AbstractObject> abstractViewObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.abstractViewSimpleExtensions = abstractViewSimpleExtensions;
+        this.abstractViewObjectExtensions = abstractViewObjectExtensions;
+    }
+
+    @Override
+    public List<SimpleType> getAbstractViewSimpleExtensions() {return this.abstractViewSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getAbstractViewObjectExtensions() {return this.abstractViewObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Alias.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Alias.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,17 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Alias extends AbstractObject {
+
+    public String getTargetHref();
+    public String getSourceHref();
+    public List<SimpleType> getAliasSimpleExtensions();
+    public List<AbstractObject> getAliasObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AliasDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AliasDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,48 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class AliasDefault extends AbstractObjectDefault implements Alias {
+
+    private String targetHref;
+    private String sourceHref;
+    private List<SimpleType> aliasSimpleExtensions;
+    private List<AbstractObject> aliasObjectExtensions;
+
+    public AliasDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            String targetHref, String sourceHref,
+            List<SimpleType> aliasSimpleExtensions, List<AbstractObject> aliasObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.targetHref = targetHref;
+        this.sourceHref = sourceHref;
+        this.aliasSimpleExtensions = aliasSimpleExtensions;
+        this.aliasObjectExtensions = aliasObjectExtensions;
+    }
+
+    @Override
+    public String getTargetHref() {
+        throw new UnsupportedOperationException("Not supported yet.");
+    }
+
+    @Override
+    public String getSourceHref() {
+        throw new UnsupportedOperationException("Not supported yet.");
+    }
+
+    @Override
+    public List<SimpleType> getAliasSimpleExtensions() {
+        throw new UnsupportedOperationException("Not supported yet.");
+    }
+
+    @Override
+    public List<AbstractObject> getAliasObjectExtensions() {
+        throw new UnsupportedOperationException("Not supported yet.");
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AltitudeMode.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/AltitudeMode.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,37 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public enum AltitudeMode {
+
+    CLAMP_TO_GROUND("clampToGround"),
+    RELATIVE_TO_GROUND("relativeToGround"),
+    ABSOLUTE("absolute");
+
+    private String altitudeMode;
+
+    private AltitudeMode(String altitudeMode){
+        this.altitudeMode = altitudeMode;
+    }
+
+    public String getAltitudeMode(){
+        return this.altitudeMode;
+    }
+
+    public static AltitudeMode transform(String altitudeMode){
+        return transform(altitudeMode, null);
+    }
+
+    public static AltitudeMode transform(String altitudeMode, AltitudeMode defaultValue){
+        AltitudeMode resultat = defaultValue;
+        for(AltitudeMode cm : AltitudeMode.values()){
+            if(cm.getAltitudeMode().equals(altitudeMode)){
+                resultat = cm;
+                break;
+            }
+        }
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Angle180.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Angle180.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.kml;
+
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Angle180 extends SimpleType{
+
+    public double getAngle();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Angle180Default.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Angle180Default.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,21 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class Angle180Default implements Angle180{
+
+    private double angle;
+
+    public Angle180Default(double angle)throws KmlException {
+        if(angle >= -180 && angle <= 180){
+            this.angle = angle;
+        } else {
+            throw new KmlException("This angle type requires a value between -180 and 180 degrees. You've intented an initialization with "+angle+" degree(s)");
+        }
+    }
+
+    @Override
+    public double getAngle(){return this.angle;}
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Angle360.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Angle360.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.kml;
+
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Angle360 extends SimpleType {
+
+    public double getAngle();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Angle360Default.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Angle360Default.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,26 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class Angle360Default implements Angle360{
+
+    private double angle;
+    
+    public Angle360Default(double angle)throws KmlException {
+        if(angle >= -360 && angle <= 360){
+            this.angle = angle;
+        } else {
+            throw new KmlException("This angle type requires a value between -360 and 360 degrees. You've intented an initialization with "+angle+" degree(s)");
+        }
+    }
+
+    @Override
+    public double getAngle(){return this.angle;}
+
+    @Override
+    public String toString(){
+        return "Angle360default : "+this.angle;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Angle90.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Angle90.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.kml;
+
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Angle90 extends SimpleType{
+
+    public double getAngle();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Angle90Default.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Angle90Default.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,21 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class Angle90Default implements Angle90 {
+
+    private double angle;
+
+    public Angle90Default(double angle) throws KmlException {
+        if(angle > -90 && angle < 90){
+            this.angle = angle;
+        } else {
+            throw new KmlException("This angle type requires a value between -90 and 90 degrees.");
+        }
+    }
+
+    @Override
+    public double getAngle(){return this.angle;}
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Anglepos180.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Anglepos180.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.kml;
+
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Anglepos180 extends SimpleType {
+
+    public double getAngle();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Anglepos180Default.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Anglepos180Default.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,21 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class Anglepos180Default implements Anglepos180{
+
+    private double angle;
+
+    public Anglepos180Default(double angle)throws KmlException {
+        if(angle >=  0 && angle <= 180){
+            this.angle = angle;
+        } else {
+            throw new KmlException("This angle type requires a value between 0 and 180 degrees. You've intented an initialization with "+angle+" degree(s)");
+        }
+    }
+
+    @Override
+    public double getAngle() {return this.angle;}
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Anglepos90.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Anglepos90.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.kml;
+
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Anglepos90 extends SimpleType{
+
+    public double getAngle();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Anglepos90Default.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Anglepos90Default.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,20 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class Anglepos90Default implements Anglepos90 {
+
+    private double angle;
+
+    public Anglepos90Default(double angle)throws KmlException {
+        if(angle >= 0 && angle <= 90){
+            this.angle = angle;
+        } else {
+            throw new KmlException("This angle type requires a value between 0 and 90 degrees. You've intented an initialization with "+angle+" degree(s)");
+        }
+    }
+
+    public double getAngle(){return this.angle;}
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/BalloonStyle.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/BalloonStyle.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,19 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface BalloonStyle extends AbstractSubStyle {
+
+    public Color getBgColor();
+    public Color getTextColor();
+    public String getText();
+    public DisplayMode getDisplayMode();
+    public List<SimpleType> getBalloonStyleSimpleExtensions();
+    public List<AbstractObject> getBalloonStyleObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/BalloonStyleDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/BalloonStyleDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,62 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class BalloonStyleDefault extends AbstractSubStyleDefault implements BalloonStyle {
+
+    private Color bgColor;
+    private Color textColor;
+    private String text;
+    private DisplayMode displayMode;
+    private List<SimpleType> balloonStyleSimpleExtensions;
+    private List<AbstractObject> balloonStyleObjectExtensions;
+
+    public BalloonStyleDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color bgColor, Color textColor, String text, DisplayMode displayMode,
+            List<SimpleType> balloonStyleSimpleExtensions, List<AbstractObject> balloonStyleObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions);
+        this.bgColor = bgColor;
+        this.textColor = textColor;
+        this.text = text;
+        this.displayMode = displayMode;
+        this.balloonStyleSimpleExtensions = balloonStyleSimpleExtensions;
+        this.balloonStyleObjectExtensions = balloonStyleObjectExtensions;
+    }
+
+    @Override
+    public Color getBgColor() {return this.bgColor;}
+
+    @Override
+    public Color getTextColor() {return this.textColor;}
+
+    @Override
+    public String getText() {return this.text;}
+
+    @Override
+    public DisplayMode getDisplayMode() {return this.displayMode;}
+
+    @Override
+    public List<SimpleType> getBalloonStyleSimpleExtensions() {return this.balloonStyleSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getBalloonStyleObjectExtensions() {return this.balloonStyleObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tBalloonStyleDefault : "+
+                "\n\tbgColor : "+this.bgColor+
+                "\n\ttextColor : "+this.textColor+
+                "\n\ttext : "+this.text+
+                "\n\tdisplayMode : "+this.displayMode;
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/BasicLink.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/BasicLink.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,16 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface BasicLink {
+    public List<SimpleType> getObjectSimpleExtensions();
+    public IdAttributes getIdAttributes();
+    public String getHref();
+    public List<SimpleType> getBasicLinkSimpleExtensions();
+    public List<AbstractObject> getBasicLinkObjectExtensions();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/BasicLinkDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/BasicLinkDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,50 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class BasicLinkDefault implements BasicLink {
+
+    private List<SimpleType> objectSimpleExtensions;
+    private IdAttributes idAttributes;
+    
+    private String href;
+    private List<SimpleType> basicLinkSimpleExtensions;
+    private List<AbstractObject> basicLinkObjectExtensions;
+
+    public BasicLinkDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String href, List<SimpleType> basicLinkSimpleExtensions, List<AbstractObject> basicLinkObjectExtensions){
+            this.objectSimpleExtensions = objectSimpleExtensions;
+            this.idAttributes = idAttributes;
+            this.href = href;
+            this.basicLinkSimpleExtensions = basicLinkSimpleExtensions;
+            this.basicLinkObjectExtensions = basicLinkObjectExtensions;
+    }
+
+    @Override
+    public List<SimpleType> getObjectSimpleExtensions() {return this.objectSimpleExtensions;}
+
+    @Override
+    public IdAttributes getIdAttributes() {return this.idAttributes;}
+
+    @Override
+    public String getHref() {return this.href;}
+
+    @Override
+    public List<SimpleType> getBasicLinkSimpleExtensions() {return this.basicLinkSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getBasicLinkObjectExtensions() {return this.basicLinkObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = "BasicLinkDefault : "+
+                "\n\thref : "+this.href;
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Boundary.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Boundary.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,16 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Boundary {
+
+    public LinearRing getLinearRing();
+    public List<SimpleType> getBoundarySimpleExtensions();
+    public List<AbstractObject> getBoundaryObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/BoundaryDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/BoundaryDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,31 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class BoundaryDefault implements Boundary {
+
+    private LinearRing linearRing;
+    private List<SimpleType> boundarySimpleExtensions;
+    private List<AbstractObject> boundaryObjectExtensions;
+
+    public BoundaryDefault(LinearRing linearRing, List<SimpleType> boundarySimpleExtensions, List<AbstractObject> boundaryObjectExtensions){
+        this.linearRing = linearRing;
+        this.boundarySimpleExtensions = boundarySimpleExtensions;
+        this.boundaryObjectExtensions = boundaryObjectExtensions;
+    }
+
+    @Override
+    public LinearRing getLinearRing() {return this.linearRing;}
+
+    @Override
+    public List<SimpleType> getBoundarySimpleExtensions() {return this.boundarySimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getBoundaryObjectExtensions() {return this.boundaryObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Camera.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Camera.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,21 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Camera extends AbstractView {
+
+    public Angle180 getLongitude();
+    public Angle90 getLatitude();
+    public double getAltitude();
+    public Angle360 getHeading();
+    public Anglepos180 getTilt();
+    public Angle180 getRoll();
+    public List<SimpleType> getCameraSimpleExtensions();
+    public List<AbstractObject> getCameraObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/CameraDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/CameraDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,62 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class CameraDefault extends AbstractViewDefault implements Camera {
+
+    private Angle180 longitude;
+    private Angle90 latitude;
+    private double altitude;
+    private Angle360 heading;
+    private Anglepos180 tilt;
+    private Angle180 roll;
+    private List<SimpleType> cameraSimpleExtensions;
+    private List<AbstractObject> cameraObjectExtensions;
+
+    public CameraDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractViewSimpleExtensions, List<AbstractObject> abstractViewObjectExtensions,
+            Angle180 longitude, Angle90 latitude, double altitude,
+            Angle360 heading, Anglepos180 tilt, Angle180 roll,
+            List<SimpleType> cameraSimpleExtensions, List<AbstractObject> cameraObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                abstractViewSimpleExtensions, abstractViewObjectExtensions);
+        this.longitude = longitude;
+        this.latitude = latitude;
+        this.altitude = altitude;
+        this.heading = heading;
+        this.tilt = tilt;
+        this.roll = roll;
+        this.cameraSimpleExtensions = cameraSimpleExtensions;
+        this.cameraObjectExtensions = cameraObjectExtensions;
+    }
+
+    @Override
+    public Angle180 getLongitude() {return this.longitude;}
+
+    @Override
+    public Angle90 getLatitude() {return this.latitude;}
+
+    @Override
+    public double getAltitude() {return this.altitude;}
+
+    @Override
+    public Angle360 getHeading() {return this.heading;}
+
+    @Override
+    public Anglepos180 getTilt() {return this.tilt;}
+
+    @Override
+    public Angle180 getRoll() {return this.roll;}
+
+    @Override
+    public List<SimpleType> getCameraSimpleExtensions() {return this.cameraSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getCameraObjectExtensions() {return this.cameraObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Color.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Color.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.kml;
+
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Color extends SimpleType {
+
+    public String getColor();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ColorDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ColorDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,30 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class ColorDefault implements Color {
+
+    private String color;
+
+    public static final String BG_COLOR = "ffffffff";
+    public static final String TEXT_COLOR = "ff000000";
+
+    public ColorDefault(String color) throws KmlException{
+        if(color.matches("[0-9a-fA-F]{8}")){
+            this.color = color;
+        } else {
+            throw new KmlException("The color must be a suit of four hexabinaries");
+        }
+    }
+
+    @Override
+    public String getColor() {return this.color;}
+
+    @Override
+    public String toString() {
+        return this.color;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ColorMode.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ColorMode.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,35 @@
+package org.geotoolkit.data.model.kml;
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public enum ColorMode {
+
+    NORMAL("normal"),
+    RANDOM("random");
+
+    private String colorMode;
+
+    private ColorMode(String colorMode){
+        this.colorMode = colorMode;
+    }
+
+    public String getColorMode(){
+        return this.colorMode;
+    }
+
+    public static ColorMode transform(String colorMode){
+        return transform(colorMode, null);
+    }
+
+    public static ColorMode transform(String colorMode, ColorMode defaultValue){
+        ColorMode resultat = defaultValue;
+        for(ColorMode cm : ColorMode.values()){
+            if(cm.getColorMode().equals(colorMode)){
+                resultat = cm;
+                break;
+            }
+        }
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Coordinate.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Coordinate.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,14 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Coordinate {
+
+    public double getGeodeticLongitude();
+    public double getGeodeticLatitude();
+    public double getAltitude();
+    public String getCoordinateString();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/CoordinateDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/CoordinateDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,57 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class CoordinateDefault implements Coordinate{
+
+    private double geodeticLongitude;
+    private double geodeticLatitude;
+    private double altitude;
+
+    public CoordinateDefault(String coordinates){
+        String[] coordinatesList = coordinates.split(",");
+        this.geodeticLongitude = Double.valueOf(coordinatesList[0]);//probl√®me lorsqu'une cha√Æne de chiffres d√©bute par un espace ou autre caract√®re d'espacement
+        this.geodeticLatitude = Double.valueOf(coordinatesList[1]);
+        if(coordinatesList[2] != null){
+            this.altitude = Double.valueOf(coordinatesList[2]);
+        }
+    }
+
+    public CoordinateDefault(double geodeticLongiude, double geodeticLatitude, double altitude){
+        this.geodeticLongitude = geodeticLongiude;
+        this.geodeticLatitude = geodeticLatitude;
+        this.altitude = altitude;
+    }
+
+    public CoordinateDefault(double geodeticLongiude, double geodeticLatitude){
+        this.geodeticLongitude = geodeticLongiude;
+        this.geodeticLatitude = geodeticLatitude;
+    }
+
+    @Override
+    public double getGeodeticLongitude() {return this.geodeticLongitude;}
+
+    @Override
+    public double getGeodeticLatitude() {return this.geodeticLatitude;}
+
+    @Override
+    public double getAltitude() {return this.altitude;}
+
+    @Override
+    public String getCoordinateString() {
+        return String.valueOf(geodeticLongitude)+","+
+                String.valueOf(geodeticLatitude)+","+
+                String.valueOf(altitude);
+    }
+
+    public String toString(){
+        String resultat = "Coordinate : ";
+        resultat += "\n\tGeodetic Longitude = "+geodeticLongitude+
+                "\n\tGeodetic Latitude = "+geodeticLatitude+
+                "\n\tAltitude = "+altitude;
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Coordinates.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Coordinates.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,15 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Coordinates extends SimpleType {
+
+    public List<Coordinate> getCoordinates();
+    public Coordinate getCoordinate(int i);
+    public String getCoordinatesString();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/CoordinatesDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/CoordinatesDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,62 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class CoordinatesDefault implements Coordinates{
+
+    private List<Coordinate> coordinates;
+
+    public CoordinatesDefault(List<Coordinate> coordinates){
+        this.coordinates = coordinates;
+    }
+
+    @Override
+    public List<Coordinate> getCoordinates() {return this.coordinates;}
+
+    /**
+     *
+     * @param i the index of the Coordinate to return.
+     * @return The Coordinate at the index i.
+     */
+    @Override
+    public Coordinate getCoordinate(int i) {
+        Coordinate resultat = null;
+        if (i < this.coordinates.size()){
+            resultat = this.coordinates.get(i);
+        }
+        return resultat;
+    }
+
+    /**
+     * Get the XML schema list of coordinates.
+     * @return The String of coordinates values formated as a XML schema list.
+     */
+    @Override
+    public String getCoordinatesString(){
+        String resultat = "";
+        int position = 0;
+        for(Coordinate coordinate : this.coordinates){
+            position += 1;
+            if(position == this.coordinates.size()){
+                resultat += coordinate.getCoordinateString();
+            } else {
+                resultat += coordinate.getCoordinateString()+" ";
+            }
+        }
+        return resultat;
+    }
+
+    @Override
+    public String toString(){
+        String resultat = "Coordinates : ";
+        for(Coordinate c : this.coordinates){
+            resultat += "\n\t"+c.toString();
+        }
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Data.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Data.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,14 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Data extends AbstractObject {
+
+    public String getDisplayName();
+    public String getValue();
+    public List<Object> getDataExtensions();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/DataDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/DataDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,33 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class DataDefault extends AbstractObjectDefault implements Data {
+
+    private String displayName;
+    private String value;
+    private List<Object> dataExtensions;
+
+    public DataDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String displayName, String value, List<Object> dataExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.displayName = displayName;
+        this.value = value;
+        this.dataExtensions = dataExtensions;
+    }
+
+    @Override
+    public String getDisplayName() {return this.displayName;}
+
+    @Override
+    public String getValue() {return this.value;}
+
+    @Override
+    public List<Object> getDataExtensions() {return this.dataExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/DisplayMode.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/DisplayMode.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,37 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public enum DisplayMode {
+
+    DEFAULT("default"),
+    HIDE("hide");
+
+    private String mode;
+
+    private DisplayMode(String mode){
+        this.mode = mode;
+    }
+
+    public String getDisplayMode(){
+        return this.mode;
+    }
+
+    public static DisplayMode transform(String mode){
+        return transform(mode, null);
+    }
+
+    public static DisplayMode transform(String mode, DisplayMode defaultValue){
+        DisplayMode resultat = defaultValue;
+        for(DisplayMode cm : DisplayMode.values()){
+            if(cm.getDisplayMode().equals(mode)){
+                resultat = cm;
+                break;
+            }
+        }
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Document.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Document.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,17 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Document extends AbstractContainer {
+
+    public List<Schema> getSchemas();
+    public List<AbstractFeature> getAbstractFeatures();
+    public List<SimpleType> getDocumentSimpleExtensions();
+    public List<AbstractObject> getDocumentObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/DocumentDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/DocumentDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,66 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.xal.AddressDetails;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class DocumentDefault extends AbstractContainerDefault implements Document{
+
+    private List<Schema> schemas;
+    private List<AbstractFeature> features;
+    private List<SimpleType> documentSimpleExtensions;
+    private List<AbstractObject> documentObjectExtensions;
+
+    public DocumentDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            List<SimpleType> abstractContainerSimpleExtensions,
+            List<AbstractObject> abstractContainerObjectExtensions,
+            List<Schema> schemas, List<AbstractFeature> features,
+            List<SimpleType> documentSimpleExtensions,
+            List<AbstractObject> documentObjectExtensions){
+
+        super(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link, address, addressDetails, phoneNumber,
+                snippet, description, view, timePrimitive, styleUrl, styleSelector,
+                region, extendedData,
+                abstractFeatureSimpleExtensions, abstractFeatureObjectExtensions,
+                abstractContainerSimpleExtensions, abstractContainerObjectExtensions);
+
+        this.schemas = schemas;
+        this.features = features;
+        this.documentSimpleExtensions = documentSimpleExtensions;
+        this.documentObjectExtensions = documentObjectExtensions;
+    }
+
+    @Override
+    public List<Schema> getSchemas() {return this.schemas;}
+
+    @Override
+    public List<AbstractFeature> getAbstractFeatures() {return this.features;}
+
+    @Override
+    public List<AbstractObject> getDocumentObjectExtensions() {return this.documentObjectExtensions;}
+
+    @Override
+    public List<SimpleType> getDocumentSimpleExtensions() { return this.documentSimpleExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tDocumentDefault : ";
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ExtendedData.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ExtendedData.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,14 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface ExtendedData {
+
+    public List<Data> getDatas();
+    public List<SchemaData> getSchemaData();
+    public List<Object> getAnyOtherElements();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ExtendedDataDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ExtendedDataDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,30 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class ExtendedDataDefault implements ExtendedData {
+
+    private List<Data> datas;
+    private List<SchemaData> schemaDatas;
+    private List<Object> anyOtherElements;
+
+    public ExtendedDataDefault(List<Data> datas, List<SchemaData> schemaDatas, List<Object> anyOtherElements){
+        this.datas = datas;
+        this.schemaDatas = schemaDatas;
+        this.anyOtherElements = anyOtherElements;
+    }
+
+    @Override
+    public List<Data> getDatas() {return this.datas;}
+
+    @Override
+    public List<SchemaData> getSchemaData() {return this.schemaDatas;}
+
+    @Override
+    public List<Object> getAnyOtherElements() {return this.anyOtherElements;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Folder.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Folder.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,16 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Folder extends AbstractContainer {
+
+    public List<AbstractFeature> getAbstractFeatures();
+    public List<SimpleType> getFolderSimpleExtensions();
+    public List<AbstractObject> getFolderObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/FolderDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/FolderDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,61 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.xal.AddressDetails;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class FolderDefault extends AbstractContainerDefault implements Folder {
+
+    private List<AbstractFeature> features;
+    private List<SimpleType> folderSimpleExtensions;
+    private List<AbstractObject> folderObjectExtensions;
+
+    public FolderDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            List<SimpleType> abstractContainerSimpleExtensions,
+            List<AbstractObject> abstractContainerObjectExtensions,
+            List<AbstractFeature> features,
+            List<SimpleType> folderSimpleExtensions,
+            List<AbstractObject> folderObjectExtensions){
+
+        super(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link, address, addressDetails, phoneNumber,
+                snippet, description, view, timePrimitive, styleUrl, styleSelector,
+                region, extendedData,
+                abstractFeatureSimpleExtensions, abstractFeatureObjectExtensions,
+                abstractContainerSimpleExtensions, abstractContainerObjectExtensions);
+
+        this.features = features;
+        this.folderSimpleExtensions = folderSimpleExtensions;
+        this.folderObjectExtensions = folderObjectExtensions;
+    }
+
+    @Override
+    public List<AbstractFeature> getAbstractFeatures() {return this.features;}
+
+    @Override
+    public List<AbstractObject> getFolderObjectExtensions() {return this.folderObjectExtensions;}
+
+    @Override
+    public List<SimpleType> getFolderSimpleExtensions() { return this.folderSimpleExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tFolderDefault : ";
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/GridOrigin.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/GridOrigin.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,17 @@
+package org.geotoolkit.data.model.kml;
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public enum GridOrigin {
+
+    LOWER_LEFT("lowerLeft"),
+    UPPER_LEFT("upperLeft");
+
+    private String gridOrigin;
+
+    private GridOrigin(String gridOrigin){
+        this.gridOrigin = gridOrigin;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/GroundOverlay.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/GroundOverlay.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,18 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface GroundOverlay extends AbstractOverlay {
+
+    public double getAltitude();
+    public AltitudeMode getAltitudeMode();
+    public LatLonBox getLatLonBox();
+    public List<SimpleType> getGroundOverlaySimpleExtensions();
+    public List<AbstractObject> getGroundOverlayObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/GroundOverlayDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/GroundOverlayDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,62 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.xal.AddressDetails;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class GroundOverlayDefault extends AbstractOverlayDefault implements GroundOverlay {
+
+    private double altitude;
+    private AltitudeMode altitudeMode;
+    private LatLonBox latLonBox;
+    private List<SimpleType> groundOverlaySimpleExtensions;
+    private List<AbstractObject> groundOverlayObjectExtensions;
+
+    public GroundOverlayDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            Color color, int drawOrder, Link icon,
+            List<SimpleType> abstractOveraySimpleExtensions, List<AbstractObject> abstractOverlayObjectExtensions,
+            double altitude, AltitudeMode altitudeMode, LatLonBox latLonBox,
+            List<SimpleType> groundOverlaySimpleExtensions, List<AbstractObject> groundOverlayObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link,
+                address, addressDetails, phoneNumber, snippet,
+                description, view, timePrimitive,
+                styleUrl, styleSelector, region, extendedData,
+                abstractFeatureSimpleExtensions, abstractFeatureObjectExtensions,
+                color, drawOrder, icon, abstractOveraySimpleExtensions, abstractOverlayObjectExtensions);
+        this.altitude = altitude;
+        this.altitudeMode = altitudeMode;
+        this.latLonBox = latLonBox;
+        this.groundOverlaySimpleExtensions = groundOverlaySimpleExtensions;
+        this.groundOverlayObjectExtensions = groundOverlayObjectExtensions;
+    }
+
+    @Override
+    public double getAltitude() {return this.altitude;}
+
+    @Override
+    public AltitudeMode getAltitudeMode() {return this.altitudeMode;}
+
+    @Override
+    public LatLonBox getLatLonBox() {return this.latLonBox;}
+
+    @Override
+    public List<SimpleType> getGroundOverlaySimpleExtensions() {return this.groundOverlaySimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getGroundOverlayObjectExtensions() {return this.groundOverlayObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/IconStyle.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/IconStyle.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,18 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface IconStyle extends AbstractColorStyle {
+
+    public double getScale();
+    public Angle360 getHeading();
+    public BasicLink getIcon();
+    public Vec2 getHotSpot();
+    public List<SimpleType> getIconStyleSimpleExtensions();
+    public List<AbstractObject> getIconStyleObjectExtensions();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/IconStyleDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/IconStyleDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,65 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class IconStyleDefault extends AbstractColorStyleDefault implements IconStyle {
+
+    private double scale;
+    private Angle360 heading;
+    private BasicLink icon;
+    private Vec2 hotSpot;
+    private List<SimpleType> iconStyleSimpleExtensions;
+    private List<AbstractObject> iconStyleObjectExtensions;
+
+    public IconStyleDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color color, ColorMode colorMode,
+            List<SimpleType> colorStyleSimpleExtensions, List<AbstractObject> colorStyleObjectExtensions,
+            double scale, Angle360 heading, BasicLink icon, Vec2 hotSpot,
+            List<SimpleType> iconStyleSimpleExtensions, List<AbstractObject> iconStyleObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                color, colorMode, colorStyleSimpleExtensions, colorStyleObjectExtensions);
+        this.scale = scale;
+        this.heading = heading;
+        this.icon = icon;
+        this.hotSpot = hotSpot;
+        this.iconStyleSimpleExtensions = iconStyleSimpleExtensions;
+        this.iconStyleObjectExtensions = iconStyleObjectExtensions;
+    }
+
+    @Override
+    public double getScale() {return this.scale;}
+
+    @Override
+    public Angle360 getHeading() {return this.heading;}
+
+    @Override
+    public BasicLink getIcon() {return this.icon;}
+
+    @Override
+    public Vec2 getHotSpot() {return this.hotSpot;}
+
+    @Override
+    public List<SimpleType> getIconStyleSimpleExtensions() {return this.iconStyleSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getIconStyleObjectExtensions() {return this.iconStyleObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tIconStyleDefault : "+
+                "\n\tscale : "+this.scale+
+                "\n\theading : "+this.heading+
+                "\n\ticon : "+this.icon+
+                "\n\thotSpot : "+this.hotSpot;
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/IdAttributes.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/IdAttributes.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,11 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface IdAttributes {
+
+    public String getId();
+    public String getTargetId();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/IdAttributesDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/IdAttributesDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,22 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class IdAttributesDefault implements IdAttributes{
+
+    private String id;
+    private String targetId;
+
+    public IdAttributesDefault(String id, String targetId){
+        this.id = id;
+        this.targetId = targetId;
+    }
+
+    @Override
+    public String getId(){return this.id;}
+    
+    @Override
+    public String getTargetId(){return this.targetId;}
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ImagePyramid.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ImagePyramid.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,14 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface ImagePyramid extends AbstractObject {
+
+    public int getTitleSize();
+    public int getMaxWidth();
+    public int getMaxHeight();
+    public GridOrigin getGridOrigin();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ItemIcon.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ItemIcon.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,17 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface ItemIcon extends AbstractObject {
+
+    public List<ItemIconState> getStates();
+    public String getHref();
+    public List<SimpleType> getItemIconSimpleExtensions();
+    public List<AbstractObject> getItemIconObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ItemIconDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ItemIconDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,47 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class ItemIconDefault extends AbstractObjectDefault implements ItemIcon {
+
+    private List<ItemIconState> states;
+    private String href;
+    private List<SimpleType> itemIconSimpleExtensions;
+    private List<AbstractObject> itemIconObjectExtensions;
+
+    public ItemIconDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<ItemIconState> states, String href,
+            List<SimpleType> itemIconSimpleExtensions, List<AbstractObject> itemIconObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.states = states;
+        this.href = href;
+        this.itemIconSimpleExtensions = itemIconSimpleExtensions;
+        this.itemIconObjectExtensions = itemIconObjectExtensions;
+    }
+
+    @Override
+    public List<ItemIconState> getStates() {return this.states;}
+
+    @Override
+    public String getHref() {return this.href;}
+
+    @Override
+    public List<SimpleType> getItemIconSimpleExtensions() {return this.itemIconSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getItemIconObjectExtensions() {return this.itemIconObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tBalloonStyleDefault : "+
+                "\n\tstates : "+this.states+
+                "\n\thref : "+this.href;
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ItemIconState.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ItemIconState.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,40 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public enum ItemIconState {
+
+    OPEN("open"),
+    CLOSED("closed"),
+    ERROR("error"),
+    FETCHING_0("fetching0"),
+    FETCHING_1("fetching1"),
+    TETCHING_2("fetching2");
+
+    private String itemIconState;
+
+    private ItemIconState(String itemIconState){
+        this.itemIconState = itemIconState;
+    }
+
+    public String getItemIconState(){
+        return this.itemIconState;
+    }
+
+    public static ItemIconState transform(String itemIconState){
+        return transform(itemIconState, null);
+    }
+
+    public static ItemIconState transform(String itemIconState, ItemIconState defaultValue){
+        ItemIconState resultat = defaultValue;
+        for(ItemIconState cm : ItemIconState.values()){
+            if(cm.getItemIconState().equals(itemIconState)){
+                resultat = cm;
+                break;
+            }
+        }
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Kml.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Kml.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,17 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Kml {
+
+    public NetworkLinkControl getNetworkLinkControl();
+    public AbstractFeature getAbstractFeature();
+    public List<SimpleType> getKmlSimpleExtensions();
+    public List<AbstractObject> getKmlObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/KmlDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/KmlDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,45 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class KmlDefault implements Kml{
+
+    private NetworkLinkControl networkLinkControl;
+    private AbstractFeature abstractFeature;
+    private List<SimpleType> kmlSimpleExtensions;
+    private List<AbstractObject> kmlObjectExtensions;
+
+    public KmlDefault(NetworkLinkControl networkLinkControl,
+            AbstractFeature abstractFeature,
+            List<SimpleType> kmlSimpleExtensions,
+            List<AbstractObject> kmlObjectExtensions){
+        this.networkLinkControl = networkLinkControl;
+        this.abstractFeature = abstractFeature;
+        this.kmlSimpleExtensions = kmlSimpleExtensions;
+        this.kmlObjectExtensions = kmlObjectExtensions;
+    }
+
+    @Override
+    public NetworkLinkControl getNetworkLinkControl() {return this.networkLinkControl;}
+
+    @Override
+    public AbstractFeature getAbstractFeature() {return this.abstractFeature;}
+
+    @Override
+    public List<SimpleType> getKmlSimpleExtensions() {return this.kmlSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getKmlObjectExtensions() {return this.kmlObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = "KML DEFAULT : "+
+                "AbstractFeature : "+ this.abstractFeature;
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/KmlException.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/KmlException.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,27 @@
+/*
+ * To change this template, choose Tools | Templates
+ * and open the template in the editor.
+ */
+
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author w7mainuser
+ */
+public class KmlException extends Exception{
+
+    private String message;
+
+    public KmlException(String message){
+        this.message = message;
+    }
+
+    @Override
+    public String getMessage(){
+        return this.message;
+    }
+
+
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LabelStyle.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LabelStyle.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,16 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface LabelStyle extends AbstractColorStyle {
+
+    public double getScale();
+    public List<SimpleType> getLabelStyleSimpleExtensions();
+    public List<AbstractObject> getLabelStyleObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LabelStyleDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LabelStyleDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,47 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class LabelStyleDefault extends AbstractColorStyleDefault implements LabelStyle {
+
+    private double scale;
+    private List<SimpleType> labelStyleSimpleExtensions;
+    private List<AbstractObject> labelStyleObjectExtensions;
+
+    public LabelStyleDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color color, ColorMode colorMode,
+            List<SimpleType> colorStyleSimpleExtensions, List<AbstractObject> colorStyleObjectExtensions,
+            double scale,
+            List<SimpleType> iconStyleSimpleExtensions, List<AbstractObject> iconStyleObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                color, colorMode, colorStyleSimpleExtensions, colorStyleObjectExtensions);
+        this.scale = scale;
+        this.labelStyleSimpleExtensions = iconStyleSimpleExtensions;
+        this.labelStyleObjectExtensions = iconStyleObjectExtensions;
+    }
+
+    @Override
+    public double getScale() {return this.scale;}
+
+    @Override
+    public List<SimpleType> getLabelStyleSimpleExtensions() {return this.labelStyleSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getLabelStyleObjectExtensions() {return this.labelStyleObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tLabelStyleDefault : "+
+                "\n\tscale : "+this.scale;
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LatLonAltBox.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LatLonAltBox.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,18 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface LatLonAltBox extends AbstractLatLonBox{
+
+    public double getMinAltitude();
+    public double getMaxAltitude();
+    public AltitudeMode getAltitudeMode();
+    public List<SimpleType> getLatLonAltBoxSimpleExtensions();
+    public List<AbstractObject> getLatLonAltBoxObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LatLonAltBoxDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LatLonAltBoxDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,46 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class LatLonAltBoxDefault extends AbstractLatLonBoxDefault implements LatLonAltBox {
+
+    private double minAltitude;
+    private double maxAltitude;
+    private AltitudeMode altitudeMode;
+    private List<SimpleType> latLonAltBoxSimpleExtensions;
+    private List<AbstractObject> latLonAltBoxObjectExtensions;
+
+    public LatLonAltBoxDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            Angle180 north, Angle180 south, Angle180 east, Angle180 west,
+            List<SimpleType> abstractLatLonBoxSimpleExtensions, List<AbstractObject> abstractLatLonBoxObjectExtensions,
+            double minAltitude, double maxAltitude, AltitudeMode altitudeMode,
+            List<SimpleType> latLonAltBoxSimpleExtensions, List<AbstractObject> latLonAltBoxObjectExtensions){
+        super(objectSimpleExtensions, idAttributes, north, south, east, west, abstractLatLonBoxSimpleExtensions, abstractLatLonBoxObjectExtensions);
+        this.minAltitude = minAltitude;
+        this.maxAltitude = maxAltitude;
+        this.altitudeMode = altitudeMode;
+        this.latLonAltBoxSimpleExtensions = latLonAltBoxSimpleExtensions;
+        this.latLonAltBoxObjectExtensions = latLonAltBoxObjectExtensions;
+    }
+
+    @Override
+    public double getMinAltitude() {return this.minAltitude;}
+
+    @Override
+    public double getMaxAltitude() {return this.maxAltitude;}
+
+    @Override
+    public AltitudeMode getAltitudeMode() {return this.altitudeMode;}
+
+    @Override
+    public List<SimpleType> getLatLonAltBoxSimpleExtensions() {return this.latLonAltBoxSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getLatLonAltBoxObjectExtensions() {return this.latLonAltBoxObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LatLonBox.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LatLonBox.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,16 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface LatLonBox extends AbstractLatLonBox {
+
+    public Angle180 getRotation();
+    public List<SimpleType> getLatLonBoxSimpleExtensions();
+    public List<AbstractObject> getLatLonBoxObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LatLonBoxDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LatLonBoxDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,36 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class LatLonBoxDefault extends AbstractLatLonBoxDefault implements LatLonBox{
+
+    private Angle180 rotation;
+    private List<SimpleType> latLonBoxSimpleExtensions;
+    private List<AbstractObject> latLonBoxObjectExtensions;
+
+    public LatLonBoxDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            Angle180 north, Angle180 south, Angle180 east, Angle180 west,
+            List<SimpleType> abstractLatLonBoxSimpleExtensions, List<AbstractObject> abstractLatLonBoxObjectExtensions,
+            Angle180 rotation,
+            List<SimpleType> latLonBoxSimpleExtensions,
+            List<AbstractObject> latLonBoxObjectExtensions){
+        super(objectSimpleExtensions, idAttributes, north, south, east, west, abstractLatLonBoxSimpleExtensions, abstractLatLonBoxObjectExtensions);
+        this.rotation = rotation;
+        this.latLonBoxSimpleExtensions = latLonBoxSimpleExtensions;
+        this.latLonBoxObjectExtensions = latLonBoxObjectExtensions;
+    }
+
+    @Override
+    public Angle180 getRotation() {return this.rotation;}
+
+    @Override
+    public List<SimpleType> getLatLonBoxSimpleExtensions() {return this.latLonBoxSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getLatLonBoxObjectExtensions() {return this.latLonBoxObjectExtensions;}
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LineString.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LineString.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,19 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface LineString extends AbstractGeometry {
+
+    public boolean getExtrude();
+    public boolean getTessellate();
+    public AltitudeMode getAltitudeMode();
+    public Coordinates getCoordinates();
+    public List<SimpleType> getLineStringSimpleExtensions();
+    public List<AbstractObject> getLineStringObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LineStringDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LineStringDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,64 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class LineStringDefault extends AbstractGeometryDefault implements LineString {
+
+    private boolean extrude;
+    private boolean tessellate;
+    private AltitudeMode altitudeMode;
+    private Coordinates coordinates;
+    private List<SimpleType> lineStringSimpleExtensions;
+    private List<AbstractObject> lineStringObjectExtensions;
+
+    public LineStringDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            boolean extrude, boolean tessellate,
+            AltitudeMode altitudeMode,
+            Coordinates coordinates,
+            List<SimpleType> lineStringSimpleExtensions,
+            List<AbstractObject> lineStringObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+            abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions);
+        this.extrude = extrude;
+        this.tessellate = tessellate;
+        this.altitudeMode = altitudeMode;
+        this.coordinates = coordinates;
+        this.lineStringSimpleExtensions = lineStringSimpleExtensions;
+        this.lineStringObjectExtensions = lineStringObjectExtensions;
+    }
+
+    @Override
+    public boolean getExtrude() {return this.extrude;}
+
+    @Override
+    public boolean getTessellate() {return this.tessellate;}
+
+    @Override
+    public AltitudeMode getAltitudeMode() {return this.altitudeMode;}
+
+    @Override
+    public Coordinates getCoordinates() {return this.coordinates;}
+
+    @Override
+    public List<SimpleType> getLineStringSimpleExtensions() {return this.lineStringSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getLineStringObjectExtensions() {return this.lineStringObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString();
+        resultat += "LineString : ";
+        resultat += "\n\t"+coordinates.toString();
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LineStyle.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LineStyle.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,16 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface LineStyle extends AbstractColorStyle {
+
+    public double getWidth();
+    public List<SimpleType> getLineStyleSimpleExtensions();
+    public List<AbstractObject> getLineStyleObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LineStyleDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LineStyleDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,47 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class LineStyleDefault extends AbstractColorStyleDefault implements LineStyle {
+
+    private double width;
+    private List<SimpleType> lineStyleSimpleExtensions;
+    private List<AbstractObject> lineStyleObjectExtentions;
+
+    public LineStyleDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color color, ColorMode colorMode,
+            List<SimpleType> colorStyleSimpleExtensions, List<AbstractObject> colorStyleObjectExtensions,
+            double width,
+            List<SimpleType> lineStyleSimpleExtensions, List<AbstractObject> lineStyleObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                color, colorMode, colorStyleSimpleExtensions, colorStyleObjectExtensions);
+        this.width = width;
+        this.lineStyleSimpleExtensions = lineStyleSimpleExtensions;
+        this.lineStyleObjectExtentions = lineStyleObjectExtensions;
+    }
+
+    @Override
+    public double getWidth() {return this.width;}
+
+    @Override
+    public List<SimpleType> getLineStyleSimpleExtensions() {return this.lineStyleSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getLineStyleObjectExtensions() {return this.lineStyleObjectExtentions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tLineStyleDefault : "+
+                "\n\twidth : "+this.width;
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LinearRing.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LinearRing.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,19 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface LinearRing extends AbstractGeometry {
+
+    public boolean getExtrude();
+    public boolean getTessellate();
+    public AltitudeMode getAltitudeMode();
+    public Coordinates getCoordinates();
+    public List<SimpleType> getLinearRingSimpleExtensions();
+    public List<AbstractObject> getLinearRingObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LinearRingDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LinearRingDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,64 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class LinearRingDefault extends AbstractGeometryDefault implements LinearRing {
+
+    private boolean extrude;
+    private boolean tessellate;
+    private AltitudeMode altitudeMode;
+    private Coordinates coordinates;
+    private List<SimpleType> linearRingSimpleExtensions;
+    private List<AbstractObject> linearRingObjectExtensions;
+
+    public LinearRingDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            boolean extrude, boolean tessellate,
+            AltitudeMode altitudeMode,
+            Coordinates coordinates,
+            List<SimpleType> linearRingSimpleExtensions,
+            List<AbstractObject> linearRingObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+            abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions);
+        this.extrude = extrude;
+        this.tessellate = tessellate;
+        this.altitudeMode = altitudeMode;
+        this.coordinates = coordinates;
+        this.linearRingSimpleExtensions = linearRingSimpleExtensions;
+        this.linearRingObjectExtensions = linearRingObjectExtensions;
+    }
+
+    @Override
+    public boolean getExtrude() {return this.extrude;}
+
+    @Override
+    public boolean getTessellate() {return this.tessellate;}
+
+    @Override
+    public AltitudeMode getAltitudeMode() {return this.altitudeMode;}
+
+    @Override
+    public Coordinates getCoordinates() {return this.coordinates;}
+
+    @Override
+    public List<SimpleType> getLinearRingSimpleExtensions() {return this.linearRingSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getLinearRingObjectExtensions() {return this.linearRingObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString();
+        resultat += "LinearRing : ";
+        resultat += "\n\t"+coordinates.toString();
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Link.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Link.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,24 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Link extends AbstractObject {
+
+    public String getHref();
+    public List<SimpleType> getBasicLinkSimpleExtensions();
+    public List<AbstractObject> getBasicLinkObjectExtensions();
+    public RefreshMode getRefreshMode();
+    public double getRefreshInterval();
+    public ViewRefreshMode getViewRefreshMode();
+    public double getViewRefreshTime();
+    public double getViewBoundScale();
+    public String getViewFormat();
+    public String getHttpQuery();
+    public List<SimpleType> getLinkSimpleExtensions();
+    public List<AbstractObject> getLinkObjectExtensions();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LinkDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LinkDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,86 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class LinkDefault extends AbstractObjectDefault implements Link {
+
+    private String href;
+    private List<SimpleType> basicLinkSimpleExtensions;
+    private List<AbstractObject> basicLinkObjectExtensions;
+    
+    private RefreshMode refreshMode;
+    private double refreshInterval;
+    private ViewRefreshMode viewRefreshMode;
+    private double viewRefreshTime;
+    private double viewBoundScale;
+    private String viewFormat;
+    private String httpQuery;
+    private List<SimpleType> linkSimpleExtensions;
+    private List<AbstractObject> linkObjectExtensions;
+
+    public LinkDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String href, List<SimpleType> basicLinkSimpleExtensions, List<AbstractObject> basicLinkObjectExtensions,
+            RefreshMode refreshMode, double refreshInterval, ViewRefreshMode viewRefreshMode, double viewRefreshTime,
+            double viewBoundScale, String viewFormat, String httpQuery,
+            List<SimpleType> linkSimpleExtensions, List<AbstractObject> linkObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.href = href;
+        this.refreshMode = refreshMode;
+        this.refreshInterval = refreshInterval;
+        this.viewRefreshMode = viewRefreshMode;
+        this.viewBoundScale = viewBoundScale;
+        this.viewFormat = viewFormat;
+        this.httpQuery = httpQuery;
+        this.linkSimpleExtensions = linkSimpleExtensions;
+        this.linkObjectExtensions = linkObjectExtensions;
+
+    }
+
+    @Override
+    public String getHref() {return this.href;}
+
+    @Override
+    public List<SimpleType> getBasicLinkSimpleExtensions() {return this.basicLinkSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getBasicLinkObjectExtensions() {return this.basicLinkObjectExtensions;}
+
+    @Override
+    public RefreshMode getRefreshMode() {return this.refreshMode;}
+
+    @Override
+    public double getRefreshInterval() {return this.refreshInterval;}
+
+    @Override
+    public ViewRefreshMode getViewRefreshMode() {return this.viewRefreshMode;}
+
+    @Override
+    public double getViewRefreshTime() {return this.viewRefreshTime;}
+
+    @Override
+    public double getViewBoundScale() {return this.viewBoundScale;}
+
+    @Override
+    public String getViewFormat() {return this.viewFormat;}
+
+    @Override
+    public String getHttpQuery() {return this.httpQuery;}
+
+    @Override
+    public List<SimpleType> getLinkSimpleExtensions() {return this.linkSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getLinkObjectExtensions() {return this.linkObjectExtensions;}
+
+    @Override
+    public List<SimpleType> getObjectSimpleExtensions() {return this.objectSimpleExtensions;}
+
+    @Override
+    public IdAttributes getIdAttributes() {return this.idAttributes;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ListItem.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ListItem.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,38 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public enum ListItem {
+
+    RADIO_FOLDER("radioFolder"),
+    CHECK("check"),
+    CHECK_HIDE_CHILDREN("checkHideChildren"),
+    CHECK_OFF_ONLY("checkOffOnly");
+
+    private String item;
+
+    private ListItem(String item){
+        this.item = item;
+    }
+
+    public String getItem(){
+        return this.item;
+    }
+
+    public static ListItem transform(String item){
+        return transform(item, null);
+    }
+
+    public static ListItem transform(String item, ListItem defaultValue){
+        ListItem resultat = defaultValue;
+        for(ListItem cm : ListItem.values()){
+            if(cm.getItem().equals(item)){
+                resultat = cm;
+                break;
+            }
+        }
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ListStyle.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ListStyle.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,19 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface ListStyle extends AbstractSubStyle {
+
+    public ListItem getListItem();
+    public Color getBgColor();
+    public List<ItemIcon> getItemIcons();
+    public int getMaxSnippetLines();
+    public List<SimpleType> getListStyleSimpleExtensions();
+    public List<AbstractObject> getListStyleObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ListStyleDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ListStyleDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,61 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class ListStyleDefault extends AbstractSubStyleDefault implements ListStyle {
+
+    private ListItem listItem;
+    private Color bgColor;
+    private List<ItemIcon> itemIcons;
+    private int maxSnippetLines;
+    private List<SimpleType> listStyleSimpleExtensions;
+    private List<AbstractObject> listStyleObjectExtensions;
+
+    public ListStyleDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            ListItem listItem, Color bgColor, List<ItemIcon> itemIcons, int maxSnippetLines,
+            List<SimpleType> listStyleSimpleExtensions, List<AbstractObject> listStyleObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions);
+        this.listItem = listItem;
+        this.bgColor = bgColor;
+        this.itemIcons = itemIcons;
+        this.maxSnippetLines = maxSnippetLines;
+        this.listStyleSimpleExtensions = listStyleSimpleExtensions;
+        this.listStyleObjectExtensions = listStyleObjectExtensions;
+    }
+
+    @Override
+    public ListItem getListItem() {return this.listItem;}
+
+    @Override
+    public Color getBgColor() {return this.bgColor;}
+
+    @Override
+    public List<ItemIcon> getItemIcons() {return this.itemIcons;}
+
+    @Override
+    public int getMaxSnippetLines() {return this.maxSnippetLines;}
+
+    @Override
+    public List<SimpleType> getListStyleSimpleExtensions() {return this.listStyleSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getListStyleObjectExtensions() {return this.listStyleObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tListStyleDefault : "+
+                "\n\tlistItem : "+this.listItem+
+                "\n\tbgColor : "+this.bgColor+
+                "\n\titemIcons : "+this.itemIcons+
+                "\n\tmaxSnippetLines : "+this.maxSnippetLines;
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Location.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Location.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,18 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Location extends AbstractObject {
+
+    public Angle180 getLongitude();
+    public Angle90 getLatitude();
+    public double getAltitude();
+    public List<SimpleType> getLocationSimpleExtensions();
+    public List<AbstractObject> getLocationObjectExtensions();
+
+}
\ No newline at end of file
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LocationDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LocationDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,47 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class LocationDefault extends AbstractObjectDefault implements Location {
+
+    private Angle180 longitude;
+    private Angle90 latitude;
+    private double altitude;
+    private List<SimpleType> locationSimpleExtensions;
+    private List<AbstractObject> locationObjectExtensions;
+
+    public LocationDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            Angle180 longitude, Angle90 latitude, double altitude,
+            List<SimpleType> locationSimpleExtensions, List<AbstractObject> locationObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.longitude = longitude;
+        this.latitude = latitude;
+        this.altitude = altitude;
+        this.locationSimpleExtensions = locationSimpleExtensions;
+        this.locationObjectExtensions = locationObjectExtensions;
+    }
+
+
+
+    @Override
+    public Angle180 getLongitude() {return this.longitude;}
+
+    @Override
+    public Angle90 getLatitude() {return this.latitude;}
+
+    @Override
+    public double getAltitude() {return this.altitude;}
+
+    @Override
+    public List<SimpleType> getLocationSimpleExtensions() {return this.locationSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getLocationObjectExtensions() {return this.locationObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Lod.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Lod.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,19 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Lod extends AbstractObject{
+
+    public double getMinLodPixels();
+    public double getMaxLodPixels();
+    public double getMinFadeExtent();
+    public double getMaxFadeExtent();
+    public List<SimpleType> getLodSimpleExtensions();
+    public List<AbstractObject> getLodObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LodDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LodDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,50 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class LodDefault extends AbstractObjectDefault implements Lod {
+
+    private double minLodPixels;
+    private double maxLodPixels;
+    private double minFadeExtent;
+    private double maxFadeExtent;
+    private List<SimpleType> lodSimpleExtentions;
+    private List<AbstractObject> lodObjectExtensions;
+
+    public LodDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            double minLodPixels, double maxLodPixels, double minFadeExtent, double maxFadeExtent,
+            List<SimpleType> lodSimpleExtentions, List<AbstractObject> lodObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.minLodPixels = minLodPixels;
+        this.maxLodPixels = maxLodPixels;
+        this.minFadeExtent = minFadeExtent;
+        this.maxFadeExtent = maxFadeExtent;
+        this.lodSimpleExtentions = lodSimpleExtentions;
+        this.lodObjectExtensions = lodObjectExtensions;
+    }
+
+    @Override
+    public double getMinLodPixels() {return this.minLodPixels;}
+
+    @Override
+    public double getMaxLodPixels() {return this.maxLodPixels;}
+
+    @Override
+    public double getMinFadeExtent() {return this.minFadeExtent;}
+
+    @Override
+    public double getMaxFadeExtent() {return this.maxFadeExtent;}
+
+    @Override
+    public List<SimpleType> getLodSimpleExtensions() {return this.lodSimpleExtentions;}
+
+    @Override
+    public List<AbstractObject> getLodObjectExtensions() {return this.lodObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LookAt.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LookAt.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,20 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface LookAt extends AbstractView {
+
+    public Angle180 getLongitude();
+    public Angle90 getLatitude();
+    public double getAltitude();
+    public Angle360 getHeading();
+    public Anglepos180 getTilt();
+    public double getRange();
+    public List<SimpleType> getLookAtSimpleExtensions();
+    public List<AbstractObject> getLookAtObjectExtensions();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LookAtDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/LookAtDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,62 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class LookAtDefault extends AbstractViewDefault implements LookAt {
+
+    private Angle180 longitude;
+    private Angle90 latitude;
+    private double altitude;
+    private Angle360 heading;
+    private Anglepos180 tilt;
+    private double range;
+    private List<SimpleType> lookAtSimpleExtensions;
+    private List<AbstractObject> lookAtObjectExtensions;
+
+    public LookAtDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractViewSimpleExtensions, List<AbstractObject> abstractViewObjectExtensions,
+            Angle180 longitude, Angle90 latitude, double altitude,
+            Angle360 heading, Anglepos180 tilt, double range,
+            List<SimpleType> lookAtSimpleExtensions, List<AbstractObject> lookAtObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                abstractViewSimpleExtensions, abstractViewObjectExtensions);
+        this.longitude = longitude;
+        this.latitude = latitude;
+        this.altitude = altitude;
+        this.heading = heading;
+        this.tilt = tilt;
+        this.range = range;
+        this.lookAtSimpleExtensions = lookAtSimpleExtensions;
+        this.lookAtObjectExtensions = lookAtObjectExtensions;
+    }
+
+    @Override
+    public Angle180 getLongitude() {return this.longitude;}
+
+    @Override
+    public Angle90 getLatitude() {return this.latitude;}
+
+    @Override
+    public double getAltitude() {return this.altitude;}
+
+    @Override
+    public Angle360 getHeading() {return this.heading;}
+
+    @Override
+    public Anglepos180 getTilt() {return this.tilt;}
+
+    @Override
+    public double getRange() {return this.range;}
+
+    @Override
+    public List<SimpleType> getLookAtSimpleExtensions() {return this.lookAtSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getLookAtObjectExtensions() {return this.lookAtObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Model.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Model.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,21 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Model extends AbstractGeometry {
+
+    public AltitudeMode getAltitudeMode();
+    public Location getLocation();
+    public Orientation getOrientation();
+    public Scale getScale();
+    public Link getLink();
+    public ResourceMap getRessourceMap();
+    public List<SimpleType> getModelSimpleExtensions();
+    public List<AbstractObject> getModelObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ModelDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ModelDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,62 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class ModelDefault extends AbstractGeometryDefault implements Model {
+
+    private AltitudeMode altitudeMode;
+    private Location location;
+    private Orientation orientation;
+    private Scale scale;
+    private Link link;
+    private ResourceMap resourceMap;
+    private List<SimpleType> modelSimpleExtensions;
+    private List<AbstractObject> modelObjectExtensions;
+
+    public ModelDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            AltitudeMode altitudeMode, Location location, Orientation orientation, Scale scale, Link link, ResourceMap resourceMap,
+            List<SimpleType> modelSimpleExtensions, List<AbstractObject> modelObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions);
+        this.altitudeMode = altitudeMode;
+        this.location = location;
+        this.orientation = orientation;
+        this.scale = scale;
+        this.link = link;
+        this.resourceMap = resourceMap;
+        this.modelSimpleExtensions = modelSimpleExtensions;
+        this.modelObjectExtensions = modelObjectExtensions;
+    }
+
+    @Override
+    public AltitudeMode getAltitudeMode() {return this.altitudeMode;}
+
+    @Override
+    public Location getLocation() {return this.location;}
+
+    @Override
+    public Orientation getOrientation() {return this.orientation;}
+
+    @Override
+    public Scale getScale() {return this.scale;}
+
+    @Override
+    public Link getLink() {return this.link;}
+
+    @Override
+    public ResourceMap getRessourceMap() {return this.resourceMap;}
+
+    @Override
+    public List<SimpleType> getModelSimpleExtensions() {return this.modelSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getModelObjectExtensions() {return this.modelObjectExtensions;}
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/MultiGeometry.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/MultiGeometry.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,16 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface MultiGeometry extends AbstractGeometry {
+
+    public List<AbstractGeometry> getGeometries();
+    public List<SimpleType> getMultiGeometrySimpleExtensions();
+    public List<AbstractObject> getMultiGeometryObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/MultiGeometryDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/MultiGeometryDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,39 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class MultiGeometryDefault extends AbstractGeometryDefault implements MultiGeometry {
+
+    private List<AbstractGeometry> geometries;
+    private List<SimpleType> multiGeometrySimpleExtensions;
+    private List<AbstractObject> multiGeometryObjectExtensions;
+
+    public MultiGeometryDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            List<AbstractGeometry> geometries,
+            List<SimpleType> multiGeometrySimpleExtensions,
+            List<AbstractObject> multiGeometryObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions);
+        this.geometries = geometries;
+        this.multiGeometrySimpleExtensions = multiGeometrySimpleExtensions;
+        this.multiGeometryObjectExtensions = multiGeometryObjectExtensions;
+    }
+
+    @Override
+    public List<AbstractGeometry> getGeometries() {return this.geometries;}
+
+    @Override
+    public List<SimpleType> getMultiGeometrySimpleExtensions() {return this.multiGeometrySimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getMultiGeometryObjectExtensions() {return this.multiGeometryObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/NetworkLink.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/NetworkLink.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,18 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface NetworkLink extends AbstractFeature {
+
+    public boolean getRefreshVisibility();
+    public boolean getFlyToView();
+    public Link getLink();
+    public List<SimpleType> getNetworkLinkSimpleExtensions();
+    public List<AbstractObject> getNetworkLinkObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/NetworkLinkControl.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/NetworkLinkControl.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,9 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface NetworkLinkControl {
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Orientation.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Orientation.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,17 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Orientation extends AbstractObject {
+
+    public Angle360 getHeading();
+    public Anglepos180 getTilt();
+    public Angle180 getRoll();
+    public List<SimpleType> getOrientationSimpleExtensions();
+    public List<AbstractObject> getOrientationObjectExtensions();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/OrientationDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/OrientationDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,46 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class OrientationDefault extends AbstractObjectDefault implements Orientation {
+
+    private Angle360 heading;
+    private Anglepos180 tilt;
+    private Angle180 roll;
+    private List<SimpleType> orientationSimpleExtensions;
+    private List<AbstractObject> orientationObjectExtensions;
+
+    public OrientationDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            Angle360 heading, Anglepos180 tilt, Angle180 roll,
+            List<SimpleType> orientationSimpleExtensions,
+            List<AbstractObject> orientationObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.heading = heading;
+        this.tilt= tilt;
+        this.roll = roll;
+        this.orientationSimpleExtensions = orientationSimpleExtensions;
+        this.orientationObjectExtensions = orientationObjectExtensions;
+    }
+
+    @Override
+    public Angle360 getHeading() {return this.heading;}
+
+    @Override
+    public Anglepos180 getTilt() {return this.tilt;}
+
+    @Override
+    public Angle180 getRoll() {return this.roll;}
+
+    @Override
+    public List<SimpleType> getOrientationSimpleExtensions() {return this.orientationSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getOrientationObjectExtensions() {return this.orientationObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Pair.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Pair.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,18 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Pair extends AbstractObject {
+
+    public StyleState getKey();
+    public String getStyleUrl();
+    public AbstractStyleSelector getAbstractStyleSelector();
+    public List<SimpleType> getPairSimpleExtensions();
+    public List<AbstractObject> getPairObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PairDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PairDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,45 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class PairDefault extends AbstractObjectDefault implements Pair{
+
+    private StyleState key;
+    private String styleUrl;
+    private AbstractStyleSelector styleSelector;
+    private List<SimpleType> pairSimpleExtensions;
+    private List<AbstractObject> pairObjectExtensions;
+
+    public PairDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            StyleState key, String styleUrl, AbstractStyleSelector styleSelector,
+            List<SimpleType> pairSimpleExtensions,
+            List<AbstractObject> pairObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.key = key;
+        this.styleUrl = styleUrl;
+        this.styleSelector = styleSelector;
+        this.pairSimpleExtensions = pairSimpleExtensions;
+        this.pairObjectExtensions = pairObjectExtensions;
+    }
+
+    @Override
+    public StyleState getKey() {return this.key;}
+
+    @Override
+    public String getStyleUrl() {return this.styleUrl;}
+
+    @Override
+    public AbstractStyleSelector getAbstractStyleSelector() {return this.styleSelector;}
+
+    @Override
+    public List<SimpleType> getPairSimpleExtensions() {return this.pairSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getPairObjectExtensions() {return this.pairObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PhotoOverlay.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PhotoOverlay.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,20 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface PhotoOverlay extends AbstractOverlay {
+
+    public Angle180 getRotation();
+    public ViewVolume getViewVolume();
+    public ImagePyramid getImagePyramid();
+    public Point getPoint();
+    public Shape getShape();
+    public List<SimpleType> getPhotoOverlaySimpleExtensions();
+    public List<AbstractObject> getPhotoOverlayObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PhotoOverlayDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PhotoOverlayDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,70 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.xal.AddressDetails;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class PhotoOverlayDefault extends AbstractOverlayDefault implements PhotoOverlay {
+
+    private Angle180 rotation;
+    private ViewVolume viewVolume;
+    private ImagePyramid imagePyramid;
+    private Point point;
+    private Shape shape;
+    private List<SimpleType> photoOverlaySimpleExtensions;
+    private List<AbstractObject> photoOverlayObjectExtensions;
+
+    public PhotoOverlayDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            Color color, int drawOrder, Link icon,
+            List<SimpleType> abstractOveraySimpleExtensions, List<AbstractObject> abstractOverlayObjectExtensions,
+            Angle180 rotation, ViewVolume viewVolume, ImagePyramid imagePyramid, Point point, Shape shape,
+            List<SimpleType> photoOverlaySimpleExtensions, List<AbstractObject> photoOverlayObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link, address, addressDetails, phoneNumber, snippet,
+                description, view, timePrimitive, styleUrl, styleSelector, region, extendedData,
+                abstractFeatureSimpleExtensions, abstractFeatureObjectExtensions,
+                color, drawOrder, icon, abstractOveraySimpleExtensions, abstractOverlayObjectExtensions);
+        this.rotation = rotation;
+        this.viewVolume = viewVolume;
+        this.imagePyramid = imagePyramid;
+        this.point = point;
+        this.shape = shape;
+        this.photoOverlaySimpleExtensions = photoOverlaySimpleExtensions;
+        this.photoOverlayObjectExtensions = photoOverlayObjectExtensions;
+    }
+
+    @Override
+    public Angle180 getRotation() {return this.rotation;}
+
+    @Override
+    public ViewVolume getViewVolume() {return this.viewVolume;}
+
+    @Override
+    public ImagePyramid getImagePyramid() {return this.imagePyramid;}
+
+    @Override
+    public Point getPoint() {return this.point;}
+
+    @Override
+    public Shape getShape() {return this.shape;}
+
+    @Override
+    public List<SimpleType> getPhotoOverlaySimpleExtensions() {return this.photoOverlaySimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getPhotoOverlayObjectExtensions() {return this.photoOverlayObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Placemark.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Placemark.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,16 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Placemark extends AbstractFeature {
+
+    public AbstractGeometry getAbstractGeometry();
+    public List<SimpleType> getPlacemarkSimpleExtensions();
+    public List<AbstractObject> getPlacemarkObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PlacemarkDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PlacemarkDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,75 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.xal.AddressDetails;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class PlacemarkDefault extends AbstractFeatureDefault implements Placemark {
+
+    private AbstractGeometry abstractGeometry;
+    private List<SimpleType> placemarkSimpleExtension;
+    private List<AbstractObject> placemarkObjectExtension;
+
+
+    public PlacemarkDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            String name,
+            boolean visibility,
+            boolean open,
+            AtomPersonConstruct author,
+            AtomLink link,
+            String address,
+            AddressDetails addressDetails,
+            String phoneNumber, String snippet,
+            String description, AbstractView view,
+            AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            AbstractGeometry abstractGeometry,
+            List<SimpleType> placemarkSimpleExtensions,
+            List<AbstractObject> placemarkObjectExtension){
+
+        super(objectSimpleExtensions, idAttributes,
+            name, visibility, open, author, link, address, addressDetails,
+            phoneNumber, snippet, description, view, timePrimitive,
+            styleUrl, styleSelector, region, extendedData,
+            abstractFeatureSimpleExtensions,
+            abstractFeatureObjectExtensions);
+
+        this.abstractGeometry = abstractGeometry;
+        this.placemarkSimpleExtension = placemarkSimpleExtensions;
+        this.placemarkObjectExtension = placemarkObjectExtension;
+    }
+
+
+    @Override
+    public AbstractGeometry getAbstractGeometry() {
+        return this.abstractGeometry;
+    }
+
+    @Override
+    public List<SimpleType> getPlacemarkSimpleExtensions() {
+        return this.placemarkSimpleExtension;
+    }
+
+    @Override
+    public List<AbstractObject> getPlacemarkObjectExtensions() {
+        return this.placemarkObjectExtension;
+    }
+
+    @Override
+    public String toString(){
+        String resultat = super.toString();
+        resultat += "Placemark : ";
+        //resultat += "\n\t"+abstractGeometry;
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Point.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Point.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,17 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Point extends AbstractGeometry{
+
+    public boolean getExtrude();
+    public AltitudeMode getAltitudeMode();
+    public Coordinates getCoordinates();
+    public List<SimpleType> getPointSimpleExtensions();
+    public List<AbstractObject> getPointObjectExtensions();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PointDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PointDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,59 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class PointDefault extends AbstractGeometryDefault implements Point {
+
+    private boolean extrude;
+    private AltitudeMode altitudeMode;
+    private Coordinates coordinates;
+    private List<SimpleType> pointSimpleExtensions;
+    private List<AbstractObject> pointObjectExtensions;
+
+    public PointDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            boolean extrude,
+            AltitudeMode altitudeMode,
+            Coordinates coordinates,
+            List<SimpleType> pointSimpleExtensions,
+            List<AbstractObject> pointObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+            abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions);
+        this.extrude = extrude;
+        this.altitudeMode = altitudeMode;
+        this.coordinates = coordinates;
+        this.pointSimpleExtensions = pointSimpleExtensions;
+        this.pointObjectExtensions = pointObjectExtensions;
+    }
+
+    @Override
+    public boolean getExtrude() {return this.extrude;}
+
+    @Override
+    public AltitudeMode getAltitudeMode() {return this.altitudeMode;}
+
+    @Override
+    public Coordinates getCoordinates() {return this.coordinates;}
+
+    @Override
+    public List<SimpleType> getPointSimpleExtensions() {return this.pointSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getPointObjectExtensions() {return this.pointObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString();
+        resultat += "Point : ";
+        resultat += "\n\t"+coordinates.toString();
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PolyStyle.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PolyStyle.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,17 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface PolyStyle extends AbstractColorStyle {
+
+    public boolean getFill();
+    public boolean getOutline();
+    public List<SimpleType> getPolyStyleSimpleExtensions();
+    public List<AbstractObject> getPolyStyleObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PolyStyleDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PolyStyleDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,52 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class PolyStyleDefault extends AbstractColorStyleDefault implements PolyStyle{
+
+    private boolean fill;
+    private boolean outline;
+    private List<SimpleType> polyStyleSimpleExtensions;
+    private List<AbstractObject> polyStyleObjectExtensions;
+
+    public PolyStyleDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> subStyleSimpleExtensions, List<AbstractObject> subStyleObjectExtensions,
+            Color color, ColorMode colorMode,
+            List<SimpleType> colorStyleSimpleExtensions, List<AbstractObject> colorStyleObjectExtensions,
+            boolean fill, boolean outline,
+            List<SimpleType> polyStyleSimpleExtensions, List<AbstractObject> polyStyleObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                subStyleSimpleExtensions, subStyleObjectExtensions,
+                color, colorMode, colorStyleSimpleExtensions, colorStyleObjectExtensions);
+        this.fill = fill;
+        this.outline = outline;
+        this.polyStyleSimpleExtensions = polyStyleSimpleExtensions;
+        this.polyStyleObjectExtensions = polyStyleObjectExtensions;
+    }
+
+    @Override
+    public boolean getFill() {return this.fill;}
+
+    @Override
+    public boolean getOutline() {return this.outline;}
+
+    @Override
+    public List<SimpleType> getPolyStyleSimpleExtensions() {return this.polyStyleSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getPolyStyleObjectExtensions() {return this.polyStyleObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tPolyStyleDefault : "+
+                "\n\tfill : "+this.fill+
+                "\n\toutline : "+this.outline;
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Polygon.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Polygon.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,19 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Polygon extends AbstractGeometry {
+
+    public boolean getExtrude();
+    public boolean getTessellate();
+    public AltitudeMode getAltitudeMode();
+    public Boundary getOuterBoundaryIs();
+    public List<Boundary> getInnerBoundariesAre();
+    public List<SimpleType> getPolygonSimpleExtensions();
+    public List<AbstractObject> getPolygonObjectExtensions();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PolygonDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/PolygonDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,59 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class PolygonDefault extends AbstractGeometryDefault implements Polygon {
+
+    private boolean extrude;
+    private boolean tessellate;
+    private AltitudeMode altitudeMode;
+    private Boundary outerBoundaryIs;
+    private List<Boundary> innerBoundariesAre;
+    private List<SimpleType> polygonSimpleExtensions;
+    private List<AbstractObject> polygonObjectExtensions;
+
+    public PolygonDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractGeometrySimpleExtensions,
+            List<AbstractObject> abstractGeometryObjectExtensions,
+            boolean extrude, boolean tessellate, AltitudeMode altitudeMode,
+            Boundary outerBoundaryIs, List<Boundary> innerBoundariesAre,
+            List<SimpleType> polygonSimpleExtensions, List<AbstractObject> polygonObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                abstractGeometrySimpleExtensions, abstractGeometryObjectExtensions);
+        this.extrude = extrude;
+        this.tessellate = tessellate;
+        this.altitudeMode = altitudeMode;
+        this.outerBoundaryIs = outerBoundaryIs;
+        this.innerBoundariesAre = innerBoundariesAre;
+        this.polygonSimpleExtensions = polygonSimpleExtensions;
+        this.polygonObjectExtensions = polygonObjectExtensions;
+    }
+
+    @Override
+    public boolean getExtrude() {return this.extrude;}
+
+    @Override
+    public boolean getTessellate() {return this.tessellate;}
+
+    @Override
+    public AltitudeMode getAltitudeMode() {return this.altitudeMode;}
+
+    @Override
+    public Boundary getOuterBoundaryIs() {return this.outerBoundaryIs;}
+
+    @Override
+    public List<Boundary> getInnerBoundariesAre() {return this.innerBoundariesAre;}
+
+    @Override
+    public List<SimpleType> getPolygonSimpleExtensions() {return this.polygonSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getPolygonObjectExtensions() {return this.polygonObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/RefreshMode.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/RefreshMode.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,36 @@
+package org.geotoolkit.data.model.kml;
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public enum RefreshMode {
+
+    ON_CHANGE("onChange"),
+    ON_INTERVAL("onInterval"),
+    ON_EXPIRE("onExpire");
+
+    private String refreshMode;
+
+    private RefreshMode(String refreshMode){
+        this.refreshMode = refreshMode;
+    }
+
+    public String getRefreshMode(){
+        return this.refreshMode;
+    }
+
+    public static RefreshMode transform(String refreshMode){
+        return transform(refreshMode, null);
+    }
+
+    public static RefreshMode transform(String refreshMode, RefreshMode defaultValue){
+        RefreshMode resultat = defaultValue;
+        for(RefreshMode cm : RefreshMode.values()){
+            if(cm.getRefreshMode().equals(refreshMode)){
+                resultat = cm;
+                break;
+            }
+        }
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Region.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Region.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,17 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Region extends AbstractObject{
+
+    public LatLonAltBox getLatLonAltBox();
+    public Lod getLod();
+    public List<SimpleType> getRegionSimpleExtensions();
+    public List<AbstractObject> getRegionObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/RegionDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/RegionDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,39 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class RegionDefault extends AbstractObjectDefault implements Region {
+
+    private LatLonAltBox latLonAltBox;
+    private Lod lod;
+    private List<SimpleType> regionSimpleExtensions;
+    private List<AbstractObject> regionObjectExtentions;
+
+    public RegionDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            LatLonAltBox latLonAltBox, Lod lod, List<SimpleType> regionSimpleExtensions, List<AbstractObject> regionObjectExtentions){
+        super(objectSimpleExtensions, idAttributes);
+        this.latLonAltBox = latLonAltBox;
+        this.lod = lod;
+        this.regionSimpleExtensions = regionSimpleExtensions;
+        this.regionObjectExtentions = regionObjectExtentions;
+    }
+
+    @Override
+    public LatLonAltBox getLatLonAltBox() {return this.latLonAltBox;}
+
+    @Override
+    public Lod getLod() {return this.lod;}
+
+    @Override
+    public List<SimpleType> getRegionSimpleExtensions() {return this.regionSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getRegionObjectExtensions() {return this.regionObjectExtentions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ResourceMap.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ResourceMap.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,16 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface ResourceMap extends AbstractObject {
+
+    public List<Alias> getAliases();
+    public List<SimpleType> getResourceMapSimpleExtensions();
+    public List<AbstractObject> getResourceMapObjectExtensions();
+    
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ResourceMapDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ResourceMapDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,35 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class ResourceMapDefault extends AbstractObjectDefault implements ResourceMap {
+
+    private List<Alias> aliases;
+    private List<SimpleType> resourceMapSimpleExtensions;
+    private List<AbstractObject> resourceMapObjectExtensions;
+
+    public ResourceMapDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<Alias> aliases,
+            List<SimpleType> resourceMapSimpleExtensions, List<AbstractObject> resourceMapObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.aliases = aliases;
+        this.resourceMapSimpleExtensions = resourceMapSimpleExtensions;
+        this.resourceMapObjectExtensions = resourceMapObjectExtensions;
+    }
+
+    @Override
+    public List<Alias> getAliases() {return this.aliases;}
+
+    @Override
+    public List<SimpleType> getResourceMapSimpleExtensions() {return this.resourceMapSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getResourceMapObjectExtensions() {return this.resourceMapObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Scale.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Scale.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,18 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Scale extends AbstractObject {
+
+    public double getX();
+    public double getY();
+    public double getZ();
+    public List<SimpleType> getScaleSimpleExtensions();
+    public List<AbstractObject> getScaleObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ScaleDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ScaleDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,42 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class ScaleDefault extends AbstractObjectDefault implements Scale {
+
+    private double x;
+    private double y;
+    private double z;
+    private List<SimpleType> scaleSimpleExtensions;
+    private List<AbstractObject> scaleObjectExtensions;
+
+    public ScaleDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes, double x, double y, double z,
+            List<SimpleType> scaleSimpleExtensions, List<AbstractObject> scaleObjectExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.x = x;
+        this.y = y;
+        this.z = z;
+    }
+
+    @Override
+    public double getX() {return this.x;}
+
+    @Override
+    public double getY() {return this.y;}
+
+    @Override
+    public double getZ() {return this.z;}
+
+    @Override
+    public List<SimpleType> getScaleSimpleExtensions() {return this.scaleSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getScaleObjectExtensions() {return this.scaleObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Schema.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Schema.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,15 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Schema {
+ 
+    public List<SimpleField> getSimpleFields();
+    //public List<SchemaExtension> getSchemaExtensions();
+    public String getName();
+    public String getId();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SchemaData.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SchemaData.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,14 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface SchemaData extends AbstractObject {
+
+    public List<SimpleData> getSimpleDatas();
+    public List<Object> getSchemaDataExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SchemaDataDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SchemaDataDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,28 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class SchemaDataDefault extends AbstractObjectDefault implements SchemaData {
+
+    public List<SimpleData> simpleDatas;
+    public List<Object> schemaDataExtensions;
+
+    public SchemaDataDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleData> simpleDatas, List<Object> schemaDataExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.simpleDatas = simpleDatas;
+        this.schemaDataExtensions = schemaDataExtensions;
+    }
+
+    @Override
+    public List<SimpleData> getSimpleDatas() {return this.simpleDatas;}
+
+    @Override
+    public List<Object> getSchemaDataExtensions() {return this.schemaDataExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SchemaDataDefault.java.orig
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SchemaDataDefault.java.orig	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,28 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class SchemaDataDefault extends AbstractObjectDefault implements SchemaData {
+
+    public List<SimpleData> simpleDatas;
+    public List<Object> schemaDataExtensions;
+
+    public SchemaDataDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleData> simpleDatas, List<Object> schemaDataExtensions){
+        super(objectSimpleExtensions, idAttributes);
+        this.simpleDatas = simpleDatas;
+        this.schemaDataExtensions = schemaDataExtensions;
+    }
+
+    @Override
+    public List<SimpleData> getSimpleDatas() {return this.simpleDatas;}
+
+    @Override
+    public List<Object> getSchemaDataExtensions() {return this.schemaDataExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SchemaDataDefault.java.rej
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SchemaDataDefault.java.rej	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,31 @@
+--- /dev/null
++++ modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SchemaDataDefault.java	Tue May 25 16:22:32 2010 +0200
+@@ -0,0 +1,28 @@
++package org.geotoolkit.data.model.kml;
++
++import java.util.List;
++import org.geotoolkit.data.model.xsd.SimpleType;
++
++/**
++ *
++ * @author Samuel Andr√©s
++ */
++public class SchemaDataDefault extends AbstractObjectDefault implements SchemaData {
++
++    public List<SimpleData> simpleDatas;
++    public List<Object> schemaDataExtensions;
++
++    public SchemaDataDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
++            List<SimpleData> simpleDatas, List<Object> schemaDataExtensions){
++        super(objectSimpleExtensions, idAttributes);
++        this.simpleDatas = simpleDatas;
++        this.schemaDataExtensions = schemaDataExtensions;
++    }
++
++    @Override
++    public List<SimpleData> getSimpleDatas() {return this.simpleDatas;}
++
++    @Override
++    public List<Object> getSchemaDataExtensions() {return this.schemaDataExtensions;}
++
++}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SchemaDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SchemaDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,32 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class SchemaDefault implements Schema {
+
+    private List<SimpleField> simpleFields;
+    //private List<SchemaExtension> schemaExtensions;
+    private String name;
+    private String id;
+
+    public SchemaDefault(List<SimpleField> simpleFields,
+            String name, String id){
+        this.simpleFields = simpleFields;
+        this.name = name;
+        this.id = id;
+    }
+
+    @Override
+    public List<SimpleField> getSimpleFields() {return this.simpleFields;}
+
+    @Override
+    public String getName() {return this.name;}
+
+    @Override
+    public String getId() {return this.id;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ScreenOverlay.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ScreenOverlay.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,20 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface ScreenOverlay extends AbstractOverlay {
+
+    public Vec2 getOverlayXY();
+    public Vec2 getScreenXY();
+    public Vec2 getRotationXY();
+    public Vec2 getSize();
+    public Angle180 getRotation();
+    public List<SimpleType> getScreenOverlaySimpleExtensions();
+    public List<AbstractObject> getScreenOverlayObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ScreenOverlayDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ScreenOverlayDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,73 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.atom.AtomLink;
+import org.geotoolkit.data.model.atom.AtomPersonConstruct;
+import org.geotoolkit.data.model.xal.AddressDetails;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class ScreenOverlayDefault extends AbstractOverlayDefault implements ScreenOverlay {
+
+    private Vec2 overlayXY;
+    private Vec2 screenXY;
+    private Vec2 rotationXY;
+    private Vec2 size;
+    private Angle180 rotation;
+    private List<SimpleType> screenOverlaySimpleExtensions;
+    private List<AbstractObject> screenOverlayObjectExtensions;
+
+    public ScreenOverlayDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            String name, boolean visibility, boolean open, AtomPersonConstruct author, AtomLink link,
+            String address, AddressDetails addressDetails, String phoneNumber, String snippet,
+            String description, AbstractView view, AbstractTimePrimitive timePrimitive,
+            String styleUrl, List<AbstractStyleSelector> styleSelector,
+            Region region, ExtendedData extendedData,
+            List<SimpleType> abstractFeatureSimpleExtensions,
+            List<AbstractObject> abstractFeatureObjectExtensions,
+            Color color, int drawOrder, Link icon,
+            List<SimpleType> abstractOveraySimpleExtensions, List<AbstractObject> abstractOverlayObjectExtensions,
+            Vec2 overlayXY, Vec2 screenXY, Vec2 rotationXY, Vec2 size, Angle180 rotation,
+            List<SimpleType> screenOverlaySimpleExtensions, List<AbstractObject> screenOverlayObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                name, visibility, open, author, link,
+                address, addressDetails, phoneNumber, snippet,
+                description, view, timePrimitive,
+                styleUrl, styleSelector, region, extendedData,
+                abstractFeatureSimpleExtensions, abstractFeatureObjectExtensions,
+                color, drawOrder, icon, abstractOveraySimpleExtensions, abstractOverlayObjectExtensions);
+
+        this.overlayXY = overlayXY;
+        this.screenXY = screenXY;
+        this.rotationXY = rotationXY;
+        this.size = size;
+        this.rotation = rotation;
+        this.screenOverlaySimpleExtensions = screenOverlaySimpleExtensions;
+        this.screenOverlayObjectExtensions = screenOverlayObjectExtensions;
+    }
+
+    @Override
+    public Vec2 getOverlayXY() {return this.overlayXY;}
+
+    @Override
+    public Vec2 getScreenXY() {return this.screenXY;}
+
+    @Override
+    public Vec2 getRotationXY() {return this.rotationXY;}
+
+    @Override
+    public Vec2 getSize() {return this.size;}
+
+    @Override
+    public Angle180 getRotation() {return this.rotation;}
+
+    @Override
+    public List<SimpleType> getScreenOverlaySimpleExtensions() {return this.screenOverlaySimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getScreenOverlayObjectExtensions() {return this.screenOverlayObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Shape.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Shape.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,18 @@
+package org.geotoolkit.data.model.kml;
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public enum Shape {
+
+    RECTANGLE("rectangle"),
+    CYLINDER("cylinder"),
+    SPHERE("sphere");
+
+    private String shape;
+
+    private Shape(String shape){
+        this.shape = shape;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SimpleData.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SimpleData.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface SimpleData {
+
+    public String getName();
+    public String getContent();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SimpleDataDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SimpleDataDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,23 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class SimpleDataDefault implements SimpleData {
+
+    private String name;
+    private String content;
+
+    public SimpleDataDefault(String name, String content){
+        this.name = name;
+        this.content = content;
+    }
+
+    @Override
+    public String getName() {return this.name;}
+
+    @Override
+    public String getContent() {return this.content;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SimpleField.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SimpleField.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,15 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface SimpleField {
+
+    public String getDisplayName();
+    //public List<SimpleFieldExtension> getSimpleFieldExtensions();
+    public String getType();
+    public String getName();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SimpleFieldDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/SimpleFieldDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,28 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class SimpleFieldDefault implements SimpleField {
+
+    private String displayName;
+    private String type;
+    private String name;
+
+    public SimpleFieldDefault(String displayName, String type, String name){
+        this.displayName = displayName;
+        this.type = type;
+        this.name = name;
+    }
+
+    @Override
+    public String getDisplayName() {return this.displayName;}
+
+    @Override
+    public String getType() {return this.type;}
+
+    @Override
+    public String getName() {return this.name;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Style.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Style.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,20 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Style extends AbstractStyleSelector {
+
+    public IconStyle getIconStyle();
+    public LabelStyle getLabelStyle();
+    public LineStyle getLineStyle();
+    public PolyStyle getPolyStyle();
+    public BalloonStyle getBalloonStyle();
+    public ListStyle getListStyle();
+    public List<SimpleType> getStyleSimpleExtensions();
+    public List<AbstractObject> getStyleObjectExtensions();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/StyleDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/StyleDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,77 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class StyleDefault extends AbstractStyleSelectorDefault implements Style {
+
+    private IconStyle iconStyle;
+    private LabelStyle labelStyle;
+    private LineStyle lineStyle;
+    private PolyStyle polyStyle;
+    private BalloonStyle balloonStyle;
+    private ListStyle listStyle;
+    private List<SimpleType> styleSimpleExtensions;
+    private List<AbstractObject> styleObjectExtensions;
+
+    public StyleDefault(List<SimpleType> objectSimpleExtensions,
+            IdAttributes idAttributes,
+            List<SimpleType> abstractStyleSelectorSimpleExtensions,
+            List<AbstractObject> abstractStyleSelectorObjectExtensions,
+            IconStyle iconStyle, LabelStyle labelStyle, LineStyle lineStyle, PolyStyle polyStyle, BalloonStyle balloonStyle, ListStyle listStyle,
+            List<SimpleType> styleSimpleExtensions,
+            List<AbstractObject> styleObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+            abstractStyleSelectorSimpleExtensions,
+            abstractStyleSelectorObjectExtensions);
+        this.iconStyle = iconStyle;
+        this.labelStyle = labelStyle;
+        this.lineStyle = lineStyle;
+        this.polyStyle = polyStyle;
+        this.balloonStyle = balloonStyle;
+        this.listStyle = listStyle;
+        this.styleSimpleExtensions = styleSimpleExtensions;
+        this.styleObjectExtensions = styleObjectExtensions;
+    }
+
+    @Override
+    public IconStyle getIconStyle() {return this.iconStyle;}
+
+    @Override
+    public LabelStyle getLabelStyle() {return this.labelStyle;}
+
+    @Override
+    public LineStyle getLineStyle() {return this.lineStyle;}
+
+    @Override
+    public PolyStyle getPolyStyle() {return this.polyStyle;}
+
+    @Override
+    public BalloonStyle getBalloonStyle() {return this.balloonStyle;}
+
+    @Override
+    public ListStyle getListStyle() {return this.listStyle;}
+
+    @Override
+    public List<SimpleType> getStyleSimpleExtensions() {return this.styleSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getStyleObjectExtensions() {return this.styleObjectExtensions;}
+
+    @Override
+    public String toString(){
+        String resultat = super.toString()+
+                "\n\tStyleDefault : "+
+                "\n\ticonStyle : "+this.iconStyle+
+                "\n\tlabelStyle : "+this.labelStyle+
+                "\n\tlineStyle : "+this.lineStyle+
+                "\n\tpolyStyle : "+this.polyStyle+
+                "\n\tballoonStyle : "+this.balloonStyle+
+                "\n\tlistStyle : "+this.listStyle;
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/StyleMap.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/StyleMap.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,16 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface StyleMap extends AbstractStyleSelector {
+
+    public List<Pair> getPairs();
+    public List<SimpleType> getStyleMapSimpleExtensions();
+    public List<AbstractObject> getStyleMapObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/StyleMapDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/StyleMapDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,37 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class StyleMapDefault extends AbstractStyleSelectorDefault implements StyleMap {
+
+    private List<Pair> pairs;
+    private List<SimpleType> styleMapSimpleExtensions;
+    private List<AbstractObject> styleMapObjectExtensions;
+
+    public StyleMapDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractStyleSelectorSimpleExtensions,
+            List<AbstractObject> abstractStyleSelectorObjectExtensions,
+            List<Pair> pairs, List<SimpleType> styleMapSimpleExtensions, List<AbstractObject> styleMapObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+            abstractStyleSelectorSimpleExtensions,
+            abstractStyleSelectorObjectExtensions);
+        this.pairs = pairs;
+        this.styleMapSimpleExtensions = styleMapSimpleExtensions;
+        this.styleMapObjectExtensions = styleMapObjectExtensions;
+    }
+
+    @Override
+    public List<Pair> getPairs() {return this.pairs;}
+
+    @Override
+    public List<SimpleType> getStyleMapSimpleExtensions() {return this.styleMapSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getStyleMapObjectExtensions() {return this.styleMapObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/StyleState.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/StyleState.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,36 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public enum StyleState {
+
+    NORMAL("normal"),
+    HIGHLIGHT("highlight");
+
+    private String styleState;
+
+    private StyleState(String itemIconState){
+        this.styleState = itemIconState;
+    }
+
+    public String getStyleState(){
+        return this.styleState;
+    }
+
+    public static StyleState transform(String styleState){
+        return transform(styleState, null);
+    }
+
+    public static StyleState transform(String styleState, StyleState defaultValue){
+        StyleState resultat = defaultValue;
+        for(StyleState cm : StyleState.values()){
+            if(cm.getStyleState().equals(styleState)){
+                resultat = cm;
+                break;
+            }
+        }
+        return resultat;
+    }
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/TimeSpan.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/TimeSpan.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,16 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface TimeSpan extends AbstractTimePrimitive{
+
+    public String getBegin();
+    public String getEnd();
+    public List<SimpleType> getTimeSpanSimpleExtensions();
+    public List<AbstractObject> getTimeSpanObjectExtensions();
+}
\ No newline at end of file
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/TimeSpanDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/TimeSpanDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,40 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class TimeSpanDefault extends AbstractTimePrimitiveDefault implements TimeSpan {
+
+    private String begin;
+    private String end;
+    private List<SimpleType> timeSpanSimpleExtensions;
+    private List<AbstractObject> timeSpanObjectExtensions;
+
+    public TimeSpanDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractTimePrimitiveSimpleExtensions, List<AbstractObject> abstractTimePrimitiveObjectExtensions,
+            String begin, String end, List<SimpleType> timeSpanSimpleExtensions, List<AbstractObject> timeSpanObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                abstractTimePrimitiveSimpleExtensions, abstractTimePrimitiveObjectExtensions);
+        this.begin = begin;
+        this.end = end;
+        this.timeSpanSimpleExtensions = timeSpanSimpleExtensions;
+        this.timeSpanObjectExtensions = timeSpanObjectExtensions;
+    }
+
+    @Override
+    public String getBegin() {return this.begin;}
+
+    @Override
+    public String getEnd() {return this.end;}
+
+    @Override
+    public List<SimpleType> getTimeSpanSimpleExtensions() {return this.timeSpanSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getTimeSpanObjectExtensions() {return this.timeSpanObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/TimeStamp.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/TimeStamp.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,15 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface TimeStamp extends AbstractTimePrimitive{
+
+    public String getWhen();
+    public List<SimpleType> getTimeStampSimpleExtensions();
+    public List<AbstractObject> getTimeStampObjectExtensions();
+}
\ No newline at end of file
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/TimeStampDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/TimeStampDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,35 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class TimeStampDefault extends AbstractTimePrimitiveDefault implements TimeStamp {
+
+    private String when;
+    private List<SimpleType> timeStampSimpleExtensions;
+    private List<AbstractObject> timeStampObjectExtensions;
+
+    public TimeStampDefault(List<SimpleType> objectSimpleExtensions, IdAttributes idAttributes,
+            List<SimpleType> abstractTimePrimitiveSimpleExtensions, List<AbstractObject> abstractTimePrimitiveObjectExtensions,
+            String when, List<SimpleType> timeStampSimpleExtensions, List<AbstractObject> timeStampObjectExtensions){
+        super(objectSimpleExtensions, idAttributes,
+                abstractTimePrimitiveSimpleExtensions, abstractTimePrimitiveObjectExtensions);
+        this.when = when;
+        this.timeStampSimpleExtensions = timeStampSimpleExtensions;
+        this.timeStampObjectExtensions = timeStampObjectExtensions;
+    }
+
+    @Override
+    public String getWhen() {return this.when;}
+
+    @Override
+    public List<SimpleType> getTimeStampSimpleExtensions() {return this.timeStampSimpleExtensions;}
+
+    @Override
+    public List<AbstractObject> getTimeStampObjectExtensions() {return this.timeStampObjectExtensions;}
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Units.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Units.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,38 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public enum Units {
+
+    FRACTION("fraction"),
+    PIXELS("pixels"),
+    INSET_PIXELS("insetPixels");
+    
+    private String unit;
+
+    private Units(String unit){
+        this.unit = unit;
+    }
+
+    public String getUnit(){
+        return this.unit;
+    }
+
+    public static Units transform(String unit){
+        return transform(unit, null);
+    }
+
+    public static Units transform(String unit, Units defaultValue){
+        Units resultat = defaultValue;
+        for(Units u : Units.values()){
+            if(u.getUnit().equals(unit)){
+                resultat = u;
+                break;
+            }
+        }
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Vec2.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Vec2.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,14 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Vec2 {
+
+    public double getX();
+    public double getY();
+    public Units getXUnits();
+    public Units getYUnits();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Vec2Default.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/Vec2Default.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,42 @@
+package org.geotoolkit.data.model.kml;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class Vec2Default implements Vec2 {
+
+    private double x;
+    private double y;
+    private Units xUnit;
+    private Units yUnit;
+
+    public Vec2Default(double x, double y, Units xUnit, Units yUnit){
+        this.x = x;
+        this.y = y;
+        this.xUnit = xUnit;
+        this.yUnit = yUnit;
+    }
+
+    @Override
+    public double getX() {return this.x;}
+
+    @Override
+    public double getY() {return this.y;}
+
+    @Override
+    public Units getXUnits() {return this.xUnit;}
+
+    @Override
+    public Units getYUnits() {return this.yUnit;}
+
+    @Override
+    public String toString() {
+        return "Vec2Default : " +
+                "\n\tx : " +this.x+
+                "\n\ty : " +this.y+
+                "\n\txUnit : " +this.xUnit+
+                "\n\tyUnit : "+this.yUnit;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ViewRefreshMode.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ViewRefreshMode.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,38 @@
+package org.geotoolkit.data.model.kml;
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public enum ViewRefreshMode {
+
+    NEVER("never"),
+    ON_REQUEST("onRequest"),
+    ON_STOP("onStop"),
+    ON_REGION("onRegion");
+
+    private String viewRefreshMode;
+
+    private ViewRefreshMode(String viewRefreshMode){
+        this.viewRefreshMode = viewRefreshMode;
+    }
+
+    public String getViewRefreshMode(){
+        return this.viewRefreshMode;
+    }
+
+    public static ViewRefreshMode transform(String viewRefreshMode){
+        return transform(viewRefreshMode, null);
+    }
+
+    public static ViewRefreshMode transform(String viewRefreshMode, ViewRefreshMode defaultValue){
+        ViewRefreshMode resultat = defaultValue;
+        for(ViewRefreshMode cm : ViewRefreshMode.values()){
+            if(cm.getViewRefreshMode().equals(viewRefreshMode)){
+                resultat = cm;
+                break;
+            }
+        }
+        return resultat;
+    }
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ViewVolume.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/kml/ViewVolume.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,20 @@
+package org.geotoolkit.data.model.kml;
+
+import java.util.List;
+import org.geotoolkit.data.model.xsd.SimpleType;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface ViewVolume extends AbstractObject {
+
+    public Angle180 getLeftFov();
+    public Angle180 getRightFov();
+    public Angle90 getBottomFov();
+    public Angle90 getTopFov();
+    public double getNear();
+    public List<SimpleType> getViewVolumeSimpleExtensions();
+    public List<AbstractObject> getViewVolumeObjectExtensions();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressDetails.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressDetails.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,24 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AddressDetails {
+
+    public PostalServiceElements getPostalServiceElements();
+    //public Address getAddress();
+    public AddressLines getAddressLines();
+    public Country getCountry();
+    public AdministrativeArea getAdministrativeArea();
+    //public Locality getLocality();
+    //public Thoroughfare getThoroughfare();
+    public String getAddressType();
+    public String getCurrentStatus();
+    public String getValidFromDate();
+    public String getValidToDate();
+    public String getUsage();
+    public String getCode();
+    public String getAddressDetailsKey();
+    
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressIdentifier.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressIdentifier.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,13 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AddressIdentifier {
+
+    public String getIdentifierType();
+    public String getType();
+    public String getCode();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressLatitude.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressLatitude.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,11 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AddressLatitude {
+
+    public String getType();
+    public String getCode();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressLatitudeDirection.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressLatitudeDirection.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,11 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AddressLatitudeDirection {
+
+    public String getType();
+    public String getCode();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressLine.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressLine.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AddressLine {
+
+    public String getType();
+    public String getCode();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressLines.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressLines.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,11 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AddressLines {
+
+    public AddressLine getAddressLine();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressLongitude.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressLongitude.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,11 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AddressLongitude {
+
+    public String getType();
+    public String getCode();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressLongitudeDirection.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AddressLongitudeDirection.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,11 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AddressLongitudeDirection {
+
+    public String getType();
+    public String getCode();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AdministrativeArea.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AdministrativeArea.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AdministrativeArea {
+
+    public AddressLine getAddressLine();
+    public AdministrativeAreaName getAdministrativeAreaName();
+    public SubAdministrativeArea getSubAdministrativeArea();
+}
\ No newline at end of file
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AdministrativeAreaName.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/AdministrativeAreaName.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,11 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface AdministrativeAreaName {
+
+    public String getType();
+    public String getCode();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/Barcode.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/Barcode.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,11 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Barcode {
+
+    public String getType();
+    public String getCode();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/Country.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/Country.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,15 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface Country {
+
+    public AddressLine getAddressLine();
+    public CountryNameCode getCountryNameCode();
+    public CountryName getCountryName();
+    public AdministrativeArea getAdministrativeArea();
+    //public Locality getLocality();
+    //public Thoroughfare getThoroughfare();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/CountryName.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/CountryName.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface CountryName {
+
+    public String getType();
+    public String getCode();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/CountryNameCode.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/CountryNameCode.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface CountryNameCode {
+
+    public String getScheme();
+    public String getCode();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/EndorsementLineCode.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/EndorsementLineCode.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface EndorsementLineCode {
+
+    public String getType();
+    public String getCode();
+    
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/KeyLineCode.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/KeyLineCode.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,10 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface KeyLineCode {
+    public String getType();
+    public String getCode();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/PostalServiceElements.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/PostalServiceElements.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,21 @@
+package org.geotoolkit.data.model.xal;
+
+import java.util.List;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface PostalServiceElements {
+
+    public List<AddressIdentifier> getAddressIdentifiers();
+    public EndorsementLineCode getEndorsementLineCode();
+    public KeyLineCode getKeyLineCode();
+    public Barcode getBarcode();
+    public SortingCode getSortingCode();
+    public AddressLatitude getAddressLatitude();
+    public AddressLatitudeDirection getAddressLatitudeDirection();
+    public AddressLongitude getAddressLongitude();
+    public AddressLongitudeDirection getAddressLongitudeDirection();
+    public List<SupplementaryPostalServiceData> getSupplementaryPostalServiceData();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/SortingCode.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/SortingCode.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface SortingCode {
+
+    public String getType();
+    public String getCode();
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/SubAdministrativeArea.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/SubAdministrativeArea.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,15 @@
+package org.geotoolkit.data.model.xal;
+
+import java.util.List;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface SubAdministrativeArea {
+
+    public List<AddressLine> getAddressLines();
+    public List<SubAdministrativeAreaName> getSubadministrativeAreaNames();
+    // SUITE
+
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/SubAdministrativeAreaName.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/SubAdministrativeAreaName.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,11 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface SubAdministrativeAreaName {
+
+    public String getType();
+    public String getCode();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/SupplementaryPostalServiceData.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xal/SupplementaryPostalServiceData.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,11 @@
+package org.geotoolkit.data.model.xal;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface SupplementaryPostalServiceData {
+
+    public String getType();
+    public String getCode();
+}
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xsd/SimpleType.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xsd/SimpleType.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,12 @@
+package org.geotoolkit.data.model.xsd;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public interface SimpleType {
+
+    public static final String BOOLEAN_FALSE = "0";
+    public static final String BOOLEAN_TRUE = "1";
+
+}
\ No newline at end of file
diff -r 83c44405291c -r 64943535b108 modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xsd/SimpleTypeDefault.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/datastore/geotk-kml/src/main/java/org/geotoolkit/data/model/xsd/SimpleTypeDefault.java	Tue May 25 17:24:13 2010 +0200
@@ -0,0 +1,10 @@
+package org.geotoolkit.data.model.xsd;
+
+/**
+ *
+ * @author Samuel Andr√©s
+ */
+public class SimpleTypeDefault implements SimpleType {
+
+
+}
